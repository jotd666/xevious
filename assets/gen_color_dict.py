from PIL import Image,ImageOps
import itertools
import ast

original_palette = set(ast.literal_eval("""{
  { 0x00, 0x00, 0x00 },
  { 0x62, 0x62, 0x62 },
  { 0x2D, 0x8F, 0xFF },
  { 0x00, 0xD2, 0xD2 },
  { 0x51, 0x1F, 0x1F },
  { 0xAE, 0xAE, 0xAE },
  { 0x1F, 0x70, 0xFF },
  { 0x51, 0x43, 0xFF },
  { 0x9D, 0x9D, 0x00 },
  { 0xD2, 0xD2, 0xD2 },
  { 0x43, 0x8F, 0x1F },
  { 0x43, 0x62, 0x00 },
  { 0x9D, 0x9D, 0x43 },
  { 0x62, 0x2D, 0x1F },
  { 0x51, 0x51, 0x1F },
  { 0x51, 0x51, 0x51 },
  { 0x70, 0x8F, 0x2D },
  { 0x51, 0x8F, 0x2D },
  { 0x51, 0x8F, 0x9D },
  { 0x8F, 0x62, 0x00 },
  { 0xE0, 0xBC, 0x00 },
  { 0xD2, 0x62, 0x00 },
  { 0x70, 0x43, 0x00 },
  { 0x43, 0x2D, 0x1F },
  { 0x1F, 0x1F, 0x00 },
  { 0x1F, 0x43, 0x00 },
  { 0x1F, 0x62, 0x00 },
  { 0x2D, 0x70, 0x0E },
  { 0x51, 0x9D, 0xD2 },
  { 0x9D, 0x9D, 0x70 },
  { 0x70, 0x8F, 0x1F },
  { 0x8F, 0x8F, 0x1F },
  { 0xAE, 0x8F, 0x43 },
  { 0x8F, 0x62, 0x1F },
  { 0x70, 0x62, 0x00 },
  { 0x62, 0x51, 0x00 },
  { 0x70, 0x70, 0x70 },
  { 0x8F, 0x8F, 0x8F },
  { 0xFF, 0x00, 0x00 },
  { 0x43, 0x8F, 0x70 },
  { 0x2D, 0x70, 0xBC },
  { 0x00, 0x8F, 0xD2 },
  { 0xE0, 0xBC, 0x62 },
  { 0x00, 0x62, 0x8F },
  { 0xAE, 0xBC, 0xD2 },
  { 0x1F, 0x51, 0xAE },
  { 0x00, 0xD2, 0x00 },
  { 0xAE, 0x00, 0x00 },
  { 0x1F, 0x43, 0x62 },
  { 0x43, 0x8F, 0xBC },
  { 0x51, 0x51, 0x00 },
  { 0xAE, 0xAE, 0x00 },
  { 0x8F, 0x8F, 0x62 },
  { 0x8F, 0x43, 0x43 },
  { 0xFF, 0xFF, 0x00 },
  { 0xFF, 0xAE, 0x00 },
  { 0xFF, 0x62, 0x00 },
  { 0x1F, 0x62, 0xAE },
  { 0xF1, 0xAE, 0x00 },
  { 0xD2, 0x00, 0x00 },
  { 0x00, 0x00, 0xFF },
  { 0xFF, 0xFF, 0xFF },
  { 0xF1, 0xF1, 0xF1 },
  { 0x1F, 0x1F, 0x1F },
  { 0xD2, 0x62, 0x00 },
  { 0xE0, 0xBC, 0x00 },
  { 0x00, 0x51, 0x00 },
  { 0x00, 0x8F, 0x00 },
  { 0x43, 0x43, 0x43 },
  { 0x00, 0xFF, 0xFF },
  { 0x00, 0x8F, 0xFF },
  { 0x8F, 0x00, 0x00 },
  { 0x62, 0x00, 0x00 },
  { 0x00, 0x2D, 0x00 },
  { 0xD2, 0x43, 0x62 },
  { 0x43, 0x43, 0x62 },
  { 0x51, 0x51, 0x8F },
  { 0x8F, 0x8F, 0xAE },
  { 0x70, 0x70, 0x9D },
  { 0x62, 0x62, 0x8F },
  { 0x1F, 0x1F, 0x8F },
  { 0x8F, 0x62, 0x1F },
  { 0x1F, 0x51, 0xBC },
  { 0x51, 0x43, 0x00 },
  { 0xBC, 0x70, 0x1F },
  { 0xFF, 0x8F, 0xFF },
  { 0xD2, 0x43, 0x43 },
  { 0x00, 0xD2, 0xFF },
  { 0xAE, 0x62, 0x00 },
  { 0x43, 0x00, 0x00 },
  { 0xF1, 0xF1, 0x00 },
  { 0xFF, 0xD2, 0xAE },
  { 0xFF, 0xD2, 0x62 },
  { 0xFF, 0xD2, 0x43 },
  { 0xD2, 0x8F, 0x43 },
  { 0xD2, 0xD2, 0xD2 },
  { 0xFF, 0xFF, 0x62 },
  { 0xBC, 0xBC, 0x43 },
  { 0x70, 0x70, 0x1F },
  { 0x2D, 0x2D, 0x2D },
  { 0xFF, 0x8F, 0x00 },
  { 0x43, 0x43, 0xD2 },
  { 0x43, 0x43, 0x1F },
  { 0x62, 0x62, 0x43 },
  { 0xAE, 0xAE, 0x8F },
  { 0xD2, 0xD2, 0xAE },
  { 0xAE, 0x8F, 0x43 },
  { 0x8F, 0x43, 0x1F },
  { 0x00, 0xFF, 0x00 },
  { 0x8F, 0x00, 0xFF },
  { 0xFF, 0x00, 0xFF },
  { 0x8F, 0x43, 0x00 },
  { 0x43, 0x1F, 0x00 },
  { 0x8F, 0x8F, 0x00 },
  { 0x43, 0x43, 0x00 },
  { 0x00, 0x43, 0x00 },
  { 0x00, 0x8F, 0x8F },
  { 0x00, 0x43, 0x43 },
  { 0x00, 0x00, 0x8F },
  { 0x00, 0x00, 0x43 },
  { 0x43, 0x00, 0x8F },
  { 0x1F, 0x00, 0x43 },
  { 0x8F, 0x00, 0x8F },
  { 0x43, 0x00, 0x43 },
  { 0xFF, 0xFF, 0xD2 },
  { 0xFF, 0xFF, 0xAE },
  { 0xFF, 0xAE, 0x62 },
  { 0x00, 0x00, 0x00 },
}
""".replace("}",")").replace("{","(")))


def get_color_dict(orig,reduced):
    return {orig.getpixel((x,y)):reduced.getpixel((x,y))
              for y in range(orig.size[1]) for x in range(orig.size[0])}

def get_colors(pic):
    if isinstance(pic,str):
        pic = Image.open(pic).convert('RGB')
    return {pic.getpixel((x,y)) for y in range(pic.size[1]) for x in range(pic.size[0])}

def doit(dump_pics=False):
    original = Image.open("original_assets.png").convert('RGB')

    tiles = Image.new("RGB",(1024,original.size[1]))
    tiles.paste(original)
    reduced_tiles = tiles.quantize(colors=16,dither=0).convert('RGB')
    sprites = Image.new("RGB",(original.size[0]-1024,original.size[1]))
    sprites.paste(original,(-1024,0))

    # replace tsak green background by black
    for x in range(sprites.size[0]):
        for y in range(sprites.size[1]):
            p = sprites.getpixel((x,y))
            if p == (48, 112, 16):
                sprites.putpixel((x,y),(0,0,0))

    reduced_sprites = sprites.quantize(colors=16,dither=0).convert('RGB')

    if dump_pics:
        reduced_sprites.save("dumps/sprites_16.png")
        reduced_tiles.save("dumps/tiles_16.png")

    sd = get_color_dict(sprites,reduced_sprites)

    # now create a dict with 2 palettes
    return {"map_tiles":get_color_dict(tiles,reduced_tiles),
            "sprites":sd}

if __name__ == "__main__":
    color_dict = doit()