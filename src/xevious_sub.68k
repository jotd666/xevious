***
***  XEVIOUS SUB CPU 68K core implementation
***    (transcoded from Z80 arcade code)
*** (c) 2022 tcdev
***

* exports

    *.global _start_of_xevious_sub_rom
    .global xevious_sub_reset
    .global xevious_sub_cpu
	.global	xevious_sub_irq
    *.global _end_of_xevious_sub_rom
	.global	area_object_tbl_tbl_pointer
* debugging only
    *.global sub_debug1
    *.global sub_debug2

.include "xevious.inc"

* this doesn't return in the real code
* but we are calling from main, so we
* initialise and return

_start_of_xevious_sub_rom:


xevious_sub_reset: | $0000
	lea		area_object_tbl_tbl_super(pc),a0
	lea		flying_enemy_type_offset_tbl_super(pc),a1
	tst.b	is_super_xevious
	bne.b	0f
	lea		area_object_tbl_tbl_normal(pc),a0	
	lea		flying_enemy_type_offset_tbl_normal(pc),a1
0:
	move.l	a0,area_object_tbl_tbl_pointer
	move.l	a1,flying_enemy_type_offset_tbl_pointer
    bra.b     sub_start
    
.ifne OPT_SUB_HAS_IRQ
xevious_sub_irq:
    *** these are ordinarily called from the main SUB routine
    *** because there is not interrupt context in SUB
    *** - calls these from the MAIN IRQ instead
    *** - try swapping the order to reduce 'shaking'
    ***   of ground objects
    ****bsr       sub_fn_0__update_32_sprite_hw
    move.w    #32,d0                            | start at sprite 32
    jsr       osd_update_32_sprite_hw
    ***bsr       sub_fn_1__update_scroll_hw
    move.w    (bg_scroll_x_shadow),d6
    jsr       osd_update_scroll_hw
    rts
.endif

save_PC_to_fn_tbl_and_ret: | $0030
    move.l    (a7)+,(a6)                        | pop return and store in table
    rts                                         | return up the call stack


sub_start: | $0165
    * Z80 copied area object table from ROM to RAM
    * so MAIN CPU could access it. No need to do so
    * on 68K as it's one program.
    lea       sub_fn_jump_tbl_ROM,a0
    lea       sub_fn_jump_tbl_RAM,a1            | need a copy to patch in RAM
    moveq     #0x20-1,d7
1:  move.l    (a0)+,(a1)+
    dbf       d7,1b   
    move.l       area_object_tbl_tbl_pointer(pc),a0            | need to copy for MAIN
    lea       area_object_tbl_tbl_RAM,a1
    move.q    #16-1,d7
2:  move.l    (a0)+,(a1)+
    dbf       d7,2b   
    * Return here after initialisation
    * main function will call below regularly
    rts
    

xevious_sub_cpu: | $018A
restart_main_fn_loop:
    move.w    #0x100F,d0                        | blue
    jsr       osd_debug_hook

    lea       sub_fn_jump_tbl_RAM,a6            | 32 functions
    moveq     #32-1,d7
main_fn_loop:   
    move.l    (a6),d0                           | get jump address
	beq.b	1f		| skip if 0
    movem.l   d7/a6,-(a7)
    move.l	d0,a0
    jsr       (a0)                          | call function
    movem.l   (a7)+,d7/a6
1:
    | next table entry (we can't do move.l (a6)+,d0
	| as code seems to rely on current a6 value)
	addq.w	#4,a6
    dbf       d7,main_fn_loop

    move.w    #0x8000,d0                        | black
    jsr       osd_debug_hook

    * the Z80 code jumps back to restart_main_loop
    * - but we need to share CPU with the MAIN code
    * - so return here
9:  rts

    .align 4
sub_fn_jump_tbl_ROM: | $01B6
.ifne OPT_SUB_HAS_IRQ
    .long     0                           | not used
    .long     0                           | not used
.else
    .long     sub_fn_0__update_32_sprite_hw
    .long     sub_fn_1__update_scroll_hw
.endif
    .long     sub_fn_2__handle_objects
    .long     sub_fn_3__handle_next_area
    .long     sub_fn_4__handle_credits_and_start
    .long     sub_fn_5__handle_pulsing_colours
    .long     sub_fn_6__display_1UP_2UP
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     0                           | not used
    .long     sub_fn_30__handle_scroll
    .long     sub_fn_31__update_sprite_shadow
        
sub_fn_0__update_32_sprite_hw: | $01F6
    * on the Neo Geo we have do disable VBLANK
    * and possibly on other platforms as well
    * the other options is to move this into VBLANK
    * see OPT_SUB_HAS_IRQ
    jsr       osd_disable_vblank_interrupt
    move.w    #32,d0                            | start at sprite 32
    jsr       osd_update_32_sprite_hw
    jmp       osd_enable_vblank_interrupt
        
sub_fn_1__update_scroll_hw: | $0218
    * on the Neo Geo we have do disable VBLANK
    * and possibly on other platforms as well
    * the other options is to move this into VBLANK
    * see OPT_SUB_HAS_IRQ
    jsr       osd_disable_vblank_interrupt
    move.w    (bg_scroll_x_shadow),d6
    jsr       osd_update_scroll_hw
    jmp       osd_enable_vblank_interrupt

* handling of reading coins and start buttons
* is done by the NAMCO chips
* - do it completely differently here
sub_fn_4__handle_credits_and_start: | $0227
    jsr       osd_read_coin
    beq.b       1f
    * add a credit
    cmp.b     #0x99,(num_credits)               | max credits?
    beq.b     1f                                | yes, exit
    moveq     #1,d0
    move.b    (num_credits),d1
    abcd      d0,d1
    move.b    d1,(num_credits)
    moveq     #COIN_SND,d0
    jsr       osd_sound_start
    * process 1P, 2P
1:  moveq     #0,d2
    jsr       osd_read_start
    beq.b     9f
    btst.b    #0,d0                             | P1START?
    beq.b     2f                                | no, skip
    cmp.b     #1,(num_credits)                  | enough for 1P?
    bcs.b     9f                                | no, exit
    moveq     #1,d2                             | 1 credit/player
    bra.b     8f
2:  btst.b    #1,d0                             | P2START?
    beq.b     9f                                | no, return
    cmp.b     #2,(num_credits)                  | enough for 2P?
    bcs.b     9f                                | no, exit
    moveq     #2,d2                             | 2 credits/players
    * can start a game here
8:  andi      #0x0f,ccr                         | clear X
    move.b    (num_credits),d1
    sbcd      d2,d1                             | calc new credits
    move.b    d1,(num_credits)
    subq.b    #1,d2                             | 0=1P/1=2P
    move.b    d2,(two_player_game)
    move.b    #1,(start_pressed)
9:  rts

sub_fn_5__handle_pulsing_colours: | $0264
    tst.b     (scroll_disabled)
    bne.b     9f
    move.b    (countup_timer_1),d0
    lsr.b     #1,d0
    and.b     #3,d0
    add.b     #0x25,d0                          | calculate colour
    lea       obj_tbl+0x27*_OBJSIZE,a5          | bullets
    moveq     #19-1,d7                          | 19 bullets
1:  move.b    d0,(_COLOUR,a5)
    lea       (_OBJSIZE,a5),a5                  | next object
    dbf       d7,1b
    move.b    (countup_timer_1),d0
    lsr.b     #3,d0
    and.w     #7,d0
    lea       colour_lut_pulsing_1,a0
    move.b    (a0,d0.w),(pulsing_colour_1)
    lea       colour_lut_pulsing_2,a0
    move.b    (a0,d0.w),(pulsing_colour_2)
9:  rts

colour_lut_pulsing_1:
    .byte 7, 8, 9, 0xA, 0xB, 0xA, 9, 8
colour_lut_pulsing_2:
    .byte 0x10, 0x11, 0x12, 0x13, 0x14, 0x13, 0x12, 0x11
    
sub_fn_30__handle_scroll: | $02A6
    tst.b     (scroll_disabled)
    bne.b     9f
    bsr.b     get_map_row
    move.w    #0x40,d0
    move.w    (scroll_cntr),d1
    add.w     d0,d0
    add.w     d1,d0
    lsr.w     #5,d0
    and.w     #0x1ff,d0
    move.w    d0,(bg_scroll_x_shadow)
9:  rts

get_map_row: | $02D4
    move.w    (scroll_cntr),d0
    move.w    d0,d2                             | copy
    move.w    (scroll_delta),d1
    add.w     d1,d1                             | x2
    add.w     d0,d1
    move.w    d1,(scroll_cntr)                  | update
    lsr.w     #8,d1                             | scroll MSB
    lsr.w     #8,d2
    cmp.b     d2,d1                             | same as before?
    beq.b     9f                                | yes, return
    bmi.b     1f
    add.b     #0x40,d1
1:  add.b     #0xf2,d1                          | adjustment (map row)
    move.b    (area_offset_in_map),d2
    add.b     #0xFF,d2                          | adjustment (map column)
    moveq     #32-1,d7                          | 32 tiles
    move.w    #0xFE00,d0                        | column=-2
2:  or.b      d1,d0                             | add map row
    move.b    d1,(xevious_bs0)                  | map row
    move.b    d2,(xevious_bs1)                  | map col
    movem.l   d0-d2,-(a7)
	* d0 holds col,row
	* inlined calc_colour_video_ram_offset: | $0038
    move.w    d0,d6
    addq.w    #3,d6
    and.w     #0x003f,d6
    add.w     #0x0300,d0
    lsr.w     #2,d0
    and.w     #0x07C0,d0
    or.w      d6,d0
    moveq     #0,d6
    jbsr     xevious_bb_r                      | d6=attr
    move.w    d6,d1
    jsr       osd_w_bg_colorram
    moveq     #1,d6
    jbsr     xevious_bb_r                      | d6=tile
    move.w    d6,d1
    jsr       osd_w_bg_videoram
    movem.l   (a7)+,d0-d2
    add.w     #0x0100,d0
    addq.b    #1,d2
    dbf       d7,2b
9:  rts

sub_fn_31__update_sprite_shadow: | $031E
    lea       obj_tbl,a5
    jmp       osd_update_sprite_shadow

* byte3 is a signed offset into flying_enemy_offset_tbl
* which in turn sets number of flying enemies and
* their types from flying_enemy_type_table in MAIN ROM.
* a0 = ptr byte 3
sub_2_fn_2__set_flying_enemies: | $03BD
    moveq     #0,d0
    move.b    (a0),d0
    ext.w     d0                                | can be -ve
    lea       (1,a0),a0
update_flying_enemies:
    move.l     flying_enemy_type_offset_tbl_pointer(pc),a1
	add.w	    d0,d0
    move.b    (a1,d0.w),(num_flying_enemies)
    move.b    (1,a1,d0.w),(flying_enemy_type_tbl_offset)
    move.l    a0,(area_obj_ptr)
    rts

* depending on difficulty setting, this function
* increases enemy_AI_level, and then uses it
* to index into the flying enemy type offset table
* a0 = ptr byte 3
sub_2_fn_3__inc_enemy_AI_and_flying_enemies: | $03D1
    move.b    (dswb),d1
    not.b     d1
    rol.b     #3,d1
    and.w     #3,d1                             | difficulty DIPs
    lea       difficulty_tbl,a1
    move.b    (a1,d1.w),d0                      | get entry
    add.b     (enemy_AI_level),d0
    cmp.b     #0x80,d0                          | too high?
    bcs.b     1f                                | no, skip
    sub.b     #0x40,d0                          | decrease again
1:  move.b    d0,(enemy_AI_level)
    bra       update_flying_enemies

sub_2_fn_5__reset_flying_enemies: | $03FD
    clr.b     (num_flying_enemies)
    clr.b     (flying_enemy_type_tbl_offset)
    move.l    a0,(area_obj_ptr)
    rts

* increments for AI level per difficulty DIP setting
difficulty_tbl: 
    .byte   2
    .byte   0
    .byte   6
    .byte   0x10

sub_2_fn_23__adjust_AI_level_based_on_score: | $040C
    move.l    a0,(area_obj_ptr)
    move.w    (curr_player_score_msb),d1        | thousands, BCD
    move.b    (solvalou_number),d0
    bsr.b     avg_score_per_solvalou
    cmp.w     #16,d1                            | less than 16K/solvalou?
    ble.b     1f                                | yes, skip
    move.w    #16,d1                            | limit
1:  add.b     d1,(enemy_AI_level)    
    rts

* Divides score (K's) by sovlalou#
* (technically - treats BCD as binary)
* IOW - averge score per solvalou
* d1=score (K's,BCD), d0=#solvalou
* Returns 16-bit result in d1
avg_score_per_solvalou: | $0E23
    move.b    d0,d2
    moveq     #0,d0
    moveq     #16-1,d7
1:  add.w     d1,d1
    roxl.b    #1,d0
    bcs.b     2f
    cmp.b     d2,d0
    bcs.b     3f
2:  sub.b     d2,d0
    addq.w    #1,d1
3:  dbf       d7,1b
    rts
            
* a0 = ptr byte 3
sub_2_fn_8__fire_freq_mask_derota: | $043E
    move.b    (a0)+,(ffreq_mask_derota)    
    move.l    a0,(area_obj_ptr)
    rts
    
* a0 = ptr byte 3
sub_2_fn_9__fire_freq_mask_logram: | $0448
    move.b    (a0)+,(ffreq_mask_logram)    
    move.l    a0,(area_obj_ptr)
    rts

sub_2_fn_11__fire_freq_mask_zoshi: | $0452
    move.b    (a0)+,(ffreq_mask_zoshi)   
    move.l    a0,(area_obj_ptr)
    rts

sub_2_fn_12__fire_freq_mask_terrazi: | $045C
    move.b    (a0)+,(ffreq_mask_terrazi)   
    move.l    a0,(area_obj_ptr)
    rts

sub_2_fn_13__fire_freq_mask_kapi: | $0466
    move.b    (a0)+,(ffreq_mask_kapi)    
    move.l    a0,(area_obj_ptr)
    rts

sub_2_fn_16__fire_freq_mask_boza_logram: | $0470
    move.b    (a0)+,(ffreq_mask_boza_logram)   
    move.l    a0,(area_obj_ptr)
    rts

sub_2_fn_17__fire_freq_mask_domogram: | $047A
    move.b    (a0)+,(ffreq_mask_domogram)    
    move.l    a0,(area_obj_ptr)
    rts

sub_2_fn_22__fire_freq_mask_andor_genesis: | $0484
    move.b    (a0)+,(ffreq_mask_andor_genesis)   
    move.l    a0,(area_obj_ptr)
    rts

sub_2_fn_10__gnd_stop_firing_row: | $048E
    move.b    (a0)+,(gnd_stop_firing_row)    
    move.l    a0,(area_obj_ptr)
    rts

flying_enemy_type_offset_tbl_pointer:
	.long	0
* flying enemy number and offset table
* - byte $00 -> $802B = num flying enemies
* - byte $01 -> $802C = offset into flying enemy type table

* this table can have negative offsets!
    .byte 4, 0xB, 5, 0xA, 6, 9, 6, 0x25, 6, 0x5C, 6, 0x29, 6, 0x5E, 6, 0x64
    .byte 6, 0x66, 6, 0x72, 4, 0x30, 4, 0x31, 5, 0x30, 6, 0x30, 6, 0x3F, 6, 0x48
    .byte 6, 0x4B, 2, 0x54, 3, 0x54, 4, 0x54, 2, 0x58, 3, 0x58, 4, 0x58, 4, 0x58
    .byte 4, 0x58, 4, 0x58, 4, 0x58, 4, 0x58, 4, 0x58, 4, 0x58, 4, 0x58, 4, 0x58
flying_enemy_type_offset_tbl_normal:
    .byte 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1
    .byte 5, 1, 2, 0x19, 2, 0x19, 2, 0x19, 4, 1, 4, 1, 4, 4, 4, 4
    .byte 4, 5, 4, 5, 5, 5, 5, 5, 6, 5, 6, 5, 3, 0x19, 3, 0x19
    .byte 4, 0x19, 4, 0x19, 5, 0x19, 5, 0x19, 3, 0x27, 3, 0x27, 4, 0x27, 4, 0x27
    .byte 5, 0x27, 5, 0x27, 3, 0x1F, 3, 0x1F, 4, 0x1F, 4, 0x1F, 5, 0x1F, 5, 0x1F
    .byte 3, 0x13, 3, 0x13, 4, 0x13, 4, 0x13, 5, 0x13, 5, 0x13, 3, 0x36, 3, 0x36
    .byte 3, 0x37, 3, 0x37, 4, 0x37, 4, 0x37, 3, 0x2D, 3, 0x2D, 4, 0x2D, 4, 0x2D
    .byte 5, 0x2D, 5, 0x2D, 4, 0x12, 4, 0x12, 4, 0x11, 4, 0x11, 5, 0x11, 5, 0x11
    .byte 5, 0x17, 5, 0x17, 6, 0x17, 6, 0x17, 2, 0x3C, 3, 0x3C, 3, 0x3C, 4, 0x3C
    .byte 4, 0x3C, 5, 0x3C, 5, 0x19, 5, 0x19, 6, 0x19, 6, 0x19, 2, 0x45, 3, 0x45
    .byte 3, 0x45, 4, 0x45, 4, 0x45, 5, 0x45, 5, 0x2D, 5, 0x2D, 6, 0x2D, 6, 0x2D
    .byte 4, 0x27, 4, 0x27, 5, 0x27, 5, 0x27, 6, 0x27, 6, 0x27, 5, 0xD, 5, 0xD
    .byte 6, 0xD, 6, 0xD, 2, 0x6D, 3, 0x6C, 3, 0x6C, 4, 0x6C, 4, 0x6C, 5, 0x6C
    .byte 6, 0xD, 6, 0xD, 6, 7, 6, 7, 6, 7, 6, 7, 2, 0x4E, 3, 0x4E
    .byte 3, 0x4E, 4, 0x4E, 4, 0x4E, 5, 0x4E, 6, 7, 6, 7, 6, 7, 6, 7
    .byte 1, 0x54, 2, 0x54, 6, 7, 6, 7, 6, 7, 6, 7, 1, 0x58, 2, 0x58


    .byte 4, 1, 3, 1, 3, 0x49, 1, 0x39, 6, 0x2D, 6, 0x23, 6, 0x11, 4, 0x2D
    .byte 5, 0x23, 3, 0x6C, 3, 0x49, 4, 0x4A, 6, 0xE, 6, 0x4F, 6, 0x26, 6, 0x6C
    .byte 6, 0x11, 3, 0x39, 5, 0x23, 6, 0x49, 6, 0x2F, 3, 0x3C, 6, 1, 6, 0xE
    .byte 1, 0x7A, 2, 0x7A, 4, 0x7A, 6, 0x7A, 4, 0x58, 4, 0x58, 4, 0x58, 4, 0x58
flying_enemy_type_offset_tbl_super:
    .byte 3, 1, 3, 1, 4, 1, 3, 3, 3, 5, 4, 3, 4, 4, 4, 5
    .byte 3, 0x17, 5, 4, 4, 0x17, 5, 5, 4, 0x17, 6, 3, 4, 0x17, 6, 4
    .byte 3, 0x1D, 6, 5, 4, 0x1D, 6, 5, 5, 0x17, 4, 0x1D, 5, 0x17, 5, 0x1D
    .byte 4, 0x2D, 5, 0x17, 5, 0x2D, 6, 0x1D, 6, 0x17, 4, 0x20, 6, 0x2D, 3, 0x23
    .byte 3, 0xB, 6, 0x2D, 4, 0xB, 4, 0x23, 3, 0x11, 6, 0x2D, 5, 0xB, 5, 0x23
    .byte 3, 0x40, 6, 0xD, 4, 0x40, 6, 0xB, 6, 0x2D, 5, 0x40, 6, 0x23, 6, 0xE
    .byte 3, 0x62, 4, 0x42, 4, 0x62, 6, 0x14, 6, 0x11, 4, 0x44, 4, 0x62, 6, 0x14
    .byte 3, 0x33, 4, 0x45, 4, 0x33, 5, 0x62, 3, 0x47, 6, 0x11, 6, 0x14, 6, 0x49
    .byte 4, 0x4C, 5, 0x33, 6, 0x62, 3, 0x27, 6, 0x56, 6, 0x5C, 6, 0x2D, 5, 0x33
    .byte 6, 0x62, 6, 5, 6, 0x4C, 5, 0x26, 6, 0x52, 6, 0x33, 6, 0x11, 1, 0x39
    .byte 6, 0x17, 6, 0x50, 2, 0x39, 6, 0x6E, 6, 0x33, 6, 0x2F, 6, 0x2D, 3, 0x39
    .byte 6, 5, 6, 0x52, 6, 0x27, 6, 0x60, 3, 0x39, 4, 0x6E, 6, 0x62, 4, 0x70
    .byte 3, 0x3C, 2, 0x73, 6, 0x56, 6, 0x50, 6, 0x52, 4, 0x39, 6, 0x26, 6, 0x2D
    .byte 6, 0x33, 6, 5, 4, 0x3C, 5, 0x71, 6, 0x56, 6, 0x74, 6, 0x11, 5, 0x3A
    .byte 6, 0x17, 6, 0x52, 5, 0x39, 6, 0x50, 6, 0x56, 6, 0x27, 6, 0x2D, 6, 0x6C
    .byte 6, 5, 5, 0x3A, 6, 0x65, 5, 0x75, 6, 0x69, 6, 0x2B, 6, 0x35, 6, 0x3A


sub_2_fn_7__reset_num_bacura: | $05D8
    clr.b     (num_bacura)
    move.l    a0,(area_obj_ptr)
    rts
    
* handles Domogram (dome that follows paths)
* byte2 = type
* byte3 = offset
* byte4 = sprite Y
* byte5 = num 2-byte entries to follow
* byte6 = vector length
* byte7 = index into domogram vector table (dY,dX pairs)
* byteN...
*
* @$7F<byte3> = <byte2> (type)
* @$7B<byte3> = <byte4> sprite Y[2:0] x32
* @$7B<byte3+1> = <byte4> sprite Y[7:3] /8
* @$7D<byte3+1> = <byte5> num 2-byte entries to follow
* @$9380<n*64> = <byte5>*2 bytes copied from <byte6> onwards

sub_2_fn_15__domogram: | $05E1
    moveq     #0,d0
    move.b    (a0),d0                           | byte3=object offset (Z80)
    *** this will change if _OBJSIZE changes
    lsl.w     #4,d0                             | object offset (68K)
    lea       obj_tbl,a5
    lea       (a5,d0.w),a5                      | set object base
    move.b    (-1,a0),(_TYPE,a5)
    moveq     #0,d0
    move.b    (1,a0),d0                         | byte4=spriteY
    lsl.w     #5,d0                             | x32
    move.w    d0,(_Y,a5)
    moveq     #0,d0
    move.b    (2,a0),d0                         | byte5=num entries
    adda.w    #3,a0                             | ptr domogrm data
    move.l    a0,a1                             | copy
    move.b    d0,(_NVEC,a5)                     | number of domogram vectors
    add.w     d0,d0                             | bytes to skip
    adda.w    d0,a0
    move.l    a0,(area_obj_ptr)
    move.w    (next_domogram),d0
	  lsl.w     #6,d0                             | *64 offset in table
    lea       domogram_tbl,a2
    lea       (a2,d0.w),a2                      | address in table
    move.l    a2,(_EXTRA,a5)                    | store ptr
    moveq     #64-1,d7                          | 64 bytes (max) to copy
1:  move.b    (a1)+,(a2)+                       | copy path data
    dbf       d7,1b
    move.w    (next_domogram),d0
    addq.b    #1,d0
    cmp.b     #12,d0                            | wrap?
    bcs.b     2f
    clr.w     d0
2:  move.w    d0,(next_domogram)
    rts

sub_2_fn_18__sheonite_start: | $062E
    lea       obj_tbl+_OBJSIZE*0x3f,a5          | 6th flying object
    move.b    #0x31,(_TYPE,a5)
    lea       (-_OBJSIZE,a5),a5                 | 5th flying object
    move.b    #0x32,(_TYPE,a5)
    clr.b     (sheonite_end_flag)
    move.l    a0,(area_obj_ptr)
    rts   
    
sub_2_fn_19__sheonite_end: | $0640
    move.b    #1,(sheonite_end_flag)            | flag time to leave
    move.l    a0,(area_obj_ptr)
    rts   

sub_2_fn_20__andor_genesis_start: | $064A
    lea       obj_tbl+_OBJSIZE*0x0F,a5
    ** Another Xevious BUG!!!
    ** state=2 causes this object to award points when
    ** the core is bombed
    ** - points are awarded from the last object #15
    move.b    #2,(_STATE,a5)
    clr.b     (_ATTR,a5)                        | size=1x1
    move.b    #0xf8,(_X,a5)                     | MSB
    move.w    #0x0e80,(_Y,a5)
    clr.b     (_CODE,a5)
    move.l    a0,(area_obj_ptr)
    clr.b     (andor_genesis_end_flag)
    lea       andor_genesis_data,a0
    lea       obj_tbl+_OBJSIZE*1,a1             | object1
    moveq     #15-1,d7                          | 15 objects
1:  move.b    (a0)+,(_TYPE,a1)
    lea       (_OBJSIZE,a1),a1
    dbf       d7,1b
    rts   

andor_genesis_data: | $0676
    .byte 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x52, 0x51, 0x50, 0x4F, 0x4A, 0x4B
    .align 2
    
sub_2_fn_21__andor_genesis_end: | $0685
    move.l    a0,(area_obj_ptr)
    move.b    #1,(andor_genesis_end_flag)
    rts   
                
sub_fn_2__handle_objects: | $068F
    movea.l   (area_obj_ptr),a0
    ** Another Xevious BUG!!!
    ** We need to check for zero here, because this
    ** gets executed before area_obj_ptr and scroll_cntr
    ** are initialised by the MAIN CPU.
    ** In the Z80 code, @$0000=$3E, which doesn't match
    ** On the Neo Geo, @$0000=$00, which does match
    **   and ultimately jumps to an invalid address
    cmpa.l    #0,a0
    beq.b     9f
    move.b    (scroll_cntr),d0                  | MSB
    cmp.b     (a0),d0                           | current row?
    bne.b     9f
    moveq     #0,d0
    move.b    (1,a0),d0                         | byte #2 (type)
    adda.w    #2,a0                             | ptr byte #3
    lea       obj_fn_tbl,a1
    move.b    (-1,a1,d0.w),d0                   | table is -1 based, index=type
    lea       sub_fn_2_handler,a1
	.ifdef	NO68020
    add.w     d0,d0
    add.w     d0,d0                             | offset in table
    movea.l   (a1,d0.w),a1                      | jump address
    jmp       (a1)
	.else
	jmp		([a1,d0.w*4])
	.endif
9:  rts

* table of function handlers for each object type
* - 1-based
obj_fn_tbl: | $06AA
    .byte 0, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0xE, 0xE, 1, 0, 1, 1, 1, 1
    .byte 1, 6, 7, 8, 9, 1, 1, 0xA, 0xB, 0xC, 0xD, 1, 1, 0xF, 0x10, 0x11
    .byte 0, 0, 0x12, 0x13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    .byte 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0x14, 0x15, 0x16, 0, 0
    .byte 0, 0, 1, 0, 0, 0, 0x17
    * added for Super Xevious
    .byte 0, 0, 0, 1, 1, 1

    .align 4    
sub_fn_2_handler:
    .long     sub_2_fb_0__type_only
    .long     sub_2_fn_1__ground_object
    .long     sub_2_fn_2__set_flying_enemies
    .long     sub_2_fn_3__inc_enemy_AI_and_flying_enemies
    .long     null_fn                           | UNUSED
    .long     sub_2_fn_5__reset_flying_enemies
    .long     sub_2_fn_6__set_bacura_inc_cnt
    .long     sub_2_fn_7__reset_num_bacura
    .long     sub_2_fn_8__fire_freq_mask_derota
    .long     sub_2_fn_9__fire_freq_mask_logram
    .long     sub_2_fn_10__gnd_stop_firing_row
    .long     sub_2_fn_11__fire_freq_mask_zoshi
    .long     sub_2_fn_12__fire_freq_mask_terrazi
    .long     sub_2_fn_13__fire_freq_mask_kapi
    .long     null_fn                           | UNUSED
    .long     sub_2_fn_15__domogram
    .long     sub_2_fn_16__fire_freq_mask_boza_logram
    .long     sub_2_fn_17__fire_freq_mask_domogram
    .long     sub_2_fn_18__sheonite_start
    .long     sub_2_fn_19__sheonite_end
    .long     sub_2_fn_20__andor_genesis_start
    .long     sub_2_fn_21__andor_genesis_end
    .long     sub_2_fn_22__fire_freq_mask_andor_genesis
    .long     sub_2_fn_23__adjust_AI_level_based_on_score

* add object type only
* - byte2 is object type
* - byte3 is offset in RAM
*
* @$7F<byte3> = byte2 (type)
* a0 = ptr byte 3
sub_2_fb_0__type_only: | $0731
    moveq     #0,d0
    move.b    (a0),d0                           | byte3=object offset (Z80)
    *** this will change if _OBJSIZE changes
    lsl.w     #4,d0                             | object offset (68K)
    lea       obj_tbl,a5
    lea       (a5,d0.w),a5                      | set object base
    move.b    (-1,a0),(_TYPE,a5)
    lea       (1,a0),a0
    move.l    a0,(area_obj_ptr)
    rts
 
null_fn:
	rts
	
* add object type and sprite coordinate
* - byte2 is object type
* - byte3 is offset in RAM
* - byte4 is sprite pixel Y coordinate
*
* @$7F<byte3> = <byte2> (type)
* @$7B<byte3> = <byte4> (spriteY[2:0] x32)
* @$7B<byte3+1> = <byte4> (spriteY[7:3] /8)
* a0 = ptr byte 3
sub_2_fn_1__ground_object: | $073F
    moveq     #0,d0
    move.b    (a0),d0                           | byte3=object offset (Z80)
    *** this will change if _OBJSIZE changes
    lsl.w     #4,d0                             | object offset (68K)
    lea       obj_tbl,a5
    lea       (a5,d0.w),a5                      | set object base
    move.b    (-1,a0),(_TYPE,a5)
    moveq     #0,d0
    move.b    (1,a0),d0                         | spriteY
    lsl.w     #5,d0                             | x32
    move.w    d0,(_Y,a5)
    lea       (2,a0),a0                         | next object
    move.l    a0,(area_obj_ptr)
    rts

* sets the number of bacura to be added
* - one added every 1 second
sub_2_fn_6__set_bacura_inc_cnt: | $075D
    move.b    (a0)+,(bacura_inc_cnt)
    move.l    a0,(area_obj_ptr)
    rts
    
sub_fn_3__handle_next_area: | $078B
    jbsr       save_PC_to_fn_tbl_and_ret   
    cmp.b     #0x0e,(scroll_cntr)               | MSB
    beq.b     9f                                | not ready to finish
    jbsr       save_PC_to_fn_tbl_and_ret   
    cmp.b     #0x0e,(scroll_cntr)               | MSB
    bne.b     9f                                | not finished
    move.w    (area),d0
    .ifeq OPT_LOOP_AREA
    addq.w    #1,d0                             | inc area
    .endif
    cmp.w     #16,d0                            | last area?
    bne.b     1f                                | no, skip
    move.w    #6,d0                             | restart at area 7
1:  move.w    d0,(area)                         | update area
    lea       area_offset_in_map_tbl,a0
    move.b    (a0,d0.w),(area_offset_in_map)    | update offset
	move.l	area_object_tbl_tbl_pointer(pc),a0
	.ifdef		NO68020
    add.w	    d0,d0                             | offset in table
    add.w	    d0,d0                             | offset in table
    move.l    (a0,d0.w),(area_obj_ptr)          | new area ptr
	.else
	move.l	(a0,d0.w*4),(area_obj_ptr)
	.endif
    *** show area on screen for debugging
    .ifne OPT_DISPLAY_AREA
    move.w    #0x0123,d0                        | screen col,row
    move.w    (area),d1
    addq.w    #1,d1
    moveq     #BANK_FG_VIDEORAM,d2
    jbsr       display_char
    .endif
    bra.b     sub_fn_3__handle_next_area
9:  rts
area_offset_in_map_tbl: | $07BD
    .byte 0x24, 0, 0x54, 0xE, 0x40, 0x1A, 0x64, 4, 0x2A, 0x5C, 0xE, 4, 0x38, 0x54, 0x1A, 0

* SUB CPU had a local copy of area_offset_in_map_tbl here
* - we don't need it for 68K target
            
sub_fn_6__display_1UP_2UP: | $07CD
    tst.b     (maincpu_inited)
    beq.b     9f
    move.b    (countup_timer_1),d3
    lsr.b     #4,d3
    and.b     #1,d3                             | d3=bit4 of timer (Z80 B)
    move.w    #0x1800,d0                        | col=24
    move.w    #0x0500,d1                        | col=5
    moveq     #0,d6
    move.b    (curr_player),d6                  | d6=player(0/1) (Z80 C)
    beq.b     1f                                | P1? yes, skip
    exg       d0,d1                             | swap cols
1:  bsr.b     flash_1up_2up
    exg       d0,d1                             | swap cols
    tst.b     (two_player_game)                 | 2P?
    bne.b     2f                                | yes, go
    moveq     #6,d6
    bra.b     3f    
2:  eori.w    #1,d6                             | swap player

display_1up_2up:
    mulu      #3,d6
3:  lea       up_string_tbl,a0
    lea       (d6.w,a0),a0                      | ptr string
    moveq     #0,d1
    move.w    #BANK_FG_VIDEORAM,d2
    moveq     #3-1,d7
4:  move.b    (a0)+,d1
    jbsr       display_char
    dbf       d7,4b
9:  rts

flash_1up_2up:
    movem.l   d0/d1/d6,-(a7)
    and.b     (is_real_game),d3                 | timer for flashing
    beq.b     1f
    move.b    #2,d6                             | 3rd string in table ("   ")
1:  bsr       display_1up_2up   
    movem.l   (a7)+,d0/d1/d6
    rts

up_string_tbl:  
    .byte 1, 0x1E, 0x19                         | "1UP"
    .byte 2, 0x1E, 0x19                         | "2UP"
    .byte 0x24, 0x24, 0x24                      | "   "
    .align 2
                
* d0=coffset (MSB=31-col,LSB=row) d1=char, d2=bank
* col is updated
display_char: | $0828
    movem.l   d0/d2/a0,-(a7)
    bsr       calc_screen_addr
    *** lookup osd routine based on bank
    *** - can this be optimised?
    movea.l   (osd_w_video_bank_tbl,pc,d2.w),a0
    jsr       (a0)
    movem.l   (a7)+,d0/d2/a0
    sub.w     #0x0100,d0                        | next column
    rts
* d0=offset (MSB=31-col,LSB=row)
* d6 (trashed)
calc_screen_addr: | $0832
    sub.w     #0x0100,d0
    move.w    d0,d6
    addq.w    #4,d6
    and.w     #0x003f,d6
    add.w     #0x0300,d0
    lsr.w     #2,d0
    and.w     #0x07C0,d0
    or.w      d6,d0
    rts
    .align 4
osd_w_video_bank_tbl:
    .long     osd_w_fg_colorram
    .long     osd_w_bg_colorram
    .long     osd_w_fg_videoram
    .long     osd_w_bg_videoram
*
* table of objects (ground and air based) in each area
* - for each table
*   - byte 0 : scroll counter value (row)
*   - byte 1 : handler fn tbl entry
*   - byte n : ???
* (different functions have different numbers of parameters
*  (bytes) in the table)
*

area_object_tbl_tbl_pointer:
	.long	0
	
area_object_tbl_tbl_normal:| $1000
    .long area_1_obj_tbl_normal
    .long area_2_obj_tbl_normal
    .long area_3_obj_tbl_normal
    .long area_4_obj_tbl_normal
    .long area_5_obj_tbl_normal
    .long area_6_obj_tbl_normal
    .long area_7_obj_tbl_normal
    .long area_8_obj_tbl_normal
    .long area_9_obj_tbl_normal
    .long area_10_obj_tbl_normal
    .long area_11_obj_tbl_normal
    .long area_12_obj_tbl_normal
    .long area_13_obj_tbl_normal
    .long area_14_obj_tbl_normal
    .long area_15_obj_tbl_normal
    .long area_16_obj_tbl_normal
	
area_object_tbl_tbl_super:| $1000
    .long area_1_obj_tbl_super
    .long area_2_obj_tbl_super
    .long area_3_obj_tbl_super
    .long area_4_obj_tbl_super
    .long area_5_obj_tbl_super
    .long area_6_obj_tbl_super
    .long area_7_obj_tbl_super
    .long area_8_obj_tbl_super
    .long area_9_obj_tbl_super
    .long area_10_obj_tbl_super
    .long area_11_obj_tbl_super
    .long area_12_obj_tbl_super
    .long area_13_obj_tbl_super
    .long area_14_obj_tbl_super
    .long area_15_obj_tbl_super
    .long area_16_obj_tbl_super
    
area_1_obj_tbl_normal:
    .byte 0xC, 0x53, 0, 0xC, 0xFF, 0x24, 0xF, 0xFF, 0x25, 0xFF, 0xFF, 0x28, 0x12, 0xFF, 0x29, 0x1F
    .byte 0xFE, 0x2A, 7, 0xFE, 0x2F, 0x1F, 0xFE, 0x30, 0x1F, 0xFE, 0x2B, 7, 0xFD, 3, 0xEB, 3
    .byte 0xD7, 3, 0xD6, 0x1E, 4, 0x80, 0xD6, 0x1F, 6, 0x70, 0xC3, 5, 0xB7, 3, 0xB6, 0x1E
    .byte 8, 0x80, 0xB6, 0x26, 0xA, 0x70, 0xAB, 0x1E, 0xC, 0x58, 0xA9, 0x26, 0xE, 0x58, 0xA1, 0x1F
    .byte 0x10, 0x40, 0x9F, 0x26, 0x12, 0x50, 0x9F, 5, 0x9B, 0x57, 0x9B, 0x57, 0x93, 3, 0x83, 3
    .byte 0x7A, 0x26, 0x14, 0x70, 0x78, 0x1F, 0x16, 0x70, 0x73, 3, 0x69, 0x1D, 0x18, 0x20, 0x61, 0x2C
    .byte 0x1A, 0x5A, 0x60, 0x25, 0x1F, 0x5F, 0x57, 0x5F, 0x57, 0x5E, 0x2C, 0x1C, 0x5A, 0x5B, 0x2C, 0x1E
    .byte 0x5A, 0x5B, 3, 0x53, 3, 0x47, 3, 0x44, 0x54, 0, 0x3C, 0x1E, 4, 0x60, 0x3C, 0x26
    .byte 6, 0x70, 0x3B, 2, 3, 0x27, 0x1F, 8, 0x28, 0x25, 0x26, 0xA, 0x38, 0x23, 0x1F, 0xC
    .byte 0x48, 0x23, 0x26, 0xE, 0xC0, 0x21, 0x26, 0x10, 0x58, 0x1F, 0x1F, 0x12, 0x68, 0x17, 5, 0x17
    .byte 0x1D, 0x14, 0xD0, 0x15, 0x2D, 0x16, 0x68, 0xD
    
area_2_obj_tbl_normal:
    .byte 0xFF, 2, 1, 0xEF, 5, 0xE7, 0x2E, 4, 0x9C, 3, 0x40, 0, 0x38, 0x1C, 0xFF, 0x18
    .byte 0xDD, 0x26, 6, 0x70, 0xDD, 0x1E, 8, 0x60, 0xD3, 0x1F, 0xA, 0xD0, 0xD3, 0x26, 0xC, 0xC0
    .byte 0xC9, 0x26, 0xE, 0x70, 0xC9, 0x26, 0x10, 0x60, 0xC3, 3, 0xBB, 0x2E, 0x12, 0x94, 3, 0x68
    .byte 0, 0x20, 2, 0xFF, 0, 0xB3, 0x26, 0x14, 0x68, 0xB3, 5, 0xA7, 0x2E, 0x16, 0x94, 3
    .byte 0x58, 0, 0xC0, 0x18, 0xFF, 0, 0xA3, 0x26, 0x18, 0x70, 0xA3, 0x1F, 0x1A, 0x60, 0xA3, 3
    .byte 0x95, 0x26, 0x1C, 0x68, 0x93, 3, 0x83, 5, 0x79, 0x1F, 0x1E, 0xD0, 0x6F, 0x26, 4, 0x70
    .byte 0x6F, 0x1F, 6, 0x60, 0x6D, 0x1F, 8, 0x70, 0x6D, 0x26, 0xA, 0x60, 0x67, 0x1D, 0xC, 0x20
    .byte 0x67, 0x2E, 0xE, 0xD8, 4, 0x48, 0x1C, 0x50, 0, 0x20, 0x1C, 0xFF, 0, 0x5B, 3, 0x4B
    .byte 5, 0x47, 0x2E, 0x10, 0xA4, 4, 8, 0, 0x50, 8, 0x60, 0, 0xC0, 2, 0x44, 0x2E
    .byte 0x12, 0x34, 3, 0x78, 0, 0xA8, 4, 0xC0, 6, 0x3E, 0x1D, 0x14, 0x70, 0x39, 0x1F, 0x16
    .byte 0xD0, 0x39, 0x26, 0x18, 0xC0, 0x33, 3, 0x27, 0x1E, 0x1A, 0x90, 0x25, 0x1F, 0x1C, 0x80, 0x25
    .byte 0x2E, 0x1E, 0x60, 2, 0x90, 4, 0xC0, 8, 0x23, 0x1E, 4, 0x70, 0x23, 5, 0x21, 0x1F
    .byte 6, 0x60, 0x1F, 0x1E, 8, 0x50, 0x1C, 0x28, 0x18, 0x1B, 2, 1, 0x17, 0x26, 0xA, 0xA0
    .byte 0x17, 0x26, 0xC, 0x90, 0x15, 5, 0x13, 0x1F, 0xE, 0xB0, 0x13, 0x1B, 0x10, 0xA0, 0x13, 0x1B
    .byte 0x12, 0x90, 0x13, 0x1F, 0x14, 0x80, 0xD

area_3_obj_tbl_normal:
    .byte 0xFF, 0x22, 4, 0xFF, 0x28, 0x14, 0xEF, 0x1F, 0x16, 0x40, 0xE4, 0x22, 2, 0xBD, 0x26, 0x18
    .byte 0xA0, 0xBB, 0x1F, 0x1A, 0xA0, 0xB8, 0x22, 2, 0xA3, 0x20, 0x1C, 0xC0, 0x9F, 0x1D, 4, 0xE0
    .byte 0x93, 0xF, 0x74, 0x91, 0x26, 6, 0x80, 0x8F, 0x1E, 8, 0x80, 0x8C, 0x54, 0, 0x87, 0x1E
    .byte 0xA, 0x90, 0x87, 0x1F, 0xC, 0x80, 0x83, 0x23, 0x83, 0x57, 0x7B, 3, 0x6B, 0x1F, 0xE, 0xD0
    .byte 0x6B, 0x26, 0x10, 0xA0, 0x63, 5, 0x63, 0x26, 0x12, 0x60, 0x5B, 0x1F, 0x14, 0x60, 0x57, 0x36
    .byte 0x16, 0x78, 0x57, 3, 0x4B, 0x57, 0x49, 0x1F, 0x18, 0xD0, 0x49, 0x26, 0x1A, 0xA0, 0x43, 3
    .byte 0x36, 0x1E, 0x1C, 0xC0, 0x36, 0x26, 0x1E, 0xA8, 0x36, 0x1F, 4, 0x90, 0x36, 0x1E, 6, 0x78
    .byte 0x2C, 0x1F, 8, 0x90, 0x2B, 5, 0x1F, 0x1F, 0xA, 0x80, 0x1F, 0x26, 0xC, 0x60, 0x1F, 0x1F
    .byte 0xE, 0x40, 0x18, 0x24, 3, 0x17, 0x21, 0x10, 0x60, 0x17, 0x1D, 0x14, 0x20, 0xD
    
area_4_obj_tbl_normal:
    .byte 0xFF, 2, 1, 0xF0, 5, 0xED, 0x2E, 0x16, 0x9C, 3, 0xA0, 0, 0x80, 0x10, 0x80, 0
    .byte 0xE3, 0x2E, 0x18, 0x2C, 2, 0x90, 0, 0x80, 0x1C, 0xDB, 0x1E, 0x1A, 0x60, 0xDB, 0x1F, 0x1C
    .byte 0x50, 0xD1, 0x2E, 0x1E, 0x7C, 3, 0x38, 0, 0x80, 2, 0xC0, 0, 0xCB, 3, 0xC5, 0x26
    .byte 4, 0xB0, 0xC5, 0x1F, 6, 0xA0, 0xC5, 0x1D, 8, 0x60, 0xBD, 0x2E, 0xA, 0x24, 3, 0x48
    .byte 0, 0x28, 2, 0xFF, 0, 0xBB, 5, 0xAF, 0x1F, 0xC, 0x50, 0xAD, 0x1F, 0xE, 0x40, 0xAA
    .byte 0x26, 0x10, 0x50, 0xA7, 0x26, 0x12, 0x40, 0xA7, 0x2E, 0x14, 0x24, 4, 0x60, 0, 0xD8, 0x10
    .byte 0x28, 8, 0xFF, 2, 0x9F, 3, 0x8B, 5, 0x87, 0x22, 1, 0x83, 0x23, 0x73, 2, 0x45
    .byte 0x73, 0x4E, 0x2F, 0x73, 0x4C, 0x63, 5, 0x5F, 2, 0x45, 0x4F, 5, 0x3F, 0x22, 4, 0x33
    .byte 0x23, 0x31, 0x23, 0x2B, 0x23, 0x2B, 0x57, 0x28, 3, 0x20, 0x4D, 0x20, 3, 0x10, 3, 0xD
    
area_5_obj_tbl_normal:
    .byte 0xFF, 0x24, 7, 0xFF, 0x2F, 0xF, 0xFE, 0x30, 0xF, 0xFE, 0x28, 0x1C, 0xFD, 3, 0xEF, 3
    .byte 0xE3, 0x57, 0xE3, 5, 0xDD, 0x1F, 4, 0xA0, 0xDD, 0x1E, 6, 0x90, 0xDB, 0x21, 8, 0x70
    .byte 0xDB, 0x1E, 0xC, 0xA0, 0xDB, 0x1F, 0xE, 0x90, 0xD1, 0x3D, 0x10, 0xC0, 0xCB, 3, 0xBF, 0x3E
    .byte 0x12, 0xA0, 0xBB, 3, 0xBB, 0x3E, 0x14, 0x60, 0xB7, 0x3E, 0x16, 0xA0, 0xB3, 3, 0xB3, 0x3F
    .byte 0x18, 0x60, 0xAF, 0x3F, 0x1A, 0x20, 0xA7, 5, 0xA5, 0x21, 0x1C, 0x68, 0x9B, 0x3E, 4, 0x40
    .byte 0x97, 0x3E, 6, 0x80, 0x95, 0x3E, 8, 0xA0, 0x93, 0x3E, 0xA, 0xC0, 0x93, 3, 0x7B, 5
    .byte 0x7B, 0x54, 0, 0x71, 0x2E, 0xC, 0x60, 0xC, 0x30, 0, 0x30, 0x10, 0x30, 0x18, 0x30, 8
    .byte 0x30, 0, 0x30, 0x10, 0x30, 0x18, 0x30, 8, 0x30, 0, 0x30, 0x10, 0x30, 0x18, 0x30, 8
    .byte 0x71, 0x1D, 0xE, 0x20, 0x70, 0x25, 0xF, 0x70, 0x24, 0xF, 0x6B, 0x1E, 0x10, 0x80, 0x69, 0x26
    .byte 0x12, 0x80, 0x67, 0x1E, 0x14, 0x80, 0x65, 0x26, 0x16, 0x80, 0x63, 3, 0x4B, 5, 0x4B, 0x1F
    .byte 0x18, 0xC0, 0x3F, 3, 0x35, 0x1F, 0x1A, 0x80, 0x32, 0x2E, 0x1C, 0xD8, 3, 0xC0, 0x18, 0x18
    .byte 0x10, 0xC0, 8, 0x31, 0x1D, 0x1E, 0x40, 0x2F, 5, 0x23, 0x2E, 4, 0xC0, 1, 0xC0, 0x18
    .byte 0x20, 0x2E, 6, 0x20, 1, 0xC0, 8, 0x1D, 0x2E, 8, 0xC0, 1, 0xC0, 0x18, 0x17, 0x1F
    .byte 0xA, 0xC0, 0x17, 0x21, 0xC, 0x80, 0x17, 0x1F, 0x10, 0x40, 0xD
    
area_6_obj_tbl_normal:
    .byte 0xFF, 0x24, 7, 0xF3, 0x26, 4, 0xC0, 0xF3, 0x1E, 6, 0xB0, 0xEB, 0x2E, 8, 0x3C, 3
    .byte 0xC0, 0, 0xC0, 0x10, 0xC0, 0, 0xDB, 0x2E, 0xA, 0x34, 2, 0x20, 2, 0xFF, 0, 0xD7
    .byte 0x1F, 0xC, 0xC0, 0xD5, 0x26, 0xE, 0xD0, 0xD5, 0x30, 0xFF, 0xCB, 0x2E, 0x10, 0x1C, 3, 0x98
    .byte 0, 0x80, 2, 0x40, 0, 0xBB, 0x2E, 0x12, 0x1C, 1, 0xFF, 0, 0xB6, 0x1E, 0x14, 0xC0
    .byte 0xB6, 0x26, 0x16, 0xD0, 0xB4, 0x30, 0xF, 0xAA, 0x1F, 0x18, 0xB0, 0xAA, 0x1F, 0x1A, 0xA0, 0x9F
    .byte 0x21, 0x1C, 0xA0, 0x9B, 3, 0x8B, 0x1D, 4, 0x30, 0x83, 5, 0x77, 0x2D, 6, 0xC0, 0x6F
    .byte 0x3A, 0x10, 0x48, 0x6B, 0x38, 0x12, 0x60, 0x6B, 0x38, 0x14, 0x30, 0x67, 0x38, 0x16, 0x48, 0x5F
    .byte 0x1F, 0x18, 0x80, 0x5D, 0x26, 0x1A, 0x70, 0x56, 0x2E, 0x1C, 0x14, 0xB, 0x40, 0, 0x38, 4
    .byte 0x50, 6, 0x38, 4, 0x3C, 8, 0x30, 4, 0x20, 0, 0x20, 0x10, 0x20, 0, 0x20, 0x10
    .byte 0x20, 0, 0x55, 0x26, 0x1E, 0x70, 0x4F, 0x26, 4, 0x80, 0x4F, 0x1D, 6, 0xD0, 0x48, 0x2E
    .byte 8, 0xD8, 3, 8, 0, 0x58, 0x18, 0xFF, 0, 0x41, 0x2E, 0xA, 0x48, 2, 0x78, 0
    .byte 0xFF, 8, 0x33, 0x1F, 0xC, 0x70, 0x27, 0x26, 0xE, 0x70, 0x25, 0x26, 0x10, 0x90, 0x23, 0x26
    .byte 0x12, 0xB0, 0x17, 0x21, 0x14, 0xC0, 0x17, 0x21, 0x18, 0xA0, 0xD
    
area_7_obj_tbl_normal:
    .byte 0xFF, 0x22, 8, 0xF1, 0x1F, 4, 0x80, 0xEF, 0x1E, 6, 0x80, 0xED, 0x22, 3, 0xCA, 0x30
    .byte 0x3F, 0xC9, 0x2E, 8, 0x70, 6, 0x60, 0xC, 0x60, 0x10, 0x60, 0x14, 0x60, 0x1C, 0x60, 0
    .byte 0x60, 4, 0xC6, 0x2E, 0xA, 0x58, 6, 0x30, 4, 0x60, 0xC, 0x60, 0x10, 0x60, 0x14, 0x60
    .byte 0x1C, 0x60, 0, 0xC3, 0x2E, 0xC, 0x40, 6, 0x60, 4, 0x60, 0xC, 0x60, 0x10, 0x60, 0x14
    .byte 0x60, 0x1C, 0x60, 0, 0xC0, 0x2E, 0xE, 0x40, 6, 0x30, 0, 0x60, 4, 0x60, 0xC, 0x60
    .byte 0x10, 0x60, 0x14, 0x60, 0x1C, 0xBD, 0x2E, 0x10, 0x40, 6, 0x60, 0, 0x60, 4, 0x60, 0xC
    .byte 0x60, 0x10, 0x60, 0x14, 0x60, 0x1C, 0xBA, 0x2E, 0x12, 0x58, 7, 0x30, 0x1C, 0x60, 0, 0x60
    .byte 4, 0x60, 0xC, 0x60, 0x10, 0x60, 0x14, 0x60, 0x1C, 0xA7, 0x2F, 7, 0xA1, 0x1E, 0x14, 0x70
    .byte 0x9F, 0x26, 0x16, 0x60, 0x9E, 0x22, 2, 0x9D, 0x1F, 0x18, 0x50, 0x9B, 0x1E, 0x1A, 0x40, 0x83
    .byte 0x10, 0x74, 0x81, 0x26, 0x1C, 0x40, 0x7B, 0x1D, 0x1E, 0xD8, 0x6C, 0x23, 0x6B, 0x1E, 4, 0xB0
    .byte 0x6B, 0x1F, 6, 0x80, 0x6B, 0x1E, 8, 0x50, 0x6B, 0x1F, 0xA, 0x20, 0x66, 0x54, 0, 0x4F
    .byte 0x22, 0x10, 0x36, 0x1F, 0xC, 0x48, 0x36, 0x1F, 0xE, 0x20, 0x2B, 0x3B, 0x10, 0xC0, 0x27, 0x3C
    .byte 0x12, 0xA0, 0x17, 0x11, 0x76, 0x11, 0x1D, 0x14, 0x20, 0xF, 0x23, 0xD
    
area_8_obj_tbl_normal:
    .byte 0xF3, 3, 0xF3, 0x30, 0xFF, 0xF3, 0x57, 0xEE, 0x2E, 4, 0x14, 5, 8, 0, 0xA0, 8
    .byte 0x30, 0xC, 0xFF, 0x10, 0xFF, 0, 0xEA, 5, 0xE5, 0x26, 6, 0x30, 0xE5, 0x26, 8, 0xC8
    .byte 0xE2, 0x1F, 0xA, 0x48, 0xE2, 0x1F, 0xC, 0xB0, 0xDF, 0x26, 0xE, 0x60, 0xDF, 0x26, 0x10, 0x98
    .byte 0xCC, 0x1E, 0x12, 0x40, 0xC8, 0x26, 0x14, 0x60, 0xC8, 0x26, 0x16, 0x20, 0xC7, 0x21, 0x18, 0x48
    .byte 0xC3, 0x1E, 0x1C, 0x40, 0xBB, 0x57, 0xB3, 0x1F, 0x1E, 0x48, 0xA8, 3, 0xA5, 0x2E, 4, 0xA0
    .byte 2, 0xB0, 2, 0x80, 0, 0xA5, 0x2E, 6, 0x74, 4, 0x78, 0, 0x50, 0x18, 0x50, 8
    .byte 0x80, 0, 0xA5, 0x2E, 8, 0x14, 4, 0x78, 0, 0x50, 8, 0x50, 0x18, 0x80, 0, 0x9B
    .byte 5, 0x93, 0x2E, 0xA, 0x7C, 5, 0xA0, 0, 0xF0, 0x10, 0x30, 0xF, 0x30, 0x1F, 0x80, 0
    .byte 0x93, 0x1F, 0xC, 0x50, 0x93, 0x26, 0xE, 0x40, 0x93, 0x2E, 0x10, 0x14, 3, 0xAC, 0, 0xFF
    .byte 0x10, 0x80, 0, 0x83, 3, 0x7F, 0x2E, 0x12, 0x84, 7, 0x50, 0, 0xC0, 0x10, 0x50, 0x10
    .byte 0x28, 0xB, 0x50, 0x10, 0x70, 0xC, 0x60, 0xD, 0x77, 0x1D, 0x14, 0xD0, 0x73, 5, 0x73, 0x26
    .byte 4, 0x58, 0x73, 0x1F, 6, 0x48, 0x6D, 0x2E, 0x16, 0x14, 1, 0x80
    .byte 0, 0x6A, 0x2E, 0x18, 0x14, 1, 0x80, 0, 0x67, 0x2E, 0x1A, 0x14, 1, 0x80, 0, 0x64
    .byte 0x35, 0x1C, 0x14, 0x61, 0x35, 0x1E, 0x14, 0x47, 0x2E, 8, 0x80, 6, 8, 0, 0x58, 8
    .byte 0x60, 0, 0x60, 2, 0x80, 0, 0x60, 4, 0x47, 0x2E, 0xA, 0x68, 8, 8, 0, 0x88
    .byte 8, 0x60, 0, 0x60, 0x1C, 0x38, 0, 0x18, 0x12, 0xA8, 0x14, 0x80, 0, 0x47, 0x2E, 0xC
    .byte 0x50, 3, 8, 0, 0x78, 0x18, 0x80, 0, 0x37, 0x1B, 0xE, 0xB8, 0x37, 0x1B, 0x10, 0x48
    .byte 0x27, 0x2E, 0x12, 0x50, 2, 0x68, 4, 0xE0, 8, 0x24, 0x2E, 0x14, 0x38, 2, 0x98, 4
    .byte 0xE0, 8, 0x21, 0x2E, 0x16, 0x20, 2, 0xC8, 4, 0xE0, 8, 0x1F, 0x2E, 0x18, 0x90, 3
    .byte 8, 0x1C, 0xE0, 0, 0xD0, 8, 0x1C, 0x2E, 0x1A, 0xA8, 3, 0x38, 0x1C, 0xE0, 0, 0xD0
    .byte 8, 0x19, 0x2E, 0x1C, 0xC0, 3, 0x68, 0x1C, 0xE0, 0, 0xD0, 8, 0x19, 0x1F, 0x1E, 0x88
    .byte 0x19, 0x1F, 4, 0x68, 0x19, 0x1F, 6, 0x48, 0x13, 0x1B, 8, 0x88, 0x13, 0x1B, 0xC, 0x48
    .byte 0xD
    
area_9_obj_tbl_normal:
    .byte 0xFB, 2, 0x1F, 0xF5, 0x1D, 0x10, 0xA0, 0xF3, 0x1D, 0x12, 0x80, 0xF1, 0x1D, 0x14, 0x60, 0xEF
    .byte 0x1D, 0x16, 0x40, 0xEB, 5, 0xE3, 2, 0x38, 0xD5, 0x21, 0x18, 0x50, 0xD3, 5, 0xD1, 0x57
    .byte 0xCF, 3, 0xC7, 3, 0xC3, 2, 0x6F, 0xBF, 5, 0xB3, 0x33, 0x9F, 0x34, 0x87, 0x18, 0x76
    .byte 0x85, 0x4E, 0xF, 0x83, 0x4C, 0x73, 2, 0x45, 0x63, 5, 0x63, 0x57, 0x5B, 2, 0x65, 0x4B
    .byte 5, 0x3F, 3, 0x2F, 3, 0x20, 0x4D, 0x1F, 3, 0x10, 5, 0xD
    
area_10_obj_tbl_normal:
    .byte 0xFF, 3, 0xFF, 0x30, 0x3F, 0xF7, 5, 0xF3, 0x57, 0xEF, 3, 0xE3, 5, 0xDB, 3, 0xCF
    .byte 5, 0xC6, 0x2E, 0x1C, 0xD8, 8, 0x60, 0x14, 0x60, 4, 0x60, 0x14, 0x60, 4, 0x60, 0x14
    .byte 0x60, 4, 0x60, 0x14, 0x60, 4, 0xC6, 0x2E, 0x1E, 0x98, 8, 0x60, 0x10, 0x60, 0, 0x60
    .byte 0x10, 0x60, 0, 0x60, 0x10, 0x60, 0, 0x60, 0x10, 0x60, 0, 0xC6, 0x2E, 4, 0x58, 8
    .byte 0x60, 0xC, 0x60, 0x1C, 0x60, 0xC, 0x60, 0x1C, 0x60, 0xC, 0x60, 0x1C, 0x60, 0xC, 0x60, 0x1C
    .byte 0xBE, 0x2E, 6, 0xB8, 8, 0x40, 8, 0x60, 0x18, 0x60, 8, 0x60, 0x18, 0x60, 8, 0x60
    .byte 0x18, 0x60, 8, 0x60, 0x18, 0xBE, 0x2E, 8, 0x78, 8, 0x40, 0x18, 0x60, 8, 0x60, 0x18
    .byte 0x60, 8, 0x60, 0x18, 0x60, 8, 0x60, 0x18, 0x60, 8, 0xB8, 0x2E, 0xA, 0xC8, 7, 0x40
    .byte 0x1C, 0x60, 0xC, 0x60, 0x1C, 0x60, 0xC, 0x60, 0x1C, 0x60, 0xC, 0x60, 0x1C, 0xB8, 0x2E, 0xC
    .byte 0x98, 7, 0x40, 0, 0x60, 0x10, 0x60, 0, 0x60, 0x10, 0x60, 0, 0x60, 0x10, 0x60, 0
    .byte 0xB8, 0x2E, 0xE, 0x68, 7, 0x40, 4, 0x60, 0x14, 0x60, 4, 0x60, 0x14, 0x60, 4, 0x60
    .byte 0x14, 0x60, 4, 0xA9, 0x1E, 0x10, 0xB0, 0xA9, 0x1E, 0x12, 0x90, 0xA7, 0x1E, 0x14, 0xA0, 0xA5
    .byte 0x1E, 0x16, 0xB0, 0xA5, 0x1E, 0x18, 0x90, 0x9B, 0x18, 0x76, 0x91, 0x1F, 0x1A, 0x40, 0x8F, 0x1F
    .byte 0x1C, 0x40, 0x8B, 0x18, 0x76, 0x87, 0x1E, 0x1E, 0x50, 0x87, 0x1E, 4, 0x40, 0x7B, 0x18, 0x76
    .byte 0x6F, 0x1F, 6, 0xC0, 0x6F, 0x1E, 8, 0xA0, 0x6F, 0x1F, 0xA, 0x80, 0x64, 0x2E, 0xC, 0x98
    .byte 0x10, 0x80, 0x18, 0x80, 0x10, 0x80, 9, 0x20, 0xC, 0x40, 0x18, 0x20, 0x1A, 0x10, 0x18, 0x28
    .byte 0x10, 0x10, 8, 0x20, 6, 0x48, 8, 0x18, 0xC, 0x70, 0x18, 0xA0, 0x13, 0x98, 8, 0x80
    .byte 4, 0x47, 0x1D, 0xE, 0xC0, 0x47, 0x1D, 0x10, 0xA0, 0x47, 0x1D, 0x12, 0x80, 0x47, 0x1D, 0x14
    .byte 0x60, 0x43, 0x1D, 0x16, 0xC0, 0x43, 0x1D, 0x18, 0xA0, 0x43, 0x1D, 0x1A, 0x80, 0x43, 0x1D, 0x1C
    .byte 0x60, 0x36, 0x1E, 0x1E, 0x80, 0x36, 0x26, 4, 0x60, 0x36, 0x1E, 6, 0x40, 0x2B, 0x1F, 8
    .byte 0x50, 0x21, 0x20, 0xA, 0x80, 0x1B, 0x20, 0xE, 0x80, 0x19, 0x1B, 0x12, 0xD0, 0x19, 0x1B, 0x14
    .byte 0x20, 0x13, 0x1B, 0x16, 0xD0, 0x13, 0x1B, 0x18, 0x20, 0xD
    
area_11_obj_tbl_normal:
    .byte 0xFB, 0x11, 0x74, 0xF3, 0x22, 8, 0xE9, 0x2D, 4, 0x60, 0xE6, 0x22, 8, 0xE4, 0x2E, 0xE
    .byte 0x9C, 1, 0x80, 0, 0xDC, 0x2E, 0x10, 0x2C, 2, 0xF8, 0, 0x40, 0x1C, 0xCB, 0x26, 0x12
    .byte 0xB0, 0xCB, 0x1F, 0x14, 0xA0, 0xCB, 0x2E, 0x16, 0x2C, 7, 0x70, 0, 0xE8, 0x10, 0x20, 0x12
    .byte 0xB8, 0x10, 0xB8, 0, 0x20, 2, 0x20, 0, 0xC3, 0x23, 0xC3, 0x35, 0x18, 0x7C, 0xBF, 0x35
    .byte 0x1A, 0x7C, 0xBB, 0x35, 0x1C, 0x7C, 0xB7, 0x39, 0x1E, 0x7C, 0xAF, 0x3B, 4, 0x24, 0xA7, 0x3B
    .byte 6, 0x24, 0xA3, 0x22, 0xC, 0x9B, 3, 0x8B, 5, 0x8B, 0x1D, 8, 0x70, 0x84, 0x1D, 0xA
    .byte 0x70, 0x84, 0x22, 4, 0x77, 0x2E, 0xC, 0x34, 9, 0x60, 0, 0xA0, 0x10, 0x28, 0xD, 0x50
    .byte 0x10, 0x70, 0xC, 0x60, 0xD, 0x40, 6, 0x30, 4, 0x20, 8, 0x75, 0x1F, 0xE, 0x60, 0x73
    .byte 0x1E, 0x10, 0x70, 0x73, 0x23, 0x71, 0x1F, 0x12, 0x80, 0x6F, 0x1E, 0x14, 0x90, 0x6D, 0x1F, 0x16
    .byte 0xA0, 0x6B, 0x1E, 0x18, 0xB0, 0x69, 0x1F, 0x1A, 0xC0, 0x67, 0x1E, 0x1C, 0xD0, 0x67, 0x57, 0x63
    .byte 3, 0x63, 3, 0x53, 0x22, 0x10, 0x43, 3, 0x3B, 5, 0x2B, 0x2E, 0x1E, 0xE0, 5, 8
    .byte 0, 0x60, 0x18, 0x20, 0x1C, 0xD8, 0x18, 0x20, 0x14, 0x27, 0x21, 4, 0x68, 0x23, 0x23, 0x1E
    .byte 0x1D, 8, 0x20, 0x1D, 0x1F, 0xA, 0xD0, 0x1D, 0x1F, 0xC, 0xA0, 0x1B, 0x1D, 0xE, 0x38, 0x18
    .byte 0x1D, 0x10, 0x50, 0x17, 0x1E, 0x12, 0xD0, 0x17, 0x1E, 0x14, 0xA0, 0x15, 0x1D, 0x16, 0x68, 0x13
    .byte 0x23, 0xD
    
area_12_obj_tbl_normal:
    .byte 0xFF, 0x30, 0xF, 0xFF, 0x29, 0xF, 0xFF, 0x2B, 3, 0xFF, 0x2A, 3, 0xF3, 0x57, 0xEE, 0x2E
    .byte 4, 0x14, 9, 8, 0, 0xA0, 8, 0x30, 0xC, 0x48, 0x10, 0x30, 0, 0x50, 0x10, 0x68
    .byte 0, 0x30, 0x1C, 0x20, 0x18, 0xE5, 0x1B, 6, 0xC0, 0xE5, 0x1F, 8, 0xB0, 0xE5, 0x1F, 0xA
    .byte 0x48, 0xE5, 0x1B, 0xC, 0x38, 0xE3, 0x1F, 0xE, 0xC0, 0xE3, 0x1B, 0x10, 0xB0, 0xE3, 0x1B, 0x12
    .byte 0x48, 0xE3, 0x1F, 0x14, 0x38, 0xDC, 0x2E, 0x16, 0x7C, 4, 8, 0x10, 0x78, 0, 0x50, 0x10
    .byte 0x40, 0, 0xC9, 0x35, 0x18, 0x48, 0xC9, 0x35, 0x1A, 0x38, 0xC7, 0x35, 0x1C, 0x48, 0xC7, 0x35
    .byte 0x1E, 0x38, 0xBD, 0x1E, 4, 0xB0, 0xBB, 0x1E, 6, 0xB0, 0xBB, 0x1E, 8, 0x90, 0xB9, 0x1E
    .byte 0xA, 0x90, 0xB3, 0x2E, 0xC, 0xCC, 1, 0x20, 0, 0xA7, 0x2E, 0xE, 0x74, 4, 0x58, 0
    .byte 0xA0, 0x18, 0xA0, 8, 0x20, 0, 0xA3, 0x2E, 0x10, 0x14, 1, 0x20, 0, 0xA3, 0x57, 0xA1
    .byte 0x2E, 0x12, 0x14, 1, 0x20, 0, 0x97, 3, 0x93, 0x2E, 0x14, 0x7C, 2, 0x98, 0, 0x20
    .byte 2, 0x8D, 0x1D, 0x16, 0xE0, 0x8D, 0x1D, 0x18, 0xD0, 0x8B, 0x1D, 0x1A, 0xE0, 0x8B, 0x1D, 0x1C
    .byte 0xD0, 0x87, 5, 0x83, 3, 0x77, 0x1E, 0x1E, 0x60, 0x77, 0x1F, 4, 0x50, 0x73, 5, 0x73
    .byte 0x2E, 6, 0x14, 4, 0x70, 0, 0xE0, 0x10, 0xA0, 0x10, 0x20, 0, 0x6F, 0x1F, 8, 0x60
    .byte 0x6F, 0x1E, 0xA, 0x50, 0x6B, 3, 0x5B, 5, 0x55, 0x1B, 0xC, 0xA8, 0x47, 0x2E, 0xE, 0x78
    .byte 3, 8, 0, 0xC8, 0x18, 0x20, 0, 0x47, 0x2E, 0x10, 0x90, 3, 8, 0, 0xF8, 0x18
    .byte 0x20, 0, 0x47, 0x2E, 0x12, 0xA8, 4, 8, 0, 0xE0, 0x18, 0x48, 0x18, 0x20, 0, 0x37
    .byte 0x1F, 0x14, 0xC0, 0x37, 0x1F, 0x16, 0xB0, 0x30, 0x1B, 0x18, 0x68, 0x2E, 0x1B, 0x1A, 0x58, 0x2C
    .byte 0x1B, 0x1C, 0x48, 0x2A, 0x1B, 0x1E, 0x38, 0x27, 0x36, 4, 0x14, 0x23, 0x36, 6, 0x14, 0x1F
    .byte 0x36, 8, 0x14, 0x1B, 0x39, 0xA, 0x14, 0x18, 0x2E, 0xC, 0x88, 8, 0x40, 0, 0x80, 0x18
    .byte 0x80, 0x10, 0x80, 8, 0x80, 0, 0x80, 0x18, 0x80, 0x10, 0x80, 8, 0x18, 0x2E, 0xE, 0x48
    .byte 8, 0x40, 0x10, 0x80, 8, 0x80, 0, 0x80, 0x18, 0x80, 0x10, 0x80, 8, 0x80, 0, 0x80
    .byte 0x18, 0x17, 0x21, 0x10, 0x70, 0xD
    
area_13_obj_tbl_normal:
    .byte 0xF7, 0x1B, 0x14, 0x20, 0xF3, 0x1B, 0x16, 0xA0, 0xF3, 0x1B, 0x18, 0x70, 0xED, 0x1F, 0x1A, 0xA0
    .byte 0xEB, 0x1F, 0x1C, 0x90, 0xE9, 0x1F, 0x1E, 0x80, 0xE7, 0x1F, 4, 0x70, 0xE3, 0x57, 0xDF, 0x1B
    .byte 6, 0xC0, 0xD9, 0x1B, 8, 0xC0, 0xD3, 3, 0xBB, 5, 0xB1, 0x21, 0xA, 0xB0, 0xB1, 0x21
    .byte 0xE, 0x50, 0xAB, 3, 0xA1, 0x3E, 0x12, 0x90, 0x9D, 0x3E, 0x14, 0x70, 0x99, 0x40, 0x16, 0x50
    .byte 0x95, 0x3E, 0x18, 0x30, 0x93, 5, 0x8D, 0x40, 0x1A, 0x50, 0x89, 0x3E, 0x1C, 0x70, 0x85, 0x3E
    .byte 0x1E, 0x90, 0x81, 0x3E, 4, 0xB0, 0x7B, 3, 0x71, 0x1F, 6, 0xD0, 0x6F, 0x26, 8, 0xC0
    .byte 0x6D, 0x1F, 0xA, 0xB0, 0x6B, 0x26, 0xC, 0xA0, 0x69, 0x1F, 0xE, 0x90, 0x63, 5, 0x5F, 0x57
    .byte 0x5B, 2, 0xEC, 0x43, 5, 0x40, 0x1D, 0x10, 0x30, 0x40, 0x1D, 0x12, 0x20, 0x3B, 3, 0x36
    .byte 0x1B, 0x14, 0xC0, 0x25, 0x2E, 0x16, 0xE0, 2, 0xC0, 0x18, 0xC0, 8, 0x25, 0x2E, 0x18, 0x10
    .byte 2, 0xC0, 8, 0xC0, 0x18, 0x23, 0x2E, 0x1A, 0xD0, 2, 0xA0, 0x18, 0xA0, 8, 0x23, 0x2E
    .byte 0x1C, 0x20, 2, 0xA0, 8, 0xA0, 0x18, 0x23, 5, 0x1B, 2, 0xE6, 0xE, 5, 0xD
    
area_14_obj_tbl_normal:
    .byte 0xFF, 2, 0x6D, 0xF7, 5, 0xF3, 0x22, 2, 0xE7, 0x23, 0xE7, 0x4E, 0xF, 0xE7, 2, 0xF1
    .byte 0xE3, 0x4C, 0xDF, 5, 0xDB, 2, 0x34, 0xD5, 5, 0xCB, 2, 0x49, 0xC5, 5, 0xBB, 2
    .byte 0x3E, 0xBB, 0x4D, 0xAB, 5, 0xA1, 0x33, 0x8F, 0x34, 0x7F, 2, 0x46, 0x77, 5, 0x73, 0x18
    .byte 0x76, 0x67, 0x4C, 0x67, 2, 0x66, 0x65, 5, 0x5B, 2, 0x21, 0x55, 5, 0x4B, 3, 0x3B
    .byte 5, 0x37, 0x57, 0x33, 0x4D, 0x33, 3, 0x23, 5, 0x1B, 3, 0x1F, 5, 0xD
    
area_15_obj_tbl_normal:
    .byte 0xFF, 2, 8, 0xF3, 5, 0xEF, 0x2E, 4, 0x3C, 5, 0x80, 0, 0x80, 0x10, 0x70, 0
    .byte 0x70, 0x10, 0x70, 0, 0xEE, 0x1D, 6, 0xD0, 0xEE, 0x26, 8, 0x80, 0xE6, 0x2E, 0xA, 0x3C
    .byte 3, 0x70, 0, 0x70, 0x10, 0x70, 0, 0xE5, 0x1F, 0xC, 0x80, 0xDE, 0x2E, 0xE, 0x3C, 3
    .byte 0x60, 0, 0x60, 0x10, 0x60, 0, 0xD7, 0x1F, 0x10, 0xC0, 0xD7, 0x2E, 0x12, 0x26, 6, 0x50
    .byte 2, 0x78, 0x12, 0x18, 0x10, 0x18, 0, 0x80, 2, 0x20, 0, 0xD5, 0x1F, 0x14, 0xD0, 0xD2
    .byte 0x26, 0x16, 0x50, 0xCD, 0x2E, 0x18, 0x1C, 4, 0x40, 0, 0xA0, 0x10, 0xD8, 0, 0x20, 2
    .byte 0xC6, 0x1F, 4, 0x50, 0xC2, 0x2E, 0x1A, 0x1C, 3, 0x80, 0, 0xA0, 0, 0x20, 2, 0xBE
    .byte 0x35, 0x1C, 0x1C, 0xBA, 0x3B, 0x1E, 0x1C, 0xB6, 0x1F, 6, 0xD0, 0xB6, 0x26, 8, 0xC0, 0xB6
    .byte 0x1D, 0xA, 0x50, 0xB3, 3, 0xA9, 0x1D, 0xC, 0xB0, 0xA3, 3, 0xA0, 0x26, 0xE, 0xA0, 0xA0
    .byte 0x1F, 0x10, 0x90, 0x93, 5, 0x8B, 3, 0x7B, 5, 0x78, 0x21, 0x12, 0xC8, 0x76, 0x2E, 0x16
    .byte 0x78, 8, 0x50, 0x14, 0x50, 4, 0x50, 0x14, 0x50, 4, 0x50, 0x14, 0x50, 4, 0x50, 0x14
    .byte 0x50, 4, 0x76, 0x2E, 0x18, 0x18, 8, 0x50, 0xC, 0x50, 0x1C, 0x50, 0xC, 0x50, 0x1C, 0x50
    .byte 0xC, 0x50, 0x1C, 0x50, 0xC, 0x50, 0x1C, 0x6B, 0x2E, 0x1A, 0x70, 9, 0x40, 0x1C, 0x50, 0xC
    .byte 0x50, 0x1C, 0x50, 0xC, 0x50, 0x1C, 0x50, 0xC, 0x50, 0x1C, 0x50, 0xC, 0x50, 0x1C, 0x6B, 0x2E
    .byte 0x1C, 0x20, 9, 0x40, 4, 0x50, 0x14, 0x50, 4, 0x50, 0x14, 0x50, 4, 0x50, 0x14, 0x50
    .byte 4, 0x50, 0x14, 0x50, 4, 0x61, 0x2E, 0x1E, 0xA4, 7, 0x18, 0, 0x10, 0x1C, 0x60, 0x18
    .byte 0x38, 0x14, 0x40, 0x16, 0x60, 0x1E, 0x20, 0x1C, 0x5F, 0x1F, 4, 0x80, 0x5B, 0x26, 6, 0x60
    .byte 0x5B, 0x1D, 8, 0x20, 0x57, 0x1F, 0xA, 0x40, 0x4E, 0x2E, 0x14, 0xAC, 6, 0x50, 0, 0xA8
    .byte 0x10, 0x10, 8, 0xE0, 0x18, 0xA0, 0x10, 0xC0, 0, 0x48, 0x2E, 0x12, 0xD4, 6, 8, 0
    .byte 0x90, 0x18, 0x10, 8, 0xA0, 0x18, 0xE0, 0x10, 0xC0, 0, 0x47, 0x2E, 0x10, 0x44, 6, 0x18
    .byte 0, 0x70, 8, 0x70, 0x18, 0xC0, 0x10, 0xF0, 0x10, 0x20, 0x18, 0x3B, 0x26, 0x16, 0xB0, 0x37
    .byte 0x1F, 0x18, 0x90, 0x1F, 0x1B, 0x1A, 0x90, 0x1F, 0x1B, 0x1C, 0x70, 0x1F, 0x1B, 0x1E, 0x50, 0x1B
    .byte 0x1B, 4, 0x70, 0x1B, 0x35, 6, 0x24, 0x1B, 2, 0x3F, 0x17, 0x3B, 8, 0x24, 0x15, 0x21
    .byte 0xA, 0xC0, 0x13, 0x3B, 0xE, 0x24, 0xF, 5, 0xD
    
area_16_obj_tbl_normal:
    .byte 1, 0x57, 0xFF, 3, 0xF3, 0x1D, 0x14, 0x20, 0xEF, 5, 0xE7, 0x2E, 0x16, 0x9C, 3, 0x40
    .byte 0, 0x38, 0x1C, 0x40, 0x18, 0xE5, 0x1B, 0x18, 0x60, 0xE1, 0x2E, 0x1A, 0x24, 3, 0x80, 0
    .byte 0x80, 0x10, 0x80, 0, 0xDD, 0x2E, 0x1C, 0x9C, 3, 0x80, 0, 0x80, 0x10, 0x80, 0, 0xD7
    .byte 0x1B, 0x1E, 0x78, 0xD7, 0x1B, 4, 0x48, 0xD7, 0x2E, 6, 0x24, 3, 0x80, 0, 0x80, 0x10
    .byte 0x80, 0, 0xD3, 0x2E, 8, 0x9C, 3, 0x80, 0, 0x80, 0x10, 0x80, 0, 0xD3, 0x1B, 0xA
    .byte 0x60, 0xCD, 0x2E, 0xC, 0x24, 3, 0x80, 0, 0x80, 0x10, 0x80, 0, 0xCB, 0x26, 0xE, 0xC8
    .byte 0xCB, 0x26, 0x10, 0x60, 0xC5, 0x2E, 0x12, 0x9C, 8, 0x60, 0, 0x78, 0x10, 0x20, 0x12, 0xF8
    .byte 0x10, 0x58, 0x10, 0x50, 0x18, 0x50, 8, 0x20, 0, 0xC5, 0x2E, 0x14, 0x24, 8, 0x60, 0
    .byte 0x90, 0x10, 0x20, 0xC, 0xE0, 0x10, 0x58, 0x10, 0x50, 8, 0x50, 0x18, 0x20, 0, 0xC5, 0x57
    .byte 0xC3, 3, 0xBB, 0x3B, 0x16, 0x70, 0xBB, 0x3B, 0x18, 0x50, 0xB7, 0x3C, 0x1A, 0x70, 0xB7, 0x3B
    .byte 0x1C, 0x50, 0xB3, 3, 0xA3, 3, 0x95, 0x1F, 0x1E, 0x80, 0x93, 5, 0x93, 0x1F, 4, 0x70
    .byte 0x91, 0x1F, 6, 0x60, 0x8F, 0x1F, 8, 0x50, 0x85, 3, 0x7D, 0x26, 0xA, 0xE0, 0x7D, 0x26
    .byte 0xC, 0x88, 0x7D, 0x26, 0xE, 0x50, 0x79, 0x26, 0x10, 0xC0, 0x79, 0x26, 0x12, 0x6C, 0x79, 0x26
    .byte 0x14, 0x18, 0x6F, 0x21, 0x16, 0x80, 0x6F, 0x3B, 0x1A, 0x34, 0x6B, 0x3B, 0x1C, 0x34, 0x6B, 5
    .byte 0x67, 0x1D, 0x1E, 0xB0, 0x65, 0x1D, 4, 0xA0, 0x63, 3, 0x53, 5, 0x4F, 0x26, 6, 0x80
    .byte 0x4C, 0x1F, 8, 0x68, 0x4B, 0x2E, 0xA, 0x34, 2, 0xA0, 4, 0x20, 6, 0x44, 0x1B, 0xC
    .byte 0x70, 0x3E, 0x1B, 0xE, 0xC0, 0x3E, 0x1D, 0x10, 0x70, 0x3E, 0x1B, 0x12, 0x18, 0x38, 0x1B, 0x14
    .byte 0x70, 0x37, 0x2E, 0x16, 0xA4, 3, 0x70, 0, 0x70, 0x10, 0x70, 0, 0x37, 0x2E, 4, 0x34
    .byte 3, 0x70, 0, 0x70, 0x10, 0x70, 0, 0x33, 2, 0xE6, 0x23, 5, 0x22, 0x2E, 6, 0x48
    .byte 2, 0xB8, 4, 0x20, 8, 0x22, 0x2E, 8, 0x34, 1, 0x20, 0, 0x1B, 0x2E, 0xA, 0x48
    .byte 8, 0x30, 0, 0xA0, 4, 0xA0, 0x10, 0x80, 0xC, 0x40, 0x10, 0x80, 0x18, 0xA0, 0x18, 0x20
    .byte 0, 0x17, 0x21, 0x18, 0x90, 0x17, 0x21, 0x1C, 0x70, 0x17, 2, 0x7E, 0xF, 5, 0xF, 0x30
    .byte 0x1F, 0xD


area_1_obj_tbl_super:
    .byte 0xC, 0x53, 0, 0xC, 0xFF, 0x24, 0xF, 0xFF, 0x25, 0xFF
    .byte 0xFF, 0x28, 0x12, 0xFF, 0x29, 0x1F, 0xFE, 0x2A, 7
    .byte 0xFE, 0x2F, 0x1F, 0xFE, 0x30, 0x1F, 0xFE, 0x2B, 7
    .byte 0xFD, 3, 0xEB, 3, 0xD7, 3, 0xD6, 0x1E, 4, 0x80, 0xD6
    .byte 0x1F, 6, 0x70, 0xC3, 5, 0xB7, 3, 0xB6, 0x1E, 8, 0x80
    .byte 0xB6, 0x26, 0xA, 0x70, 0xAB, 0x1E, 0xC, 0x58, 0xA9
    .byte 0x26, 0xE, 0x58, 0xA1, 0x1F, 0x10, 0x40, 0x9F, 0x26
    .byte 0x12, 0x50, 0x9F, 5, 0x9B, 0x57, 0x93, 3, 0x83, 3
    .byte 0x7A, 0x26, 0x14, 0x70, 0x78, 0x1F, 0x16, 0x70, 0x73
    .byte 3, 0x61, 0x2C, 0x18, 0x5A, 0x60, 0x25, 0x1F, 0x5F
    .byte 0x57, 0x5E, 0x2C, 0x1A, 0x5A, 0x5D, 0x1D, 0x1C, 0x20
    .byte 0x5B, 0x2C, 0x1E, 0x5A, 0x5B, 3, 0x53, 3, 0x47, 3
    .byte 0x44, 0x54, 0, 0x3C, 0x1E, 4, 0x60, 0x3C, 0x26, 6
    .byte 0x70, 0x3B, 2, 0xE0, 0x27, 0x1F, 8, 0x28, 0x25, 0x26
    .byte 0xA, 0x38, 0x23, 0x1F, 0xC, 0x48, 0x23, 0x26, 0xE
    .byte 0xC0, 0x21, 0x26, 0x10, 0x58, 0x1F, 0x1F, 0x12, 0x68
    .byte 0x17, 5, 0x17, 0x1D, 0x14, 0x20, 0x16, 0x57, 0x15
    .byte 0x2D, 0x16, 0x68, 0xD
area_2_obj_tbl_super:
    .byte 0xFF, 2, 0xE1, 0xEF, 5, 0xE7, 0x2E, 4, 0x9C, 3, 0x40
    .byte 0, 0x38, 0x1C, 0xFF, 0x18, 0xDD, 0x26, 6, 0x70, 0xDD
    .byte 0x1E, 8, 0x60, 0xD3, 0x1F, 0xA, 0xD0, 0xD3, 0x26, 0xC
    .byte 0xC0, 0xC9, 0x26, 0xE, 0x70, 0xC9, 0x26, 0x10, 0x60
    .byte 0xC3, 3, 0xBB, 0x2E, 0x12, 0x94, 3, 0x68, 0, 0x20
    .byte 2, 0xFF, 0, 0xB3, 0x26, 0x14, 0x68, 0xB3, 5, 0xA7
    .byte 0x2E, 0x16, 0x94, 3, 0x58, 0, 0xC0, 0x18, 0xFF, 0
    .byte 0xA3, 0x26, 0x18, 0x70, 0xA3, 0x1F, 0x1A, 0x60, 0xA3
    .byte 3, 0x95, 0x26, 0x1C, 0x68, 0x93, 3, 0x83, 5, 0x79
    .byte 0x1F, 0x1E, 0xD0, 0x6F, 0x26, 4, 0x70, 0x6F, 0x1F
    .byte 6, 0x60, 0x6D, 0x1F, 8, 0x70, 0x6D, 0x26, 0xA, 0x60
    .byte 0x67, 0x1D, 0xC, 0x80, 0x67, 0x2E, 0xE, 0xD8, 4, 0x48
    .byte 0x1C, 0x50, 0, 0x20, 0x1C, 0xFF, 0, 0x5B, 3, 0x4B
    .byte 5, 0x47, 0x2E, 0x10, 0xA4, 4, 8, 0, 0x50, 8, 0x60
    .byte 0, 0xC0, 2, 0x44, 0x2E, 0x12, 0x34, 3, 0x78, 0, 0xA8
    .byte 4, 0xC0, 6, 0x3E, 0x1D, 0x14, 0x20, 0x39, 0x1F, 0x16
    .byte 0xD0, 0x39, 0x26, 0x18, 0xC0, 0x34, 0x57, 0x33, 3
    .byte 0x27, 0x1E, 0x1A, 0x90, 0x25, 0x1F, 0x1C, 0x80, 0x25
    .byte 0x2E, 0x1E, 0x60, 2, 0x90, 4, 0xC0, 8, 0x23, 0x1E
    .byte 4, 0x70, 0x23, 5, 0x21, 0x1F, 6, 0x60, 0x1F, 0x1E
    .byte 8, 0x50, 0x1C, 0x28, 0x1A, 0x1B, 2, 0xE1, 0x17, 0x26
    .byte 0xA, 0xA0, 0x17, 0x26, 0xC, 0x90, 0x15, 5, 0x13, 0x1F
    .byte 0xE, 0xB0, 0x13, 0x1B, 0x10, 0xA0, 0x13, 0x1B, 0x12
    .byte 0x90, 0x13, 0x1F, 0x14, 0x80, 0xD
area_3_obj_tbl_super:
    .byte 0xFF, 0x22, 4, 0xFF, 0x28, 0x16, 0xEF, 0x1F, 0x16
    .byte 0x40, 0xE4, 0x22, 2, 0xBD, 0x26, 0x18, 0xA0, 0xBB
    .byte 0x1F, 0x1A, 0xA0, 0xB8, 0x22, 2, 0xA3, 0x20, 0x1C
    .byte 0xC0, 0x9B, 0x1D, 4, 0xE0, 0x93, 0xF, 0x74, 0x91, 0x26
    .byte 6, 0x80, 0x8F, 0x1E, 8, 0x80, 0x87, 0x1E, 0xA, 0x90
    .byte 0x87, 0x1F, 0xC, 0x80, 0x83, 0x23, 0x83, 0x57, 0x7B
    .byte 3, 0x6B, 0x1F, 0xE, 0xD0, 0x6B, 0x26, 0x10, 0xA0, 0x63
    .byte 5, 0x63, 0x26, 0x12, 0x60, 0x5B, 0x1F, 0x14, 0x60
    .byte 0x57, 0x36, 0x16, 0x78, 0x57, 3, 0x4B, 0x57, 0x49
    .byte 0x1F, 0x18, 0xD0, 0x49, 0x26, 0x1A, 0xA0, 0x43, 3
    .byte 0x43, 0x54, 0, 0x36, 0x1E, 0x1C, 0xC0, 0x36, 0x26
    .byte 0x1E, 0xA8, 0x36, 0x1F, 4, 0x90, 0x36, 0x1E, 6, 0x78
    .byte 0x2C, 0x1F, 8, 0x90, 0x2B, 5, 0x1F, 0x1F, 0xA, 0x80
    .byte 0x1F, 0x26, 0xC, 0x60, 0x1F, 0x1F, 0xE, 0x40, 0x18
    .byte 0x24, 3, 0x17, 0x21, 0x10, 0x60, 0x17, 0x1D, 0x14
    .byte 0xE0, 0xD
    
area_4_obj_tbl_super:
    .byte 0xFF, 2, 0xE1, 0xF0, 5, 0xED, 0x2E, 0x16, 0x9C, 3
    .byte 0xA0, 0, 0x80, 0x10, 0x80, 0, 0xE3, 0x2E, 0x18, 0x2C
    .byte 2, 0x90, 0, 0x80, 0x1C, 0xDB, 0x1E, 0x1A, 0x60, 0xDB
    .byte 0x1F, 0x1C, 0x50, 0xD1, 0x2E, 0x1E, 0x7C, 3, 0x38
    .byte 0, 0x80, 2, 0xC0, 0, 0xCB, 3, 0xC5, 0x26, 4, 0xB0
    .byte 0xC5, 0x1F, 6, 0xA0, 0xC2, 0x1D, 8, 0xB0, 0xBD, 0x2E
    .byte 0xA, 0x24, 3, 0x48, 0, 0x28, 2, 0xFF, 0, 0xBB, 5, 0xAF
    .byte 0x1F, 0xC, 0x50, 0xAD, 0x1F, 0xE, 0x40, 0xAA, 0x26
    .byte 0x10, 0x50, 0xA7, 0x26, 0x12, 0x40, 0xA7, 0x2E, 0x14
    .byte 0x24, 4, 0x60, 0, 0xD8, 0x10, 0x28, 8, 0xFF, 2, 0x9F
    .byte 3, 0x8B, 5, 0x87, 0x22, 1, 0x83, 0x23, 0x73, 2, 0xE2
    .byte 0x73, 0x4E, 0x2F, 0x73, 0x4C, 0x63, 5, 0x5F, 2, 0xE2
    .byte 0x4F, 5, 0x3F, 0x22, 4, 0x33, 0x23, 0x31, 0x23, 0x2B
    .byte 0x23, 0x2B, 0x57, 0x28, 3, 0x20, 0x4D, 0x20, 3, 0x10
    .byte 3, 0xD
    
area_5_obj_tbl_super:
    .byte 0xFF, 0x24, 7, 0xFF, 0x2F, 0xF, 0xFE, 0x30, 0xF, 0xFE
    .byte 0x28, 0x1C, 0xFD, 3, 0xEF, 3, 0xE3, 0x57, 0xE3, 5
    .byte 0xDD, 0x1F, 4, 0xA0, 0xDD, 0x1E, 6, 0x90, 0xDB, 0x21
    .byte 8, 0x70, 0xDB, 0x1E, 0xC, 0xA0, 0xDB, 0x1F, 0xE, 0x90
    .byte 0xD1, 0x3D, 0x10, 0xC0, 0xCB, 3, 0xBF, 0x3E, 0x12
    .byte 0xA0, 0xBB, 3, 0xBB, 0x3E, 0x14, 0x60, 0xB7, 0x3E
    .byte 0x16, 0xA0, 0xB3, 3, 0xB3, 0x3F, 0x18, 0x60, 0xAF
    .byte 0x3F, 0x1A, 0x20, 0xA7, 5, 0xA5, 0x21, 0x1C, 0x68
    .byte 0x9B, 0x3E, 4, 0x40, 0x97, 0x3E, 6, 0x80, 0x95, 0x3E
    .byte 8, 0xA0, 0x93, 0x3E, 0xA, 0xC0, 0x93, 3, 0x7B, 5, 0x71
    .byte 0x2E, 0xC, 0x60, 0xC, 0x30, 0, 0x30, 0x10, 0x30, 0x18
    .byte 0x30, 8, 0x30, 0, 0x30, 0x10, 0x30, 0x18, 0x30, 8
    .byte 0x30, 0, 0x30, 0x10, 0x30, 0x18, 0x30, 8, 0x71, 0x1D
    .byte 0xE, 0x20, 0x70, 0x25, 0xF, 0x70, 0x24, 0xF, 0x6B
    .byte 0x1E, 0x10, 0x80, 0x69, 0x26, 0x12, 0x80, 0x67, 0x1E
    .byte 0x14, 0x80, 0x65, 0x26, 0x16, 0x80, 0x63, 3, 0x4B
    .byte 5, 0x4B, 0x1F, 0x18, 0xC0, 0x3F, 3, 0x35, 0x1F, 0x1A
    .byte 0x80, 0x32, 0x2E, 0x1C, 0xD8, 3, 0xC0, 0x18, 0x18
    .byte 0x10, 0xC0, 8, 0x2F, 5, 0x2D, 0x1D, 0x1E, 0xC0, 0x25
    .byte 0x54, 0, 0x23, 0x2E, 4, 0xC0, 1, 0xC0, 0x18, 0x20
    .byte 0x2E, 6, 0x20, 1, 0xC0, 8, 0x1D, 0x2E, 8, 0xC0, 1
    .byte 0xC0, 0x18, 0x17, 0x1F, 0xA, 0xC0, 0x17, 0x21, 0xC
    .byte 0x80, 0x17, 0x1F, 0x10, 0x40, 0xD
    
area_6_obj_tbl_super:
    .byte 0xFF, 0x24, 7, 0xF3, 0x26, 4, 0xC0, 0xF3, 0x1E, 6
    .byte 0xB0, 0xEB, 0x2E, 8, 0x3C, 3, 0xC0, 0, 0xC0, 0x10
    .byte 0xC0, 0, 0xE0, 3, 0xDB, 0x2E, 0xA, 0x34, 2, 0x20, 2
    .byte 0xFF, 0, 0xD7, 0x1F, 0xC, 0xC0, 0xD5, 0x26, 0xE, 0xD0
    .byte 0xD0, 3, 0xCB, 0x2E, 0x10, 0x1C, 3, 0x98, 0, 0x80
    .byte 2, 0x40, 0, 0xC0, 5, 0xBB, 0x2E, 0x12, 0x1C, 1, 0xFF
    .byte 0, 0xB6, 0x1E, 0x14, 0xC0, 0xB6, 0x26, 0x16, 0xD0
    .byte 0xB0, 0x22, 1, 0xAC, 0x23, 0xAA, 0x1F, 0x18, 0xB0
    .byte 0xAA, 0x1F, 0x1A, 0xA0, 0x9F, 0x21, 0x1C, 0xA0, 0x9B
    .byte 2, 0xE3, 0x84, 0x1D, 4, 0x20, 0x83, 5, 0x77, 0x2D
    .byte 6, 0xC0, 0x6F, 0x3C, 0x10, 0x40, 0x6B, 0x3B, 0x12
    .byte 0x60, 0x6B, 0x3B, 0x14, 0x30, 0x67, 0x3A, 0x16, 0x50
    .byte 0x5F, 0x1F, 0x18, 0x80, 0x5D, 0x26, 0x1A, 0x70, 0x56
    .byte 0x2E, 0x1C, 0x14, 0xB, 0x40, 0, 0x38, 4, 0x50, 6, 0x38
    .byte 4, 0x3C, 8, 0x30, 4, 0x20, 0, 0x20, 0x10, 0x20, 0
    .byte 0x20, 0x10, 0x20, 0, 0x55, 0x26, 0x1E, 0x70, 0x4F
    .byte 0x26, 4, 0x80, 0x4F, 0x1D, 6, 0xD0, 0x48, 0x2E, 8
    .byte 0xD8, 3, 8, 0, 0x58, 0x18, 0xFF, 0, 0x41, 0x2E, 0xA
    .byte 0x48, 2, 0x78, 0, 0xFF, 8, 0x38, 3, 0x33, 0x1F, 0xC
    .byte 0x70, 0x30, 3, 0x28, 5, 0x27, 0x26, 0xE, 0x70, 0x25
    .byte 0x26, 0x10, 0x90, 0x23, 0x26, 0x12, 0xB0, 0x20, 2
    .byte 0xE4, 0x18, 0x30, 0x3F, 0x18, 0x2F, 7, 0x18, 0x4E
    .byte 0xF, 0x18, 0x28, 0x20, 0x17, 0x21, 0x14, 0xC0, 0x17
    .byte 0x21, 0x18, 0xA0, 0x10, 5, 0xD
    
area_7_obj_tbl_super:
    .byte 0xFF, 0x22, 8, 0xF1, 0x1F, 4, 0x80, 0xEF, 0x1E, 6
    .byte 0x80, 0xED, 0x22, 3, 0xC9, 0x2E, 8, 0x70, 6, 0x60
    .byte 0xC, 0x60, 0x10, 0x60, 0x14, 0x60, 0x1C, 0x60, 0, 0x60
    .byte 4, 0xC6, 0x2E, 0xA, 0x58, 6, 0x30, 4, 0x60, 0xC, 0x60
    .byte 0x10, 0x60, 0x14, 0x60, 0x1C, 0x60, 0, 0xC3, 0x2E
    .byte 0xC, 0x40, 6, 0x60, 4, 0x60, 0xC, 0x60, 0x10, 0x60
    .byte 0x14, 0x60, 0x1C, 0x60, 0, 0xC0, 0x2E, 0xE, 0x40, 6
    .byte 0x30, 0, 0x60, 4, 0x60, 0xC, 0x60, 0x10, 0x60, 0x14
    .byte 0x60, 0x1C, 0xBD, 0x2E, 0x10, 0x40, 6, 0x60, 0, 0x60
    .byte 4, 0x60, 0xC, 0x60, 0x10, 0x60, 0x14, 0x60, 0x1C, 0xBA
    .byte 0x2E, 0x12, 0x58, 7, 0x30, 0x1C, 0x60, 0, 0x60, 4
    .byte 0x60, 0xC, 0x60, 0x10, 0x60, 0x14, 0x60, 0x1C, 0xA1
    .byte 0x1E, 0x14, 0x70, 0x9F, 0x26, 0x16, 0x60, 0x9E, 0x22
    .byte 2, 0x9D, 0x1F, 0x18, 0x50, 0x9B, 0x1E, 0x1A, 0x40
    .byte 0x83, 0x10, 0x74, 0x81, 0x26, 0x1C, 0x40, 0x7B, 0x1D
    .byte 0x1E, 0x20, 0x6C, 0x23, 0x6B, 0x1E, 4, 0xB0, 0x6B
    .byte 0x1F, 6, 0x80, 0x6B, 0x1E, 8, 0x50, 0x6B, 0x1F, 0xA
    .byte 0x20, 0x4F, 0x22, 0x10, 0x43, 0x54, 0, 0x36, 0x1F
    .byte 0xC, 0x48, 0x36, 0x1F, 0xE, 0x20, 0x2B, 0x3C, 0x10
    .byte 0xC0, 0x27, 0x3C, 0x12, 0xA0, 0x19, 0x11, 0x78, 0x17
    .byte 0x11, 0x76, 0xF, 0x1D, 0x14, 0xC0, 0xF, 0x23, 0xD
    
area_8_obj_tbl_super:
    .byte 0xF3, 3, 0xF3, 0x57, 0xEE, 0x2E, 4, 0x14, 5, 8, 0
    .byte 0xA0, 8, 0x30, 0xC, 0xFF, 0x10, 0xFF, 0, 0xEA, 5, 0xE5
    .byte 0x26, 6, 0x30, 0xE5, 0x26, 8, 0xC8, 0xE2, 0x1F, 0xA
    .byte 0x48, 0xE2, 0x1F, 0xC, 0xB0, 0xDF, 0x26, 0xE, 0x60
    .byte 0xDF, 0x26, 0x10, 0x98, 0xCC, 0x1E, 0x12, 0x40, 0xC8
    .byte 0x26, 0x14, 0x60, 0xC8, 0x26, 0x16, 0x20, 0xC7, 0x21
    .byte 0x18, 0x48, 0xC3, 0x1E, 0x1C, 0x40, 0xBB, 0x57, 0xB3
    .byte 0x1F, 0x1E, 0x48, 0xA8, 3, 0xA5, 0x2E, 4, 0xA0, 2
    .byte 0xB0, 2, 0x80, 0, 0xA5, 0x2E, 6, 0x74, 4, 0x78, 0
    .byte 0x50, 0x18, 0x50, 8, 0x80, 0, 0xA5, 0x2E, 8, 0x14
    .byte 4, 0x78, 0, 0x50, 8, 0x50, 0x18, 0x80, 0, 0x9B, 5
    .byte 0x93, 0x2E, 0xA, 0x7C, 5, 0xA0, 0, 0xF0, 0x10, 0x30
    .byte 0xF, 0x30, 0x1F, 0x80, 0, 0x93, 0x1F, 0xC, 0x50, 0x93
    .byte 0x26, 0xE, 0x40, 0x93, 0x2E, 0x10, 0x14, 3, 0xAC, 0
    .byte 0xFF, 0x10, 0x80, 0, 0x83, 3, 0x7F, 0x2E, 0x12, 0x84
    .byte 7, 0x50, 0, 0xC0, 0x10, 0x50, 0x10, 0x28, 0xB, 0x50
    .byte 0x10, 0x70, 0xC, 0x60, 0xD, 0x77, 0x1D, 0x14, 0x40
    .byte 0x73, 5, 0x73, 0x26, 4, 0x58, 0x73, 0x1F, 6, 0x48
    .byte 0x6D, 0x2E, 0x16, 0x14, 1, 0x80, 0, 0x6A, 0x2E, 0x18
    .byte 0x14, 1, 0x80, 0, 0x67, 0x2E, 0x1A, 0x14, 1, 0x80
    .byte 0, 0x64, 0x35, 0x1C, 0x14, 0x61, 0x35, 0x1E, 0x14
    .byte 0x4D, 0x5C, 2, 0x50, 0x47, 0x2E, 8, 0x80, 6, 8, 0
    .byte 0x58, 8, 0x60, 0, 0x60, 2, 0x80, 0, 0x60, 4, 0x47
    .byte 0x2E, 0xA, 0x68, 8, 8, 0, 0x88, 8, 0x60, 0, 0x60, 0x1C
    .byte 0x38, 0, 0x18, 0x12, 0xA8, 0x14, 0x80, 0, 0x47, 0x2E
    .byte 0xC, 0x50, 3, 8, 0, 0x78, 0x18, 0x80, 0, 0x3F, 2, 0xE5
    .byte 0x37, 0x1B, 0xE, 0xB8, 0x37, 0x1B, 0x10, 0x48, 0x33
    .byte 5, 0x27, 0x2E, 0x12, 0x50, 2, 0x68, 4, 0xE0, 8, 0x24
    .byte 0x2E, 0x14, 0x38, 2, 0x98, 4, 0xE0, 8, 0x23, 2, 0xE6
    .byte 0x21, 0x2E, 0x16, 0x20, 2, 0xC8, 4, 0xE0, 8, 0x1F
    .byte 0x2E, 0x18, 0x90, 3, 8, 0x1C, 0xE0, 0, 0xD0, 8, 0x1C
    .byte 0x2E, 0x1A, 0xA8, 3, 0x38, 0x1C, 0xE0, 0, 0xD0, 8
    .byte 0x19, 0x2E, 0x1C, 0xC0, 3, 0x68, 0x1C, 0xE0, 0, 0xD0
    .byte 8, 0x19, 0x1F, 0x1E, 0x88, 0x19, 0x1F, 4, 0x68, 0x19
    .byte 0x1F, 6, 0x48, 0x17, 5, 0x13, 0x1B, 8, 0x88, 0x13
    .byte 0x1B, 0xC, 0x48, 0xD
    
area_9_obj_tbl_super:
    .byte 0xFB, 2, 0xE7, 0xF5, 0x1D, 0x10, 0x70, 0xF3, 0x1D
    .byte 0x12, 0x50, 0xF1, 0x1D, 0x14, 0x30, 0xEF, 0x1D, 0x16
    .byte 0x10, 0xEB, 5, 0xE3, 2, 0xE8, 0xD5, 0x21, 0x18, 0x50
    .byte 0xD3, 5, 0xD1, 0x57, 0xCF, 3, 0xC7, 3, 0xC3, 2, 0xE9
    .byte 0xBF, 5, 0xB3, 0x33, 0x9F, 0x34, 0x87, 0x18, 0x76
    .byte 0x83, 0x4C, 0x73, 2, 0xEA, 0x63, 5, 0x63, 0x57, 0x5B
    .byte 2, 0xEB, 0x4B, 5, 0x3F, 3, 0x2F, 3, 0x20, 0x4D, 0x1F
    .byte 3, 0x10, 5, 0xD
    
area_10_obj_tbl_super:
    .byte 0xFF, 3, 0xF7, 5, 0xF3, 0x57, 0xEF, 3, 0xE3, 5, 0xDB
    .byte 3, 0xCF, 5, 0xC6, 0x2E, 0x1C, 0xD8, 8, 0x60, 0x14
    .byte 0x60, 4, 0x60, 0x14, 0x60, 4, 0x60, 0x14, 0x60, 4
    .byte 0x60, 0x14, 0x60, 4, 0xC6, 0x2E, 0x1E, 0x98, 8, 0x60
    .byte 0x10, 0x60, 0, 0x60, 0x10, 0x60, 0, 0x60, 0x10, 0x60
    .byte 0, 0x60, 0x10, 0x60, 0, 0xC6, 0x2E, 4, 0x58, 8, 0x60
    .byte 0xC, 0x60, 0x1C, 0x60, 0xC, 0x60, 0x1C, 0x60, 0xC
    .byte 0x60, 0x1C, 0x60, 0xC, 0x60, 0x1C, 0xBE, 0x2E, 6, 0xB8
    .byte 8, 0x40, 8, 0x60, 0x18, 0x60, 8, 0x60, 0x18, 0x60
    .byte 8, 0x60, 0x18, 0x60, 8, 0x60, 0x18, 0xBE, 0x2E, 8
    .byte 0x78, 8, 0x40, 0x18, 0x60, 8, 0x60, 0x18, 0x60, 8
    .byte 0x60, 0x18, 0x60, 8, 0x60, 0x18, 0x60, 8, 0xB8, 0x2E
    .byte 0xA, 0xC8, 7, 0x40, 0x1C, 0x60, 0xC, 0x60, 0x1C, 0x60
    .byte 0xC, 0x60, 0x1C, 0x60, 0xC, 0x60, 0x1C, 0xB8, 0x2E
    .byte 0xC, 0x98, 7, 0x40, 0, 0x60, 0x10, 0x60, 0, 0x60, 0x10
    .byte 0x60, 0, 0x60, 0x10, 0x60, 0, 0xB8, 0x2E, 0xE, 0x68
    .byte 7, 0x40, 4, 0x60, 0x14, 0x60, 4, 0x60, 0x14, 0x60
    .byte 4, 0x60, 0x14, 0x60, 4, 0xA9, 0x1E, 0x10, 0xB0, 0xA9
    .byte 0x1E, 0x12, 0x90, 0xA7, 0x1E, 0x14, 0xA0, 0xA5, 0x1E
    .byte 0x16, 0xB0, 0xA5, 0x1E, 0x18, 0x90, 0x9B, 0x18, 0x76
    .byte 0x91, 0x1F, 0x1A, 0x40, 0x8F, 0x1F, 0x1C, 0x40, 0x8B
    .byte 0x18, 0x76, 0x87, 0x1E, 0x1E, 0x50, 0x87, 0x1E, 4
    .byte 0x40, 0x7B, 0x18, 0x76, 0x6F, 0x1F, 6, 0xC0, 0x6F
    .byte 0x1E, 8, 0xA0, 0x6F, 0x1F, 0xA, 0x80, 0x64, 0x2E, 0xC
    .byte 0x98, 0x10, 0x80, 0x18, 0x80, 0x10, 0x80, 9, 0x20
    .byte 0xC, 0x40, 0x18, 0x20, 0x1A, 0x10, 0x18, 0x28, 0x10
    .byte 0x10, 8, 0x20, 6, 0x48, 8, 0x18, 0xC, 0x70, 0x18, 0xA0
    .byte 0x13, 0x98, 8, 0x80, 4, 0x47, 0x1D, 0xE, 0xC0, 0x47
    .byte 0x1D, 0x10, 0xA0, 0x47, 0x1D, 0x12, 0x80, 0x47, 0x1D
    .byte 0x14, 0x60, 0x43, 0x1D, 0x16, 0xC0, 0x43, 0x1D, 0x18
    .byte 0xA0, 0x43, 0x1D, 0x1A, 0x80, 0x43, 0x1D, 0x1C, 0x60
    .byte 0x36, 0x1E, 0x1E, 0x80, 0x36, 0x26, 4, 0x60, 0x36
    .byte 0x1E, 6, 0x40, 0x30, 0x59, 0x7E, 0x2B, 0x1F, 8, 0x50
    .byte 0x21, 0x20, 0xA, 0x80, 0x1B, 0x20, 0xE, 0x80, 0x19
    .byte 0x1B, 0x12, 0xD0, 0x19, 0x1B, 0x14, 0x20, 0x17, 0x16
    .byte 0x74, 0x16, 0x16, 0x76, 0x13, 0x1B, 0x16, 0xD0, 0x13
    .byte 0x1B, 0x18, 0x20, 0xD
    
area_11_obj_tbl_super:
    .byte 0xFB, 0x11, 0x74, 0xF3, 0x22, 8, 0xE9, 0x2D, 4, 0x60
    .byte 0xE6, 0x22, 8, 0xE4, 0x2E, 0xE, 0x9C, 1, 0x80, 0, 0xDC
    .byte 0x2E, 0x10, 0x2C, 2, 0xF8, 0, 0x40, 0x1C, 0xCB, 0x26
    .byte 0x12, 0xB0, 0xCB, 0x1F, 0x14, 0xA0, 0xCB, 0x2E, 0x16
    .byte 0x2C, 7, 0x70, 0, 0xE8, 0x10, 0x20, 0x12, 0xB8, 0x10
    .byte 0xB8, 0, 0x20, 2, 0x20, 0, 0xC3, 0x23, 0xC3, 0x35
    .byte 0x18, 0x7C, 0xBF, 0x35, 0x1A, 0x7C, 0xBB, 0x35, 0x1C
    .byte 0x7C, 0xB7, 0x39, 0x1E, 0x7C, 0xAF, 0x3B, 4, 0x24
    .byte 0xA7, 0x3B, 6, 0x24, 0xA3, 0x22, 0xC, 0x9B, 3, 0x8D
    .byte 0x1D, 8, 0x80, 0x8B, 5, 0x8B, 0x1D, 0xA, 0x70, 0x84
    .byte 0x22, 4, 0x77, 0x2E, 0xC, 0x34, 9, 0x60, 0, 0xA0, 0x10
    .byte 0x28, 0xD, 0x50, 0x10, 0x70, 0xC, 0x60, 0xD, 0x40
    .byte 6, 0x30, 4, 0x20, 8, 0x75, 0x1F, 0xE, 0x60, 0x73, 0x1E
    .byte 0x10, 0x70, 0x73, 0x23, 0x71, 0x1F, 0x12, 0x80, 0x6F
    .byte 0x1E, 0x14, 0x90, 0x6D, 0x1F, 0x16, 0xA0, 0x6B, 0x1E
    .byte 0x18, 0xB0, 0x69, 0x1F, 0x1A, 0xC0, 0x67, 0x1E, 0x1C
    .byte 0xD0, 0x67, 0x57, 0x63, 3, 0x63, 3, 0x53, 0x22, 0x10
    .byte 0x43, 3, 0x3B, 5, 0x2B, 0x2E, 0x1E, 0xE0, 5, 8, 0
    .byte 0x60, 0x18, 0x20, 0x1C, 0xD8, 0x18, 0x20, 0x14, 0x27
    .byte 0x21, 4, 0x68, 0x23, 0x23, 0x23, 2, 0xEC, 0x1D, 0x1D
    .byte 8, 0x20, 0x1D, 0x1F, 0xA, 0xD0, 0x1D, 0x1F, 0xC, 0xA0
    .byte 0x1B, 0x1D, 0xE, 0x20, 0x19, 0x1D, 0x10, 0x40, 0x17
    .byte 0x1E, 0x12, 0xD0, 0x17, 0x1E, 0x14, 0xA0, 0x17, 0x1D
    .byte 0x16, 0x40, 0x13, 0x23, 0x13, 5, 0xD
    
area_12_obj_tbl_super:
    .byte 0xFF, 0x30, 0xF, 0xFF, 0x29, 0xF, 0xFF, 0x2B, 3, 0xFF
    .byte 0x2A, 3, 0xF3, 0x57, 0xEE, 0x2E, 4, 0x14, 9, 8, 0
    .byte 0xA0, 8, 0x30, 0xC, 0x48, 0x10, 0x30, 0, 0x50, 0x10
    .byte 0x68, 0, 0x30, 0x1C, 0x20, 0x18, 0xE5, 0x1B, 6, 0xC0
    .byte 0xE5, 0x1F, 8, 0xB0, 0xE5, 0x1F, 0xA, 0x48, 0xE5, 0x1B
    .byte 0xC, 0x38, 0xE3, 0x1F, 0xE, 0xC0, 0xE3, 0x1B, 0x10
    .byte 0xB0, 0xE3, 0x1B, 0x12, 0x48, 0xE3, 0x1F, 0x14, 0x38
    .byte 0xDC, 0x2E, 0x16, 0x7C, 4, 8, 0x10, 0x78, 0, 0x50
    .byte 0x10, 0x40, 0, 0xC9, 0x35, 0x18, 0x48, 0xC9, 0x35
    .byte 0x1A, 0x38, 0xC7, 0x35, 0x1C, 0x48, 0xC7, 0x35, 0x1E
    .byte 0x38, 0xBD, 0x1E, 4, 0xB0, 0xBB, 0x1E, 6, 0xB0, 0xBB
    .byte 0x1E, 8, 0x90, 0xB9, 0x1E, 0xA, 0x90, 0xB3, 0x2E, 0xC
    .byte 0xCC, 1, 0x20, 0, 0xA7, 0x2E, 0xE, 0x74, 4, 0x58, 0
    .byte 0xA0, 0x18, 0xA0, 8, 0x20, 0, 0xA3, 0x2E, 0x10, 0x14
    .byte 1, 0x20, 0, 0xA3, 0x57, 0xA1, 0x2E, 0x12, 0x14, 1
    .byte 0x20, 0, 0x97, 3, 0x93, 0x2E, 0x14, 0x7C, 2, 0x98
    .byte 0, 0x20, 2, 0x8D, 0x1D, 0x16, 0x60, 0x8D, 0x1D, 0x18
    .byte 0x50, 0x8B, 0x1D, 0x1A, 0x60, 0x8B, 0x1D, 0x1C, 0x50
    .byte 0x87, 5, 0x83, 3, 0x77, 0x1E, 0x1E, 0x60, 0x77, 0x1F
    .byte 4, 0x50, 0x73, 5, 0x73, 0x2E, 6, 0x14, 4, 0x70, 0
    .byte 0xE0, 0x10, 0xA0, 0x10, 0x20, 0, 0x6F, 0x1F, 8, 0x60
    .byte 0x6F, 0x1E, 0xA, 0x50, 0x6B, 3, 0x68, 0x30, 7, 0x5B
    .byte 5, 0x55, 0x1B, 0xC, 0xA8, 0x47, 0x2E, 0xE, 0x78, 3
    .byte 8, 0, 0xC8, 0x18, 0x20, 0, 0x47, 0x2E, 0x10, 0x90
    .byte 3, 8, 0, 0xF8, 0x18, 0x20, 0, 0x47, 0x2E, 0x12, 0xA8
    .byte 4, 8, 0, 0xE0, 0x18, 0x48, 0x18, 0x20, 0, 0x37, 0x1F
    .byte 0x14, 0xC0, 0x37, 0x1F, 0x16, 0xB0, 0x33, 2, 0xED
    .byte 0x30, 0x1B, 0x18, 0x68, 0x2E, 0x1B, 0x1A, 0x58, 0x2C
    .byte 0x1B, 0x1C, 0x48, 0x2A, 0x1B, 0x1E, 0x38, 0x27, 0x3C
    .byte 4, 0x14, 0x23, 0x3B, 6, 0x14, 0x1F, 0x3B, 8, 0x14
    .byte 0x1B, 0x3C, 0xA, 0x14, 0x18, 0x2E, 0xC, 0x88, 8, 0x40
    .byte 0, 0x80, 0x18, 0x80, 0x10, 0x80, 8, 0x80, 0, 0x80
    .byte 0x18, 0x80, 0x10, 0x80, 8, 0x18, 0x2E, 0xE, 0x48, 8
    .byte 0x40, 0x10, 0x80, 8, 0x80, 0, 0x80, 0x18, 0x80, 0x10
    .byte 0x80, 8, 0x80, 0, 0x80, 0x18, 0x17, 0x21, 0x10, 0x70
    .byte 0x17, 5, 0xD
    
area_13_obj_tbl_super:
    .byte 0xF7, 0x1B, 0x14, 0x20, 0xF3, 0x1B, 0x16, 0xA0, 0xF3
    .byte 0x1B, 0x18, 0x70, 0xED, 0x1F, 0x1A, 0xA0, 0xEB, 0x1F
    .byte 0x1C, 0x90, 0xE9, 0x1F, 0x1E, 0x80, 0xE7, 0x1F, 4
    .byte 0x70, 0xE3, 0x57, 0xDF, 0x1B, 6, 0xC0, 0xD9, 0x1B
    .byte 8, 0xC0, 0xD3, 3, 0xBB, 5, 0xB1, 0x21, 0xA, 0xB0, 0xB1
    .byte 0x21, 0xE, 0x50, 0xAB, 3, 0xA1, 0x3E, 0x12, 0x90, 0x9D
    .byte 0x3E, 0x14, 0x70, 0x99, 0x40, 0x16, 0x50, 0x95, 0x3E
    .byte 0x18, 0x30, 0x93, 5, 0x8D, 0x40, 0x1A, 0x50, 0x89
    .byte 0x3E, 0x1C, 0x70, 0x85, 0x3E, 0x1E, 0x90, 0x81, 0x3E
    .byte 4, 0xB0, 0x7B, 3, 0x71, 0x1F, 6, 0xD0, 0x6F, 0x26
    .byte 8, 0xC0, 0x6D, 0x1F, 0xA, 0xB0, 0x6B, 0x26, 0xC, 0xA0
    .byte 0x69, 0x1F, 0xE, 0x90, 0x63, 5, 0x5F, 0x57, 0x5B, 2
    .byte 0xEE, 0x43, 5, 0x40, 0x1D, 0x10, 0x30, 0x40, 0x1D
    .byte 0x12, 0x20, 0x3B, 3, 0x36, 0x1B, 0x14, 0xC0, 0x25
    .byte 0x2E, 0x16, 0xE0, 2, 0xC0, 0x18, 0xC0, 8, 0x25, 0x2E
    .byte 0x18, 0x10, 2, 0xC0, 8, 0xC0, 0x18, 0x23, 0x2E, 0x1A
    .byte 0xD0, 2, 0xA0, 0x18, 0xA0, 8, 0x23, 0x2E, 0x1C, 0x20
    .byte 2, 0xA0, 8, 0xA0, 0x18, 0x23, 5, 0x1B, 2, 0xEF, 0xE
    .byte 5, 0xD
    
area_14_obj_tbl_super:
    .byte 0xFF, 2, 0xF0, 0xF7, 5, 0xF3, 0x22, 2, 0xE7, 0x23
    .byte 0xE7, 2, 0xF1, 0xE3, 0x4C, 0xDF, 5, 0xDB, 2, 0xF2
    .byte 0xD5, 5, 0xCB, 2, 0xF3, 0xC5, 5, 0xBB, 2, 0xEC, 0xBB
    .byte 0x4D, 0xAB, 5, 0xA1, 0x33, 0x8F, 0x34, 0x7F, 2, 0xF4
    .byte 0x77, 5, 0x73, 0x18, 0x76, 0x67, 0x4C, 0x67, 2, 0xF3
    .byte 0x65, 5, 0x5B, 2, 0xF5, 0x55, 5, 0x4B, 3, 0x3B, 5
    .byte 0x37, 0x57, 0x33, 0x4D, 0x33, 3, 0x30, 0x5B, 0, 0x40
    .byte 0x23, 5, 0x1B, 3, 0x1F, 5, 0xD
    
area_15_obj_tbl_super:
    .byte 0xFF, 2, 0xF6, 0xF3, 5, 0xEF, 0x2E, 4, 0x3C, 5, 0x80
    .byte 0, 0x80, 0x10, 0x70, 0, 0x70, 0x10, 0x70, 0, 0xEE
    .byte 0x1D, 6, 0x20, 0xEE, 0x26, 8, 0x80, 0xE6, 0x2E, 0xA
    .byte 0x3C, 3, 0x70, 0, 0x70, 0x10, 0x70, 0, 0xE5, 0x1F
    .byte 0xC, 0x80, 0xDE, 0x2E, 0xE, 0x3C, 3, 0x60, 0, 0x60
    .byte 0x10, 0x60, 0, 0xD7, 0x1F, 0x10, 0xC0, 0xD7, 0x2E
    .byte 0x12, 0x26, 6, 0x50, 2, 0x78, 0x12, 0x18, 0x10, 0x18
    .byte 0, 0x80, 2, 0x20, 0, 0xD5, 0x1F, 0x14, 0xD0, 0xD2
    .byte 0x26, 0x16, 0x50, 0xCD, 0x2E, 0x18, 0x1C, 4, 0x40
    .byte 0, 0xA0, 0x10, 0xD8, 0, 0x20, 2, 0xC6, 0x1F, 4, 0x50
    .byte 0xC3, 3, 0xC2, 0x2E, 0x1A, 0x1C, 3, 0x80, 0, 0xA0
    .byte 0, 0x20, 2, 0xBE, 0x35, 0x1C, 0x1C, 0xBA, 0x3B, 0x1E
    .byte 0x1C, 0xB6, 0x1F, 6, 0xD0, 0xB6, 0x26, 8, 0xC0, 0xB5
    .byte 0x1D, 0xA, 0x40, 0xB3, 3, 0xA9, 0x1D, 0xC, 0xB0, 0xA3
    .byte 3, 0xA0, 0x57, 0xA0, 0x26, 0xE, 0xA0, 0xA0, 0x1F, 0x10
    .byte 0x90, 0x93, 5, 0x8B, 3, 0x7B, 5, 0x78, 0x21, 0x12
    .byte 0xC8, 0x76, 0x2E, 0x16, 0x78, 8, 0x50, 0x14, 0x50
    .byte 4, 0x50, 0x14, 0x50, 4, 0x50, 0x14, 0x50, 4, 0x50
    .byte 0x14, 0x50, 4, 0x76, 0x2E, 0x18, 0x18, 8, 0x50, 0xC
    .byte 0x50, 0x1C, 0x50, 0xC, 0x50, 0x1C, 0x50, 0xC, 0x50
    .byte 0x1C, 0x50, 0xC, 0x50, 0x1C, 0x6B, 0x2E, 0x1A, 0x70
    .byte 9, 0x40, 0x1C, 0x50, 0xC, 0x50, 0x1C, 0x50, 0xC, 0x50
    .byte 0x1C, 0x50, 0xC, 0x50, 0x1C, 0x50, 0xC, 0x50, 0x1C
    .byte 0x6B, 0x2E, 0x1C, 0x20, 9, 0x40, 4, 0x50, 0x14, 0x50
    .byte 4, 0x50, 0x14, 0x50, 4, 0x50, 0x14, 0x50, 4, 0x50
    .byte 0x14, 0x50, 4, 0x61, 0x2E, 0x1E, 0xA4, 7, 0x18, 0
    .byte 0x10, 0x1C, 0x60, 0x18, 0x38, 0x14, 0x40, 0x16, 0x60
    .byte 0x1E, 0x20, 0x1C, 0x5F, 0x1F, 4, 0x80, 0x5B, 0x26
    .byte 6, 0x60, 0x5B, 0x1D, 8, 0x20, 0x57, 0x1F, 0xA, 0x40
    .byte 0x53, 2, 0xF4, 0x4E, 0x2E, 0x14, 0xAC, 6, 0x50, 0
    .byte 0xA8, 0x10, 0x10, 8, 0xE0, 0x18, 0xA0, 0x10, 0xC0
    .byte 0, 0x48, 0x2E, 0x12, 0xD4, 6, 8, 0, 0x90, 0x18, 0x10
    .byte 8, 0xA0, 0x18, 0xE0, 0x10, 0xC0, 0, 0x47, 0x2E, 0x10
    .byte 0x44, 6, 0x18, 0, 0x70, 8, 0x70, 0x18, 0xC0, 0x10
    .byte 0xF0, 0x10, 0x20, 0x18, 0x42, 0x5D, 0, 0x4C, 0x3B
    .byte 0x26, 0x16, 0xB0, 0x37, 0x1F, 0x18, 0x90, 0x33, 5
    .byte 0x20, 0x5A, 0x7E, 0x1F, 0x1B, 0x1A, 0x90, 0x1F, 0x1B
    .byte 0x1C, 0x70, 0x1F, 0x1B, 0x1E, 0x50, 0x1B, 0x1B, 4
    .byte 0x70, 0x1B, 0x35, 6, 0x24, 0x1B, 2, 0xF7, 0x17, 0x3B
    .byte 8, 0x24, 0x15, 0x21, 0xA, 0xC0, 0x13, 0x3B, 0xE, 0x24
    .byte 0xF, 5, 0xD
    
area_16_obj_tbl_super:
    .byte 1, 0x57, 0xFF, 3, 0xF3, 0x1D, 0x14, 0xC0, 0xEF, 5
    .byte 0xE7, 0x2E, 0x16, 0x9C, 3, 0x40, 0, 0x38, 0x1C, 0x40
    .byte 0x18, 0xE5, 0x1B, 0x18, 0x60, 0xE1, 0x2E, 0x1A, 0x24
    .byte 3, 0x80, 0, 0x80, 0x10, 0x80, 0, 0xDD, 0x2E, 0x1C
    .byte 0x9C, 3, 0x80, 0, 0x80, 0x10, 0x80, 0, 0xD7, 0x1B
    .byte 0x1E, 0x78, 0xD7, 0x1B, 4, 0x48, 0xD7, 0x2E, 6, 0x24
    .byte 3, 0x80, 0, 0x80, 0x10, 0x80, 0, 0xD3, 0x2E, 8, 0x9C
    .byte 3, 0x80, 0, 0x80, 0x10, 0x80, 0, 0xD3, 0x1B, 0xA, 0x60
    .byte 0xCD, 0x2E, 0xC, 0x24, 3, 0x80, 0, 0x80, 0x10, 0x80
    .byte 0, 0xCB, 0x26, 0xE, 0xC8, 0xCB, 0x26, 0x10, 0x60, 0xC5
    .byte 0x2E, 0x12, 0x9C, 8, 0x60, 0, 0x78, 0x10, 0x20, 0x12
    .byte 0xF8, 0x10, 0x58, 0x10, 0x50, 0x18, 0x50, 8, 0x20
    .byte 0, 0xC5, 0x2E, 0x14, 0x24, 8, 0x60, 0, 0x90, 0x10
    .byte 0x20, 0xC, 0xE0, 0x10, 0x58, 0x10, 0x50, 8, 0x50, 0x18
    .byte 0x20, 0, 0xC5, 0x57, 0xC3, 3, 0xBB, 0x3B, 0x16, 0x70
    .byte 0xBB, 0x3B, 0x18, 0x50, 0xB7, 0x3C, 0x1A, 0x70, 0xB7
    .byte 0x3B, 0x1C, 0x50, 0xB3, 3, 0xA3, 3, 0x95, 0x1F, 0x1E
    .byte 0x80, 0x93, 5, 0x93, 0x1F, 4, 0x70, 0x91, 0x1F, 6
    .byte 0x60, 0x8F, 0x1F, 8, 0x50, 0x85, 3, 0x7D, 0x26, 0xA
    .byte 0xE0, 0x7D, 0x26, 0xC, 0x88, 0x7D, 0x26, 0xE, 0x50
    .byte 0x79, 0x26, 0x10, 0xC0, 0x79, 0x26, 0x12, 0x6C, 0x79
    .byte 0x26, 0x14, 0x18, 0x6F, 0x21, 0x16, 0x80, 0x6F, 0x3B
    .byte 0x1A, 0x34, 0x6B, 0x3B, 0x1C, 0x34, 0x6B, 5, 0x67
    .byte 0x1D, 0x1E, 0xB0, 0x65, 0x1D, 4, 0xA0, 0x63, 3, 0x53
    .byte 5, 0x4F, 0x26, 6, 0x80, 0x4C, 0x1F, 8, 0x68, 0x4B
    .byte 0x2E, 0xA, 0x34, 2, 0xA0, 4, 0x20, 6, 0x44, 0x1B, 0xC
    .byte 0x70, 0x3E, 0x1B, 0xE, 0xC0, 0x3E, 0x1D, 0x10, 0x70
    .byte 0x3E, 0x1B, 0x12, 0x18, 0x38, 0x1B, 0x14, 0x70, 0x37
    .byte 0x2E, 0x16, 0xA4, 3, 0x70, 0, 0x70, 0x10, 0x70, 0
    .byte 0x37, 0x2E, 4, 0x34, 3, 0x70, 0, 0x70, 0x10, 0x70
    .byte 0, 0x33, 2, 0xF9, 0x23, 5, 0x22, 0x2E, 6, 0x48, 2
    .byte 0xB8, 4, 0x20, 8, 0x22, 0x2E, 8, 0x34, 1, 0x20, 0
    .byte 0x1B, 0x2E, 0xA, 0x48, 8, 0x30, 0, 0xA0, 4, 0xA0, 0x10
    .byte 0x80, 0xC, 0x40, 0x10, 0x80, 0x18, 0xA0, 0x18, 0x20
    .byte 0, 0x17, 0x21, 0x18, 0x90, 0x17, 0x21, 0x1C, 0x70
    .byte 0x17, 2, 0xFB, 0xF, 5, 0xF, 0x25, 3, 0xF, 0x24, 3
    .byte 0xF, 0x29, 7, 0xF, 0x2F, 7, 0xF, 0x28, 0xD, 0xFF, 0xFF

    .align 2
*****************************************************************
*** this is actually implementing hardware on the PCB
*** 3 ROMs are used to read the map constructed of 'meta' tiles
*** - code implemented as per MAME driver
*****************************************************************
                
* read attribute and tile byte from map
* entry: d6=offset
* exit:  d6=bb(0)/bb(1)

xevious_bb_r:
    movem.l   d0-d1,-(a7)
    lea       rom2a,a0
    lea       rom2b,a1
    lea       rom2c,a2
    moveq     #0,d2
    moveq     #0,d3
    moveq     #0,d4
    move.b    xevious_bs1,d2
    and.b     #0x7e,d2
    lsl.w     #6,d2
    move.b    xevious_bs0,d3
    lsr.b     #1,d3
    or.b      d3,d2               | d2=adr_2b
    move.w    d2,d3               | copy adr_2b
    lsr.w     #1,d3               | d3=(adr_2b>>1)
    move.b    (d3.w,a0),d4        | d4=rom2a[addr_2b>>1]
    btst      #0,d2
    beq.b     1f
    and.b     #0xf0,d4
    lsl.w     #4,d4
    bra.b     2f
1:  and.b     #0x0f,d4
    lsl.w     #8,d4
2:  move.b    (d2.w,a1),d5        | d5=rom2b[adr_2b]
    or.b      d5,d4               | d4=dat1
    move      d4,d2
    and.w     #0x1ff,d2
    add.w     d2,d2
    add.w     d2,d2               | d2=(dat1&0x1ff)<<2
    move.b    xevious_bs1,d3
    and.b     #0x01,d3
    add.b     d3,d3               | d3=(xevious_bs[1]&1)<<1
    or.b      d3,d2               | d2=...
    move.b    xevious_bs0,d3
    and.b     #0x01,d3
    or.b      d3,d2               | d2=adr_2c
    btst      #10,d4              | (dat1 & 0x400)
    beq.b     3f
    eor.b     #0x01,d2            | (adr_2c ^= 1)
3:  btst      #9,d4               | (dat1 & 0x200)
    beq.b     4f
    eor.b     #0x02,d2            | (adr_2c ^= 2)
4:  btst      #0,d6               | (offset & 1)
    beq.b     5f
    or.w      #0x800,d2           | d2=(adr_2c|0x800)
    move.b    (d2.w,a2),d6        | BB1
    movem.l   (a7)+,d0-d1
    rts
5:  move.b    (d2.w,a2),d6        | dat2=rom2c[adr_2c]
    move.b    d6,d3
    add.b     d3,d3
    and.b     #0x80,d3            | bit6->7
    move.b    d6,d5
    lsr.b     #1,d5
    and.b     #0x40,d5            | bit7->6
    and.b     #0x3f,d6
    or.b      d3,d6
    or.b      d5,d6               | 6,7,5,4,3,2,1,0
    btst      #10,d4              | (dat1 & 0x400)
    beq.b     6f
    eor.b     #0x40,d6
6:  btst      #9,d4               | (dat1 & 0x200)
    beq.b     7f
    eor.b     #0x80,d6    
7:  movem.l   (a7)+,d0-d1
    rts
    
_end_of_xevious_sub_rom:

    .bss
    
* RAM and variables

    .align 4
sub_fn_jump_tbl_RAM:          ds.l  32

xevious_bs0:                  ds.b  1
xevious_bs1:                  ds.b  1

