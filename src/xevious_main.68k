***
***  XEVIOUS MAIN CPU 68K core implementation
***    (transcoded from Z80 arcade code)
*** (c) 2022 tcdev
***

* exports

		* ROM
    .global _start_of_xevious_main_rom
		.global	xevious_im1_irq
	  .global xevious_reset
		.global save_PC_to_fn_tbl_and_ret
	  .global start
		.global null_fn
		.global display_char
    .global _end_of_xevious_main_rom
		
		* RAM
		.global	fg_colorram
		.global	bg_colorram
		.global	fg_videoram
		.global	bg_videoram
		.global num_credits
		
* debugging only
	  .global main_loop
	  .global obj_tbl
	  .global obj_handler_tbl
	  .global add_obj_handler
	  .global area_object_tbl_tbl
	  .global area_1_obj_tbl
		.global	_ram_start
		.global main_debug1
		.global main_debug2

.include "src/xevious.inc"

.macro SET_REENTRY_ADDR_HERE
		move.l		#0f,(a6)
0:		
.endm		

.macro SET_REENTRY_ADDR addr
		move.l		#\addr,(a6)
.endm

_start_of_xevious_main_rom:

exit_caller: | $001D
		adda.l		#4,a7
		
null_fn: | $001f
		rts

add_to_score: | $0020
		moveq			#3-1,d7
		movea.l		#curr_player_score_lsb,a1
		andi.b		#0x0f,ccr													| clear X flag
add_to_score_cont: | $0054
		move.b		(a0)+,d0
		move.b		(a1),d1
		abcd			d0,d1
		move.b		d1,(a1)+
		dbf				d7,add_to_score_cont
		bcc				1f
		jsr				set_score_to_999999
1:	*jsr				check_1_2_for_new_high_score_and_update
add_to_score_cont_2: | $133A
		jsr				display_player_scores
		***
		rts
		
save_PC_to_fn_tbl_and_ret: | $0030
		move.l		(a7)+,(a6)												| pop return and store in table
		rts																					| return up the call stack
				
xevious_reset: | $0000
		jsr				xevious_sub_reset
		bra				start

xevious_im1_irq: | $0038
		movem.l		d0-d7/a0-a6,-(a7)
		jsr				update_sprite_hw_and_other_things
		movem.l		(a7)+,d0-d7/a0-a6
		*** hack
		jsr				xevious_nmi
		rts

xevious_nmi: | $0066
		movem.l		d0-d7/a0-a6,-(a7)
		jsr				osd_read_p1_inputs
		move.b		d0,(P1_inputs)
		*jsr				osd_read_p2_inputs
		movem.l		(a7)+,d0-d7/a0-a6
		rts
				
update_sprite_hw_and_other_things: | $0096
		* copy sprites from shadow to Neo Geo
		move.w		#0,d0															| start at sprite 0
		jsr				osd_update_32_sprite_hw
		jsr				read_dipswitches_0115
		move.b		#1,(vb_semaphore_sub)
		move.b		#1,(vb_semaphore_main)
		rts
		
read_dipswitches_0115: | $0115
		jsr				osd_read_dipswitches
		move.b		d0,(dswa_0115)
		move.b		d1,(dswb_0115)
		rts
		
start: | $012E
		* zero some RAM here, including seed
		clr.w			(pseudo_random_seed)
		clr.b			(maincpu_inited)				
		* $040f setup function table in RAM
		lea				main_fn_tbl_ROM,a0
		lea				main_fn_tbl_RAM,a1
		moveq			#32-1,d7													| 32 functions to copy
1:	move.l		(a0)+,(a1)+
		dbf				d7,1b
		move.b		#1,(maincpu_inited)
		jsr				osd_ack_vblank_interrupt
		jsr				osd_enable_vblank_interrupt
		
		* fudges move me
		clr.b			(num_credits)
    move.w		#0xfff8,(scroll_delta)

restart_main_loop: | $0437
		move.b		(vb_semaphore_main),d0
		sub.b			#1,d0															| signalled?
		bne				restart_main_loop									| no, spin
		clr.b			(vb_semaphore_main)								| reset

		***
		*** The sub CPU spins waiting on vb_semaphore_sub, which is set 
		*** in the VBLANK interrupt handler at the same time
		*** as vb_sempahore_main above.
		*** Since we only have 1 processor, handle it sequentially here
		***
		jsr				xevious_sub_cpu
		***

		add.b			#1,(countup_timer_1)

		* loops through main function table
		* - A6 points to current function table entry
		lea				main_fn_tbl_RAM,a6
		moveq			#32-1,d7
main_loop: | $0447
		move.l		(a6),a0														| get jump address
		movem.l		d7/a6,-(a7)
		jsr				(a0)															| call function
		movem.l		(a7)+,d7/a6
		adda.l		#4,a6															| next table entry
		dbf				d7,main_loop

    jsr				osd_kick_wdog

    jsr				osd_kick_wdog
		bra				restart_main_loop

		.align 4			
main_fn_tbl_ROM: | $045B
		.long			main_fn_0__main_thread
		.long			main_fn_1__handle_solvalou
		.long			main_fn_2__handle_objects
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			null_fn
		.long			main_fn_30__handle_shooting
		.long			main_fn_31__handle_bombing

main_fn_0__main_thread: | $049B
		jsr zero_share1
		jsr				fill_fg_rams_with_0x24
		jsr				zero_bg_rams
		jsr				init_high_score_table
		move.b		#1,(scroll_disabled)
		move.w		#2,(attract_mode_stage)
		jsr				save_PC_to_fn_tbl_and_ret

attract_mode_main_loop: | $04D6
		move.w		(attract_mode_stage),d0
		sub.w			#1,d0
		lsl.w			#2,d0
		movea.l		(attract_mode_jump_tbl,pc,d0.w),a0
		jmp				(a0)
		rts

		.align 4
attract_mode_jump_tbl: | $0C38*
		.long			attract_mode_gameplay
		.long			attract_mode_title_screen
		.long			attract_mode_gameplay
		.long			attract_mode_high_score_table

zero_share1: | $06E1
		* - does main_2_fn tables, main_30_fn_tbl and object tables
		lea				obj_tbl,a0
		move.w		#32*64/4-1,d7
1:	clr.l			(a0)+
		dbf				d7,1b
		rts
		
flash_insert_coin_and_check_credits: | $04E3
		jsr				display_insert_coin_flashing
check_credits: | $04E6
		tst.b			(num_credits)
		beq				9f		
coined_up:		
		jsr				zero_obj_state_tbl
		clr.w			(attract_mode_stage)
		move.b		#1,(scroll_disabled)
		jsr				fill_fg_rams_with_0x24
		jsr				zero_bg_rams
		jsr				display_push_start_button
		jsr				display_all_scores
		jsr				display_copyright_msgs
		jsr				display_xevious_logo_flashing
		jsr				save_PC_to_fn_tbl_and_ret
*
*	loop here waiting for 1P or 2P start button
*
		jsr				display_credits		
		jsr				display_1_only_or_1_2_players
		tst.b			(start_pressed)
		beq				9f
		move.b		#1,(is_real_game)
		clr.b			(curr_player)
		clr.b			(start_pressed)
		lea				curr_player_score_lsb,a0
		clr.b			(a0)+
		clr.b			(a0)+
		clr.b			(a0)+
		lea				starting_solvalou_tbl,a0
		moveq			#0,d0
		move.b		(dswa_0115),d0
		lsr.b			#5,d0
		and.b			#3,d0																| lives setting
		move.b		(d0.w,a0),d0												| lives		
		move.b		d0,(curr_player_solvalou_left)
		move.w		#OPT_START_AREA-1,(area)
		clr.w			(enemy_AI_level)
		moveq			#0,d0
		move.b		(dswa_0115),d0
		lsr.b			#5,d0
		and.b			#3,d0																| lives setting
		eori.b		#3,d0																| +ve logic
		beq				1f
		move.b		#1,d0
1:	lsl.w			#2,d0
		lea				first_bonus_life_tbls,a0
		movea.l		(a0,d0.w),a0
		move.b		(dswa_0115),d0
		not.b			d0
		lsr.b			#2,d0
		and.w			#7,d0
		lsl.w			#1,d0
		lea				(a0,d0.w),a0												| get entry
		*... boring
		move.b		(dswa_0115),d0
		* ... more boring		
		tst.b			(two_player_game)
		beq				main_gameplay_loop
		
main_gameplay_loop: | $0593
		sub.b			#1,(curr_player_solvalou_left)
		move.w		(area),d0
		lea				area_offset_in_map_tbl,a0
		move.b		(a0,d0.w),(area_offset_in_map)
		move.w		#0xd00,(scroll_cntr)
		lea				area_object_tbl_tbl,a0
		lsl.w			#2,d0															| offset 4 area in table
		move.l		(a0,d0.w),(area_obj_ptr)					| init area object ptr
		***
		jsr				fill_fg_rams_with_0x24
		jsr				fill_bg_with_0x88
		jsr				display_all_scores
		jsr				display_solvalou_left
		clr.b			(scroll_disabled)
		jsr				save_PC_to_fn_tbl_and_ret
		sub.b			#1,(countdown_timer_1)
		beq				1f
		rts
1:  jsr				wipe_player_start_msgs
		jsr				save_PC_to_fn_tbl_and_ret
		tst.b			(scroll_disabled)
		beq				9f
		jsr				fill_bg_with_0x88
		move.b		#64,(countdown_timer_1)
		move.b		(scroll_cntr),d0									| MSB
		sub.b			#14,d0
		cmp.b			#54,d0
		bcc				2f
2:		
9:	rts

zero_obj_state_tbl: | $06F0
		movea.l		#obj_tbl,a5
		moveq			#32-1,d7													| 64/2=32 objects
1:	clr.w			(_STATE,a5)												| state,bank
		adda.w		#32,a5														| next object
		dbf				d7,1b
		movea.l		#obj_tbl+_OBJSIZE*0x3A,a5					| flying enemies
		moveq			#6,d7															| fixing a bug - was 3
2:	clr.w			(_STATE,a5)												| state,bank
		adda.w		#32,a5														| next object
		dbf				d7,2b
		rts
		
fill_fg_rams_with_0x24: | $070D
		moveq			#0,d0															| video offset
		move.w		#0x800-1,d7												| length
		move.w		#0x24,d1													| fg_attrib
1:	jsr				osd_w_fg_colorram
		add.w			#1,d0
		dbf				d7,1b
		moveq			#0,d0															| video offset
		move.w		#0x800-1,d7												| length
		move.w		#0x24,d1													| fg_tile
2:	jsr				osd_w_fg_videoram
		add.w			#1,d0															| next offset
		dbf				d7,2b
		rts

zero_bg_rams: | $072A
		move.w		#0,d0															| offset
		move.w		#3,d1															| colour
		move.w		#0x800-1,d7
1:	jsr				osd_w_bg_colorram
		add.w			#1,d0
		dbf				d7,1b
		move.w		#0,d0															| offset
		move.w		#0,d1															| tile
		move.w		#0x800-1,d7
2:	jsr				osd_w_bg_videoram
		add.w			#1,d0
		dbf				d7,2b
		rts

fill_bg_with_0x88: | $0747
		move.w		#0,d0															| offset
		move.w		#0,d1															| colour
		move.w		#0x800-1,d7
1:	jsr				osd_w_bg_colorram
		add.w			#1,d0
		dbf				d7,1b
		move.w		#0,d0															| offset
		move.w		#0x88,d1													| tile
		move.w		#0x1c-1,d7
2:	jsr				osd_w_bg_videoram
		add.w			#1,d0
		add.w			#1,d1
		dbf				d7,2b
		lea				bg_videoram,a0
		move.w		#0x7e4-1,d7
		moveq			#0,d1
3:	move.b		(a0)+,d1
		jsr				osd_w_bg_videoram
		add.w			#1,d0
		dbf				d7,3b
		rts

wipe_player_start_msgs: | $07B7
		move.w		#0x1217,d0												| screen col,row
		move.w		#10,d7														| length
		move.w		#0x24,d1													| tile
		moveq			#BANK_FG_VIDEORAM,d2
		jsr				display_char_B_times
		move.w		#0x1019,d0												| screen col,row
		move.w		#6,d7															| length
		move.w		#0x24,d1													| tile
		moveq			#BANK_FG_VIDEORAM,d2
		jsr				display_char_B_times
		move.w		#16,d7														| length
		move.w		#0x151B,d0												| screen col,row
		move.w		#0x24,d1													| tile
		moveq			#BANK_FG_VIDEORAM,d2
		jsr				display_char_B_times
		rts
				
display_copyright_msgs: | $07DC
		move.w		#0x161f,d0												| screen col,row
		lea				strCOPYRIGHT,a0
		move.w		#19,d7														| string length
		moveq			#BANK_FG_VIDEORAM,d2
		jsr				display_string
		move.w		#0x1021,d0												| screen col,row
		lea				strNAMCO,a0
		move.w		#7,d7															| string length
		jsr				display_string
		move.w		#0x1021,d0												| screen col,row
		move.w		#7,d7															| length
		move.w		#0x1a,d1													| attr
		moveq			#BANK_FG_COLORRAM,d2
		jsr				display_char_B_times
		rts

display_credits: | $0801
		move.w		#0x923,d0													| screen col,row
		lea				strCREDIT,a0
		move.w		#6,d7															| string length
		moveq			#BANK_FG_VIDEORAM,d2
		jsr				display_string
		sub.w			#0x0100,d0												| skip column
		move.b		(num_credits),d1
		lsr.b			#4,d1
		and.w			#0x0f,d1
		jsr				display_char
		move.b		(num_credits),d1
		and.w			#0x0f,d1
		bra				display_char
		
display_1_only_or_1_2_players: | $0823
		moveq			#0,d0
		move.b		(num_credits),d0
		cmp.b			#1,d0
		beq				1f
		clr.w			d0
1:	lea				one_only_one_or_two_str_tbl,a0
		lsl.w			#2,d0
		movea.l		(a0,d0.w),a0
		move.w		#0x1519,d0												| screen col,row
		move.w		#18,d7														| string length
		moveq			#BANK_FG_VIDEORAM,d2
		bra				display_string				
		
display_push_start_button: | $083C
		move.w		#0x1517,d0												| screen col, row
		lea				strPUSH_START_BUTTON,a0
		move.w		#17,d7														| string length
		moveq			#BANK_FG_VIDEORAM,d2
		bra				display_string
				
display_insert_coin_flashing: | $0881
		move.b		(countup_timer_1),d0
		move.b		d0,d1
		and.b			#0x0f,d0
		bne				9f
		lsr.b			#4,d1
		and.b			#1,d1
		beq				wipe_insert_coin
		move.w		#0x121C,d0												| offset
		lea				strINSERT_COIN,a0
		move.w		#11,d7														| string length
		move.w		#BANK_FG_VIDEORAM,d2
		bra				display_string

wipe_insert_coin: | $089E
		move.w		#0x121C,d0												| offset
		move.w		#11,d7														| string length
		move.w		#BANK_FG_VIDEORAM,d2
		move.w		#0x24,d1													| tile
		bra				display_char_B_times
				
9:	rts

display_xevious_logo_flashing: | $08AA
		move.w		#4,(bg_scroll_x_shadow)
		moveq			#BANK_BG_VIDEORAM,d2
		move.w		#0x1509,d0												| screen col,row
		lea				xevious_logo_flashing_pt1,a0
		move.w		#18,d7														| string length
		jsr				display_string
		move.w		#0x160A,d0												| screen col,row
		lea				xevious_logo_flashing_pt2,a0
		move.w		#19,d7														| string length
		jsr				display_string
		move.w		#0x150B,d0												| screen col,row
		lea				xevious_logo_flashing_pt3,a0
		move.w		#18,d7														| string length
		jsr				display_string
		move.w		#0x160C,d0												| screen col,row
		lea				xevious_logo_flashing_pt4,a0
		move.w		#19,d7														| string length
		jsr				display_string
		move.w		#0x170D,d0												| screen col,row
		lea				xevious_logo_flashing_pt5,a0
		move.w		#20,d7														| string length
		jsr				display_string
		move.w		#0x170E,d0												| screen col,row
		lea				xevious_logo_flashing_pt6,a0
		move.w		#19,d7														| string length
		jsr				display_string
		move.w		#0x170F,d0												| screen col,row
		lea				xevious_logo_flashing_pt7,a0
		move.w		#17,d7														| string length
		jsr				display_string
		move.w		#0x1510,d0												| screen col,row
		move.w		#0xf9,d1													| tile
		jsr				display_char
		moveq			#BANK_BG_COLORRAM,d2
		move.w		#0x1509,d0												| screen col,row
		move.w		#0x0D,d1													| attr
		move.w		#18,d7														| string length
		jsr				display_char_B_times
		move.w		#0x160A,d0												| screen col,row
		move.w		#0x0d,d1													| attr
		move.w		#19,d7														| string length
		jsr				display_char_B_times
		move.w		#0x150B,d0												| screen col,row
		move.w		#0x11,d1													| attr
		move.w		#2,d7															| string length
		jsr				display_char_B_times
		move.w		#0x15,d1													| attr
		move.w		#15,d7														| string length
		jsr				display_char_B_times
		move.w		#0x11,d1													| attr
		jsr				display_char
		move.w		#0x160C,d0												| screen col,row
		move.w		#0x13,d1													| attr
		move.w		#2,d7															| string length
		jsr				display_char_B_times
		move.w		#0x17,d1													| attr
		move.w		#16,d7														| string length
		jsr				display_char_B_times
		move.w		#0x13,d1													| attr
		jsr				display_char
		move.w		#0x170D,d0												| screen col,row
		move.w		#0x13,d1													| attr
		move.w		#2,d7														  | string length
		jsr				display_char_B_times
		move.w		#0x17,d1													| attr
		move.w		#16,d7														| string length
		jsr				display_char_B_times
		move.w		#0x0f,d1													| attr
		jsr				display_char
		move.w		#0x13,d1													| attr
		jsr				display_char
		move.w		#0x170E,d0												| screen col,row
		move.w		#0x13,d1													| attr
		jsr				display_char
		move.w		#0x19,d1													| attr
		move.w		#17,d7														| string length
		jsr				display_char_B_times
		move.w		#0x18,d1													| attr
		jsr				display_char
		move.w		#0x170F,d0												| screen col,row
		move.w		#0x18,d1													| attr
		move.w		#2,d7															| string length
		jsr				display_char_B_times
		move.w		#0x19,d1													| attr
		jsr				display_char
		move.w		#0x18,d1													| attr
		move.w		#14,d7														| string length
		jsr				display_char_B_times
		move.w		#0x1510,d0												| screen col,row
		move.w		#0x18,d1													| attr
		jsr				display_char
		moveq			#BANK_FG_VIDEORAM,d2
		move.w		#0x150B,d0												| screen col,row
		lea				xevious_logo_flashing_pt8,a0
		move.w		#17,d7														| string length
		jsr				display_string
		move.w		#0x130C,d0												| screen col,row
		lea				xevious_logo_flashing_pt9,a0
		move.w		#14,d7														| string length
		jsr				display_string
		move.w		#0x140D,d0												| screen col,row
		lea				xevious_logo_flashing_pt10,a0
		move.w		#16,d7														| string length
		jsr				display_string
		move.w		#0x150E,d0												| screen col,row
		lea				xevious_logo_flashing_pt11,a0
		move.w		#16,d7														| string length
		jsr				display_string
		move.w		#0x1A,d1													| red
		
set_colour_xevious_flashing_logo:
		moveq			#BANK_FG_COLORRAM,d2
		move.w		#0x150B,d0												| screen col,row
		move.w		#17,d7														| string length
		jsr				display_char_B_times
		move.w		#0x130C,d0												| screen col,row
		move.w		#14,d7														| string length
		jsr				display_char_B_times
		move.w		#0x140D,d0												| screen col,row
		move.w		#16,d7														| string length
		jsr				display_char_B_times
		move.w		#0x150E,d0												| screen col,row
		move.w		#16,d7														| string length
		bra				display_char_B_times

display_xevious_logo_yellow: | $09E8
		moveq			#BANK_FG_VIDEORAM,d2
		move.w		#0x160A,d0												| screen col,row
		lea				xevious_logo_yellow_pt1,a0
		move.w		#19,d7														| string length
		jsr				display_string
		move.w		#0x150B,d0												| screen col,row
		lea				xevious_logo_yellow_pt2,a0
		move.w		#18,d7														| string length
		jsr				display_string
		move.w		#0x150C,d0												| screen col,row
		lea				xevious_logo_yellow_pt3,a0
		move.w		#18,d7														| string length
		jsr				display_string
		move.w		#0x160D,d0												| screen col,row
		lea				xevious_logo_yellow_pt4,a0
		move.w		#19,d7														| string length
		jsr				display_string
		move.w		#0x170E,d0												| screen col,row
		lea				xevious_logo_yellow_pt5,a0
		move.w		#20,d7														| string length
		jsr				display_string
		move.w		#0x170F,d0												| screen col,row
		lea				xevious_logo_yellow_pt6,a0
		move.w		#13,d7														| string length
		jsr				display_string
		move.w		#0x1B,d1													| yellow
		move.w		#0x160A,d0												| screen col,row
		moveq			#BANK_FG_COLORRAM,d2
		move.w		#19,d7														| string length
		jsr				display_char_B_times		
		move.w		#0x150B,d0												| screen col,row
		move.w		#18,d7														| string length
		jsr				display_char_B_times		
		move.w		#0x150C,d0												| screen col,row
		move.w		#18,d7														| string length
		jsr				display_char_B_times		
		move.w		#0x160D,d0												| screen col,row
		move.w		#19,d7														| string length
		jsr				display_char_B_times		
		move.w		#0x170E,d0												| screen col,row
		move.w		#20,d7														| string length
		jsr				display_char_B_times		
		move.w		#0x170F,d0												| screen col,row
		move.w		#13,d7														| string length
		bra				display_char_B_times		
		
xevious_logo_flashing_pt8:
		.byte 0x2A, 0x51, 0x52, 0x53, 0x52, 0x54, 0x55, 0x56, 0x24, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D
    .byte 0x52
xevious_logo_flashing_pt9:
		.byte 0x5E, 0x5F, 0x2A, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A
xevious_logo_flashing_pt10:
		.byte 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A
xevious_logo_flashing_pt11:
		.byte 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x7F, 0x88, 0x89
xevious_logo_flashing_pt1:
		.byte 0xC0, 0xC1, 0xC2, 0xC3, 0xC2, 0xC4, 0xC5, 0xC1, 0xC6, 0xC7, 0xC1, 0xC8, 0xC1, 0xC9, 0xCA, 0xCB
    .byte 0xCA, 0xCC
xevious_logo_flashing_pt2:
		.byte 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC
    .byte 0xDD, 0xDE, 0xDF
xevious_logo_flashing_pt3:
		.byte 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF
    .byte 0xF0, 0xF1
xevious_logo_flashing_pt4:
		.byte 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0xA0, 0xA1
    .byte 0xA2, 0xA3, 0xA4
xevious_logo_flashing_pt5:
		.byte 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4
    .byte 0xB5, 0xB6, 0xB7, 0xB8
xevious_logo_flashing_pt6:
		.byte 0xB9, 0xBA, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBC, 0xBD, 0xBD, 0xBD, 0xBE, 0xBB, 0xBB, 0xBB
    .byte 0xBB, 0xBF, 0xF0
xevious_logo_flashing_pt7:
		.byte 0xF1, 0xF2, 0xBB, 0xF3, 0xF4, 0xF4, 0xF4, 0xF4, 0xF5, 0xF6, 0xF6, 0xF6, 0xF7, 0xF4, 0xF4, 0xF4
    .byte 0xF8
xevious_logo_yellow_pt1:
		.byte 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8D, 0x8F, 0x90, 0x87, 0x91, 0x92, 0x93, 0x94, 0x87, 0x95, 0x96
    .byte 0x97, 0x98, 0x99
xevious_logo_yellow_pt2:
		.byte 0x9A, 0x9B, 0x9C, 0x9D, 0x9C, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8
    .byte 0xA9, 0xAA
xevious_logo_yellow_pt3:
		.byte 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xA7, 0xB9
    .byte 0x9A, 0xBA
xevious_logo_yellow_pt4:
		.byte 0xAB, 0xBB, 0xAA, 0x9A, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0x9A, 0xC3, 0xAA, 0xC4, 0xC5
    .byte 0xC6, 0xC7, 0xC8
xevious_logo_yellow_pt5:
		.byte 0xAB, 0xBB, 0xC9, 0xCA, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xCB, 0xCA, 0xCA
    .byte 0xD3, 0xD4, 0xD5, 0xD6
xevious_logo_yellow_pt6:
		.byte 0xD7, 0xAA, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xD8, 0xD9, 0xD9, 0xD9, 0xDA

strINSERT_COIN: | $0B8C
		.byte 0x12, 0x17, 0x1C, 0xE, 0x1B, 0x1D, 0x24, 0xC, 0x18, 0x12, 0x17

strPUSH_START_BUTTON:                       		| "PUSH START BUTTON"
		.byte 0x19, 0x1E, 0x1C, 0x11, 0x24, 0x1C, 0x1D, 0xA, 0x1B, 0x1D, 0x24, 0xB, 0x1E, 0x1D, 0x1D, 0x18
    .byte 0x17
one_only_one_or_two_str_tbl:
		.long strONE_OR_TWO_PLAYERS
		.long strONE_PLAYER_ONLY
strONE_PLAYER_ONLY:                    					| " ONE PLAYER ONLY  "
		.byte 0x24, 0x18, 0x17, 0xE, 0x24, 0x19, 0x15, 0xA, 0x22, 0xE, 0x1B, 0x24, 0x18, 0x17, 0x15, 0x22
    .byte 0x24, 0x24
strONE_OR_TWO_PLAYERS:                    			| "ONE OR TWO PLAYERS"
		.byte 0x18, 0x17, 0xE, 0x24, 0x18, 0x1B, 0x24, 0x1D, 0x20, 0x18, 0x24, 0x19, 0x15, 0xA, 0x22, 0xE
		.byte 0x1B, 0x1C
strCREDIT:																			| "CREDIT"
		.byte 0xC, 0x1B, 0xE, 0xD, 0x12, 0x1D
strREADY:																				| "READY!"
		.byte 0x1B, 0xE, 0xA, 0xD, 0x22, 0x2C

starting_solvalou_tbl:	| $0C0A
		.byte 5, 2, 1, 3

first_bonus_life_tbls:
		.long first_bonus_life_Ks_3
    .long first_bonus_life_Ks_125
first_bonus_life_Ks_3:
		.word 0x20
    .word 0x10
    .word 0x20
    .word 0x20
    .word 0x20
    .word 0x30
    .word 0x20
    .word 0xFFFF
first_bonus_life_Ks_125:
		.word 0x20
    .word 0x10
    .word 0x10
    .word 0x20
    .word 0x20
    .word 0x20
    .word 0x20
    .word 0xFFFF

xevious_flashing_logo_colour_tbl: | $0C38
		.byte 0x1A, 0x17, 0x18, 7, 0x3A, 0x1B, 0x1F, 0x15

		.align 2

attract_mode_title_screen: | $0C48
		jsr				zero_bg_rams
		jsr				fill_fg_rams_with_0x24
		jsr				display_copyright_msgs
		jsr				display_all_scores
		jsr				display_xevious_logo_flashing
		move.b		#0x40,(countdown_timer_1)
		SET_REENTRY_ADDR_HERE
		sub.b			#1,(countdown_timer_1)
		beq				animate_sparkle_appearing
		bra				flash_insert_coin_and_check_credits
		rts

animate_sparkle_appearing: | $0C6E
		movea.l		#obj_tbl+_OBJSIZE*0x0f,a5
		move.w		#0xd60,(_X,a5)
		move.w		#0x1660,(_Y,a5)
		move.w		#0x300F,(_CODE,a5)								| code,color
		move.w		#0x0280,(_STATE,a5)								| state,attr
		clr.b			(_TIMER,a5)												| init timer
		SET_REENTRY_ADDR_HERE
		movea.l		#obj_tbl+_OBJSIZE*0x0f,a5
		add.b			#1,(_TIMER,a5)										| inc timer
		cmp.b			#0x10,(_TIMER,a5)									| expired?
		beq				animate_sparkle_moving
		move.b		(_TIMER,a5),d0
		lsr.b			#1,d0
		and.b			#7,d0
		add.b			#0x30,d0
		move.b		d0,(_CODE,a5)
		bra				flash_insert_coin_and_check_credits

animate_sparkle_moving: | $0CA9
		movea.l		#obj_tbl+_OBJSIZE*0x0f,a5
		move.b		#0x78,(_TIMER,a5)									| init timer
		SET_REENTRY_ADDR_HERE
		movea.l		#obj_tbl+_OBJSIZE*0x0f,a5
		add.b			#1,(_TIMER,a5)										| inc timer
		beq				animate_sparkle_disappearing
		move.b		(_TIMER,a5),d0
		and.b			#7,d0
		add.b			#0x38,d0
		move.b		d0,(_CODE,a5)
		add.w			#0xffe0,(_Y,a5)
		bra				flash_insert_coin_and_check_credits

animate_sparkle_disappearing: | $0CD3
		movea.l		#obj_tbl+_OBJSIZE*0x0f,a5
		move.b		#0x10,(_TIMER,a5)									| init timer
		SET_REENTRY_ADDR_HERE
		movea.l		#obj_tbl+_OBJSIZE*0x0f,a5
		sub.b			#1,(_TIMER,a5)										| inc timer
		beq				animate_flashing_logo
		move.b		(_TIMER,a5),d0
		lsr.b			#1,d0
		and.b			#7,d0
		add.b			#0x30,d0
		move.b		d0,(_CODE,a5)
		bra				flash_insert_coin_and_check_credits

animate_flashing_logo: | $0CF5
		clr.b			(countdown_timer_1)
		movea.l		#obj_tbl+_OBJSIZE*0x0f,a5
		clr.b			(_STATE,a5)		
		SET_REENTRY_ADDR_HERE
		btst			#0,(countup_timer_1)
		bne				flash_insert_coin_and_check_credits
		sub.b			#1,(countdown_timer_1)
		beq				exit_attract_mode_title_screen
		move.b		(countdown_timer_1),d0
		and.w			#7,d0
		lea				xevious_flashing_logo_colour_tbl,a0
		move.b		(d0.w,a0),d1
		jsr				set_colour_xevious_flashing_logo
		bra				flash_insert_coin_and_check_credits

exit_attract_mode_title_screen: | $0D21
		move.w		#3,(attract_mode_stage)
		SET_REENTRY_ADDR attract_mode_main_loop
		bra				flash_insert_coin_and_check_credits
								
attract_mode_gameplay: | $0D35
		moveq			#0,d0
		move.b		d0,(curr_player)
		move.b		d0,(area)
		lea				area_offset_in_map_tbl,a0
		move.b		(d0.w,a0),(area_offset_in_map)
		move.w		#0xd00,(scroll_cntr)
		lea				area_object_tbl_tbl,a0
		clr.w			d0																| area 1 (offset=0)
		move.l		(a0,d0.w),(area_obj_ptr)					| init area object ptr
		jsr				fill_fg_rams_with_0x24
		jsr				fill_bg_with_0x88
		jsr				display_all_scores
		jsr				display_copyright_msgs
		jsr				display_xevious_logo_yellow
		moveq			#0,d0
		move.b		d0,(scroll_disabled)							| enabled
		SET_REENTRY_ADDR_HERE
		tst.b			(scroll_disabled)
		bne				exit_attract_mode_gameplay
		bra				flash_insert_coin_and_check_credits

exit_attract_mode_gameplay: | $0D8C
		jsr				zero_obj_state_tbl
		add.w			#1,(attract_mode_stage)
		SET_REENTRY_ADDR attract_mode_main_loop
		bra				flash_insert_coin_and_check_credits
		
attract_mode_high_score_table: | $0DA2
		jsr				flash_logo_and_high_score_table
		move.b		#0x40,(countdown_timer_1)
		SET_REENTRY_ADDR_HERE
		move.b		(countup_timer_1),d0
		and.b			#7,d0
		bne				check_credits
		sub.b			#1,(countdown_timer_1)
		beq				exit_attract_mode_high_score_table
		bra				check_credits

exit_attract_mode_high_score_table: | $0DC4
		move.w		#1,(attract_mode_stage)
		SET_REENTRY_ADDR attract_mode_main_loop
		bra				flash_insert_coin_and_check_credits
		
* d0=offset (MSB=31-col,LSB=row), d2=bank
display_string: | $141F
		sub.w			#1,d7
		moveq			#0,d1
1:	move.b		(a0)+,d1
		jsr				display_char
		dbf				d7,1b		
		rts

display_all_scores: | $0DD5
		jsr				display_high_score
		jsr				display_player_scores
		bra				display_high_score_text

* calculates ratio between 2 differences
* d0=larger diff, d1=smaller diff
* returns d1=16-bit ratio 0-256/256
calc_dX_dY_ratio: | $0E23
		lsl.w			#8,d1															| shift smaller diff into high byte
		move.b		d0,d2															| save larger diff
		moveq			#0,d0
		moveq			#16-1,d7
1:	lsl.w			#1,d1
		roxl.b		#1,d0
		bcs				2f
		cmp.b			d2,d0
		bcs				3f
2:	sub.b			d2,d0
		add.w			#1,d1
3:	dbf				d7,1b
		rts

* d0=xdiff, d1=ydiff, ret: d2=index
get_index_for_angle: | $0EB2
		movem.l		d0-d1,-(a7)
		jsr				get_index_for_quadrant_angle
		movem.l		(a7)+,d0-d1
		btst.b		#7,d0															| xdiff -ve?
		beq				1f																| no, skip
		not.b			d2
		add.b			#0x81,d2													| adjust for polarity
1:	btst.b		#7,d1															| ydiff -ve?
		beq				9f																| no, skip
		neg.b			d2																| adjust for polarity
9:	rts

* d0=xdiff, d1=ydiff
get_index_for_quadrant_angle: | $0CE4
		tst.b			d1
		bpl				1f
		neg.b			d1
1:	tst.b			d0
		bpl				2f
		neg.b			d0
2:	cmp.b			d1,d0															| ydiff > xdiff?
		bcs				swap_for_large_small
		
get_index_for_abs_angle: | $0ECD
		jsr				calc_dX_dY_ratio
		lsr.w			#3,d1
		movea.l		#octant_angle_tbl,a2							| base address
		move.b		(a2,d1.w),d2											| get_entry
		rts

swap_for_large_small: | $0EDE
		exg				d0,d1
		jsr				get_index_for_abs_angle
		not.b			d2
		add.b			#0x41,d2
		rts

octant_angle_tbl: | $0EE7
		.byte 0, 1, 3, 4, 5, 6, 8, 9, 0xA, 0xB, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12
    .byte 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1D, 0x1E, 0x1F, 0x1F
    .byte 0x20
		.align 2
		
*** TEST ME PROPERLY!!!		
* returns in d0
pseudo_random_gen: | $0F4b
	  moveq			#0,d0
		move.b		(pseudo_random_seed+1),d0					| LSB
		mulu			#5,d0
		add.b			#1,d0
		move.b		d0,(pseudo_random_seed+1)					| save LSB
		moveq			#0,d1
		move.b		(pseudo_random_seed),d1						| MSB
		and.b			#0x84,d1
		beq				1f
		eor.b			#0x84,d1
		bne				2f
1:	ori				#(1<<4),ccr												| set extend
2:	move.b		(pseudo_random_seed),d1						| MSB again
		addx.b		d1,d1
		move.b		d1,(pseudo_random_seed)						| save MSB
		add.b			d1,d0															| rnd number
		rts
		
display_solvalou_left: | $0F68
		moveq			#0,d7
		move.b		(curr_player_solvalou_left),d7
		bne				1f
		rts
1:	move.w		#0x25,d1													| tile (solvalou icon)
		move.w		#0x1B23,d0												| screen col,row
		movem.w		d0/d7,-(a7)
		moveq			#BANK_FG_VIDEORAM,d2
		jsr				display_char_B_times
		movem.w		(a7)+,d0/d7
		moveq			#BANK_FG_COLORRAM,d2
		move.w		#0x2A,d1													| colour
		bra				display_char_B_times
		
flash_logo_and_high_score_table: | $1000
		jsr				fill_fg_rams_with_0x24
		jsr				zero_bg_rams
		jsr				display_xevious_logo_flashing
		bra				loc_1011

loc_1011: | $1011
		jsr				display_player_scores
		jsr				display_high_score_text
		jsr				display_high_score
		move.w		#0x1615,d0												| screen col,row
		lea				strBest_Five_WARRIORS,a0
		moveq			#BANK_FG_VIDEORAM,d2
		move.w		#18,d7														| string length
		jsr				display_string
		move.w		#0x1918,d0												| screen col,row
		lea				str1st,a0
		move.w		#3,d7															| string length
		jsr				display_string
		move.w		#0x1418,d0												| screen col,row
		lea				high_score_1st_msb,a0
		jsr				display_score
		move.w		#0x0B18,d0												| screen col,row
		lea				high_score_1st_name,a0
		move.w		#10,d7
		jsr				display_string
		move.w		#0x191A,d0												| screen col,row
		lea				str2nd,a0
		move.w		#3,d7															| string length
		jsr				display_string
		move.w		#0x141A,d0												| screen col,row
		lea				high_score_2nd_msb,a0
		jsr				display_score
		move.w		#0x0B1A,d0												| screen col,row
		lea				high_score_2nd_name,a0
		move.w		#10,d7
		jsr				display_string
		move.w		#0x191C,d0												| screen col,row
		lea				str3rd,a0
		move.w		#3,d7															| string length
		jsr				display_string
		move.w		#0x141C,d0												| screen col,row
		lea				high_score_3rd_msb,a0
		jsr				display_score
		move.w		#0x0B1C,d0												| screen col,row
		lea				high_score_3rd_name,a0
		move.w		#10,d7
		jsr				display_string
		move.w		#0x191E,d0												| screen col,row
		lea				str4th,a0
		move.w		#3,d7															| string length
		jsr				display_string
		move.w		#0x141E,d0												| screen col,row
		lea				high_score_4th_msb,a0
		jsr				display_score
		move.w		#0x0B1E,d0												| screen col,row
		lea				high_score_4th_name,a0
		move.w		#10,d7
		jsr				display_string
		move.w		#0x1920,d0												| screen col,row
		lea				str5th,a0
		move.w		#3,d7															| string length
		jsr				display_string
		move.w		#0x1420,d0												| screen col,row
		lea				high_score_5th_msb,a0
		jsr				display_score
		move.w		#0x0B20,d0												| screen col,row
		lea				high_score_5th_name,a0
		move.w		#10,d7
		bra				display_string

strBest_Five_WARRIORS:
		.byte 0xB, 0x3A, 0x48, 0x49, 0x24, 0xF, 0x3E, 0x4B, 0x3A, 0x24, 0x20, 0xA, 0x1B, 0x1B, 0x12, 0x18
    .byte 0x1B, 0x1C
str1st:
		.byte 1, 0x48, 0x49
str2nd:
		.byte 2, 0x43, 0x39
str3rd:
		.byte 3, 0x47, 0x39
str4th:
		.byte 4, 0x49, 0x3D
str5th:
		.byte 5, 0x49, 0x3D
		
		.align 2

init_high_score_table: | $10D9
		lea				ROM_high_score_tbl,a0
		lea				high_score_1st_lsb,a1
		moveq			#0x50-1,d7
1:	move.b		(a0)+,(a1)+
		dbf				d7,1b
		lea				ROM_high_score,a0
		lea				RAM_high_score,a1
		moveq			#3,d7
2:	move.b		(a0)+,(a1)+
		dbf				d7,2b
		rts

ROM_high_score: 
	.byte 0, 0x40, 0
ROM_high_score_tbl: | $10F0
	.byte 0, 0x40, 0
  .byte 0x16, 0x50, 0x17, 0x36, 0x40, 0x36, 0x42, 0x4A, 0x47, 0x36
  .byte 0, 0, 0
 	.byte 0, 0x35, 0
 	.byte 0xE, 0x3E, 0x47, 0x47, 0x4E, 0x24, 0x16, 0x44, 0x4A, 0x50
  .byte 0, 0, 0
  .byte 0, 0x30, 0
  .byte 0xE, 0x4B, 0x3A, 0x4F, 0x44, 0x44, 0x24, 0xE, 0x43, 0x39
  .byte 0, 0, 0
  .byte 0, 0x25, 0
  .byte 0x1C, 0x50, 0x18, 0x40, 0x36, 0x42, 0x44, 0x49, 0x44, 0x24
  .byte 0, 0, 0
  .byte 0, 0x20, 0
  .byte 0x1C, 0x50, 0x14, 0x44, 0x3F, 0x3E, 0x42, 0x36, 0x24, 0x24
  .byte 0, 0, 0
	.align 2
								
display_high_score_text: | $12EF
		move.w		#0x1200,d0												| screen col,row
		lea				strHIGH_SCORE,a0
		move.w		#10,d7														| string length
		moveq			#BANK_FG_VIDEORAM,d2
		jsr				display_string
		move.w		#0x1200,d0												| screen col,row
		move.w		#10,d7														| string length
		move.w		#0x1f,d1													| attr
		moveq			#BANK_FG_COLORRAM,d2
		jsr				display_char_B_times
		rts

* a1=1 byte beyond score
set_score_to_999999: | $1309
		moveq			#3-1,d7
1:	move.b		#0x99,-(a1)
		dbf				d7,1b
		rts
				
display_player_scores: | $1427
		moveq			#BANK_FG_VIDEORAM,d2
		move.w		#0x1B01,d0												| screen col,row
		move.w		#0x0801,d3
		tst.b			(curr_player)
		beq				1f
		exg				d0,d3
1:	move.w		d3,-(a7)
		lea				curr_player_score_msb,a0
		jsr				display_score
		move.w		(a7)+,d0
		tst.b			(two_player_game)
		beq				loc_1459
		lea				other_player_score_msb,a0
		* fall thru to display score

* a0=score(ptr MSB)				
display_score: | $1447
		move.w		#3-1,d7														| bytes in score
		move.w		#5,d6															| pad bytes
		jsr				display_bcd_value
		clr.b			d1
* fall thru to display a trailing zero
				
* d0=coffset (MSB=31-col,LSB=row) d1=char, d2=bank
* col is updated
display_char: | $144F
		movem.l		d0/d2/a0,-(a7)
		jsr				calc_screen_addr
		lsl.w			#2,d2
		movea.l		(osd_w_video_bank_tbl,pc,d2.w),a0
		jsr				(a0)
	  movem.l		(a7)+,d0/d2/a0
		sub.w			#0x0100,d0												| next column
		rts

loc_1459:
		move.w		#0x24,d1
		move.w		#7,d7
		* fall thru to display 7 blanks

* d0=offset (MSB=31-col,LSB=row) d1=char, d2=bank, d7=B
display_char_B_times: | $145D
		sub.w			#1,d7
1:	jsr				display_char
		dbf				d7,1b
		rts
		
		.align 4
osd_w_video_bank_tbl:
		.long			osd_w_fg_colorram
		.long			osd_w_bg_colorram
		.long			osd_w_fg_videoram
		.long			osd_w_bg_videoram

display_high_score: | $1463
		move.w		#BANK_FG_VIDEORAM,d2
		move.w		#0x1101,d0												| col,row
		lea				high_score_msb,a0
		bra				display_score
		rts

* d7=bytes, d6=pads
display_bcd_value: | $146D
		move.b		(a0),d1														| byte
		lsr.b			#4,d1															| high nibble
		bne				1f
		move.b		#0x24,d1													| space
		sub.b			#1,d6															| dec pads
		bpl				2f
		clr.b			d1																| 0
1:	clr.b			d6																| clear pad bytes
2:	move.l		d6,-(a7)
		jsr				display_char
		move.l		(a7)+,d6
		move.b		(a0),d1														| byte
		and.b			#0x0f,d1													| low nibble
		bne				3f
		move.b		#0x24,d1													| space
		sub				#1,d6															| dec pad bytes
		bpl				4f
		clr.b			d1																| 0
3:	clr.b			d6																| clear pad bytes
4:	move.l		d6,-(a7)
		jsr				display_char
		move.l		(a7)+,d6
		suba.l		#1,a0
		dbf				d7,display_bcd_value
		rts

* d0=offset (MSB=31-col,LSB=row)
* d6 (trashed)
calc_screen_addr: | $0038
		sub.w			#0x0100,d0
		move.w		d0,d6
		add.w			#4,d6
		and.w			#0x003f,d6
		add.w			#0x0300,d0
		lsr.w			#2,d0
		and.w			#0x07C0,d0
		or.w			d6,d0
		rts

main_fn_1__handle_solvalou: | $14BB
		jsr				save_PC_to_fn_tbl_and_ret
		tst.b			(scroll_disabled)
		bne				9f
		movea.l		#obj_tbl+_OBJSIZE*0x22,a5					| crosshairs
		move.w		#0x0280,(_STATE,a5)
		move.w		#0x1420,(_CODE,a5)
		movea.l		#obj_tbl+_OBJSIZE*0x23,a5					| solvalou
		move.w		#0x0200,(_STATE,a5)
		move.w		#0x5001,(_CODE,a5)
		move.w		#0x2500,(_X,a5)
		move.w		#0x0F00,(_Y,a5)
		jsr				save_PC_to_fn_tbl_and_ret
		tst.b			(scroll_disabled)
		bne				main_fn_1__handle_solvalou
		tst.w			(attract_mode_stage)
		bne				update_solvalou
		**
update_solvalou:
		jsr				handle_solvalou_inputs
		jsr				handle_solvalou_sprite_XY
		jsr				handle_crosshairs
		jsr				check_solvalou_hit		
9:	rts

handle_solvalou_sprite_XY: | $15C1
		movea.l		#obj_tbl+_OBJSIZE*0x23,a5					| solvalou
		move.w		(_X,a5),d0
		move.b		(_dX,a5),d1
		ext.w			d1
		lsl.w			#1,d1
		add.w			d1,d0
		cmp.w			#144*32,d0												| too small?
		bcc				1f																| no, skip
		move.w		#144*32,d0												| set to 144
1:	cmp.w			#304*32,d0												| too big?
		bcs				2f																| no, skip
		move.w		#304*32,d0												| set to 304
2:	move.w		d0,(_X,a5)
		move.w		(_Y,a5),d0
		move.b		(_dY,a5),d1
		ext.w			d1
		lsl.w			#1,d1
		add.w			d1,d0
		cmp.w			#16*32,d0													| too small?
		bcc				3f																| no, skip
		move.w		#16*32,d0													| set to 16
3:	cmp.w			#224*32,d0												| too big?
		bcs				4f																| no, skip
		move.w		#224*32,d0												| set to 224
4:	move.w		d0,(_Y,a5)				
		rts

handle_solvalou_inputs: | $15FE
		tst.w			(attract_mode_stage)
		bne				gen_rnd_dir
		movea.l		#P1_inputs,a0
		moveq			#0,d1
		move.b		(curr_player),d1
		move.b		(a0,d1.w),d0											| read inputs
		and.w			#0x0f,d0													| joystick only
set_solvalou_dXdY:
		movea.l		#dir_delta_tbl,a1
		lsl.w			#1,d0															| entry offset
		movea.l		#obj_tbl+_OBJSIZE*0x23,a5
		move.b		(a1,d0.w),(_dX,a5)
		move.b		(1,a1,d0.w),(_dY,a5)
		rts

gen_rnd_dir: | $1622
		move.b		(countup_timer_1),d0
		and.b			#0x0f,d0
		beq				1f
		rts
1:	jsr				pseudo_random_gen
		and.b			#0x0f,d0
		cmp.b			#9,d0
		bcc				1b
		bra				set_solvalou_dXdY

dir_delta_tbl: | $1633
	  .byte 0xF0, 0																| U
    .byte 0xF0, 0xF0														| U+R
    .byte 0, 0xE8																| R
    .byte 0x10, 0xF0														| D+R
    .byte 0x10, 0																| D
    .byte 0x10, 0x10														| D+L
    .byte 0, 0x18																| L
    .byte 0xF0, 0x10														| U+L
    .byte 0, 0																	| none/invalid

check_solvalou_hit: | $1645
		rts

handle_crosshairs: | $16B8
		movea.l		#obj_tbl+_OBJSIZE*0x21,a5					| bomb
		move.b		(_STATE,a5),d0
		cmp.b			#2,d0															| active?
		beq				1f																| yes, skip
		moveq			#1,d2
1:	add.b			#31,d2														| save colour
		moveq			#0,d7
		move.b		(countup_timer_1),d1
		and.b			#4,d1															| time to check bombed objects?
		beq				update_crosshair									| no, skip
		*** THIS IS NEO-GEO SPECIFIC
		move.w		(scb3_shadow+2*2*0x22),d3					| crosshairs spriteY
		move.w		(scb4_shadow+2*2*0x22),d4					| crosshairs spriteX
		movea.l		#scb3_shadow+2*2*0x02,a3
		movea.l		#scb4_shadow+2*2*0x02,a4
		movea.l		#obj_tbl+_OBJSIZE*0x02,a5					| ground_based objects
		moveq			#14-1,d7													| 14 object to check
2:	jsr				check_targeted_ground_object
		bcs				set_active_crosshair_colour
		adda.l		#2*2,a3
		adda.l		#2*2,a4
		adda.l		#_OBJSIZE,a5
		dbf				d7,2b
		moveq			#0,d7															| to match Z80 exit condition
		
update_crosshair: | $16E8
		movea.l		#obj_tbl+_OBJSIZE*0x22,a5					| crosshairs
		add.b			d7,d2															| calc colour
		move.b		d2,(_COLOUR,a5)		
		movea.l		#obj_tbl+_OBJSIZE*0x23,a4					| solvalou
		move.w		(_X,a4),d0
		add.w			#0xf400,d0
		move.w		d0,(_X,a5)												| crosshair spriteX
		move.w		(_Y,a4),(_Y,a5)										| crosshair spriteY
		rts

set_active_crosshair_colour: | $16FE
		moveq			#9,d7
		bra				update_crosshair

loc_1702:
		andi.b		#0xfe,ccr													| clear carry
		rts
		
* d3=crosshairs spriteY[7:0], d4=crosshairs spriteX[8:1]
* a3=scb3(object) a4=scb4(object) a5=obj_tbl(object)
check_targeted_ground_object: | $1704
		cmp.b			#2,(_STATE,a5)										| active?
		bne				loc_1702
		*** THIS IS NEO-GEO SPECIFIC
		move.w		(a3),d0														| object spriteY shadow
		sub.w			d3,d0															| compare object spriteY
		lsr.w			#7,d0															| 7:0
		sub.b			#0x0a,d0
		add.b			#0x14,d0
		bcc				9f
		move.w		(a4),d0														| object spriteX shadow
		sub.w			d4,d0
		lsr.w			#8,d0															| 8:1
		sub.b			#5,d0
		add.b			#0x0a,d0
9:	rts
		
main_fn_30__handle_shooting: | $1727
		jsr				save_PC_to_fn_tbl_and_ret
		tst.b			(scroll_disabled)
		bne				9f
		move.b		#0x14,(shot_timer_init_value)
		move.b		#0x01,(shot_timer)
		clr.b			(shot_flag)
* insert function to handle 3 shots
		movea.l		#main_fn_30_shot_fn,a0
		move.l		a0,(main_30_fn_tbl)
		movea.l		#main_30_fn_tbl,a0
		lea				(4,a0),a1
		moveq			#2-1,d7
1:	move.l		(a0)+,(a1)+
		dbf				d7,1b
		jsr				save_PC_to_fn_tbl_and_ret
		tst.b			(scroll_disabled)
		bne				main_fn_30__handle_shooting
		tst.b			(solvalou_exploding)
		bne				2f
		jsr				handle_shooting
2:	movem.l		a6,-(a7)
		movea.l		#main_30_fn_tbl,a6
		movea.l		#obj_tbl+_OBJSIZE*0x24,a5
		moveq			#3-1,d7
3:	movea.l		(a6),a0
		jsr				(a0)
		adda.l		#4,a6
		adda.l		#_OBJSIZE,a5
		dbf				d7,3b
		movem.l		(a7)+,a6
		clr.b			(shot_flag)
9:	rts

handle_shooting: | $1772
		tst.b			(attract_mode_stage)
		bne				gen_rnd_shot
		movea.l		#P1_inputs,a1
		btst.b		#5,(a1)
loc_1787:
		movea.l		#shot_timer,a0
		beq				process_button_1
		move.b		#1,(a0)														| reset shot timer
		rts

process_button_1:
		sub.b			#1,(a0)														| shot timer expired?
		bne				9f
		move.b		(shot_timer_init_value),(a0)			| re-init shot timer
		move.b		#1,(shot_flag)										| shooting
9:	rts

gen_rnd_shot: | $179B
		jsr				pseudo_random_gen
		and.b			#0x0f,d0
		bra				loc_1787
				
main_fn_30_shot_fn: | $17A2
		jsr				save_PC_to_fn_tbl_and_ret
		move.b		(shot_flag),d0
		sub.b			#1,d0
		bne				9f
		move.b		d0,(shot_flag)										| clr.b?
* init shot
		move.b		#2,(_STATE,a5)
		move.b		#2,(_EXTRA,a5)
		move.w		#0xffa0,(_dX,a5)
		* (TBD) start shot sound
		movea.l		#obj_tbl+_OBJSIZE*0x23,a0					| solvalou
		move.w		(_X,a0),(_X,a5)										| copy spriteX to shot
		move.w		(_Y,a0),(_Y,a5)										| copy spriteY to shot
		jsr				save_PC_to_fn_tbl_and_ret
* update shot
		jsr				check_flying_enemies_shot
		move.b		(countup_timer_1),d0
		move.b		d0,d1
		and.b			#1,d1
		lsl.b			#3,d1															| toggle flip
		add.b			#0x80,d1													| bank=1		
		move.b		d1,(_ATTR,a5)
		move.b		d0,d1															| timer (again)
		lsr.b			#1,d1
		and.b			#1,d1
		add.b			#0x23,d1
		move.b		d1,(_COLOUR,a5)
		lsr.b			#2,d0															| timer (again)
		and.b			#1,d0
		add.b			#0x16,d0
		move.b		d0,(_CODE,a5)
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				shot_destroyed
		jsr				move_shot
		cmp.w			#0x2800,d0												| (MSB=40) off-screen?
		bcs				9f																| no, return
loc_1809:
		clr.b			(_STATE,a5)
		bra				main_fn_30_shot_fn
9:	rts

* this only happens when the shot hits a bacura
shot_destroyed: | $180D
		move.b		#24,(_dX,a5)											| reflected
		move.b		#0x23,(_COLOUR,a5)
		move.b		#0xff,(_TIMER,a5)
		jsr				save_PC_to_fn_tbl_and_ret
		add.b			#1,(_TIMER,a5)
		move.b		(_TIMER,a5),d0
		cmp.b			#8,d0															| time to deactivate?
		beq				loc_1809													| yes, go
		move.b		d0,d1
		lsr.b			#1,d1
		and.b			#3,d1
		add.b			#0x18,d1
		move.b		d1,(_CODE,a5)
		and.b			#1,d0
		lsl.b			#3,d0
		add.b			#0x80,d0
		move.b		d0,(_ATTR,a5)											| bank,yflip
		
move_shot: | $184B
		move.w		(_dX,a5),d0
		lsl.w			#1,d0
		add.w			(_X,a5),d0												| update spriteX
		move.w		d0,(_X,a5)												| need a copy in d0
		rts
		
gen_random_bomb_press: | $185B
		jsr				pseudo_random_gen
		bne				9f
		bra				init_bombing
9:	rts

main_fn_31__handle_bombing: | $1862
		jsr				save_PC_to_fn_tbl_and_ret
		tst.b			(scroll_disabled)
		bne				9f
		tst.b			(solvalou_exploding)
		bne				9f
		tst.b			(attract_mode_stage)							| in attract mode?
		bne				gen_random_bomb_press							| yes, go
* read BUTTON2 from h/w
		btst.b		#0,(dswb_0115)										| bomb pressed?
		bne				9f																| no, return
		jsr				save_PC_to_fn_tbl_and_ret

init_bombing: | $188C
		movea.l		#obj_tbl+_OBJSIZE*0x20,a0					| bomb target object
		cmp.b			#1,(_STATE,a0)										| idle?
		bne				9f																| no, return
		jsr				save_PC_to_fn_tbl_and_ret
		movea.l		#obj_tbl+_OBJSIZE*0x23,a2					| solvalou object
		movea.l		#obj_tbl+_OBJSIZE*0x21,a1					| bomb object
		movea.l		#obj_tbl+_OBJSIZE*0x20,a0					| bomb target object
		move.w		(_X,a2),d0												| solvalou spriteX
		move.w		d0,(_X,a1)												| copy to bomb
		add.w			#0xf400,d0												| adjust for bomb target
		move.w		d0,(_X,a0)												| copy to bomb target
		move.w		(_Y,a2),d0												| solvalou spriteY
		move.w		d0,(_Y,a1)												| copy to bomb
		move.w		d0,(_Y,a0)												| copy to bomb target
		clr.w			(_dX,a1)													| bomb dX
		clr.b			(_TIMER,a1)
		clr.b			(_TIMER1,a1)
		* (TBD) start bomb sound
		move.w		#0x0280,d0												| state=2, bank=1
		move.w		d0,(_STATE,a1)										| bomb
		move.w		d0,(_STATE,a0)										| bomb target
		move.b		#0x1c,(_CODE,a1)									| bomb
		move.w		#0x1422,(_CODE,a0)								| bomb target code, colour
		jsr				save_PC_to_fn_tbl_and_ret
* bomb active here
		movea.l		#obj_tbl+_OBJSIZE*0x21,a1					| bomb object
		add.b			#1,(_TIMER,a1)										| inc timer
		move.b		(_TIMER,a1),d0
		and.b			#7,d0															| time to animate?
		bne				1f																| no, skip
		move.b		(_TIMER1,a1),d0
		cmp.b			#2,d0															| time to animate?
		beq				1f																| no, skip
		add.b			#1,d0															| inc timer
		move.b		d0,(_TIMER1,a1)										| update timer
		add.b			#1,(_CODE,a1)											| animate sprite
1:	move.b		(_TIMER,a1),d0
		lsr.b			#2,d0
		and.b			#3,d0
		add.b			#0x25,d0
		move.b		d0,(_COLOUR,a1)										| bomb colour
		sub.w			#2,(_dX,a1)
		move.w		(_dX,a1),d0
		lsl.w			#1,d0															| x2
		add.w			d0,(_X,a1)												| add new dX
		movea.l		#obj_tbl+_OBJSIZE*0x20,a0					| bomb target
		move.w		(scroll_delta),d0
		neg.w			d0
		lsl.w			#1,d0
		add.w			d0,(_X,a0)												| scroll bomb target
		jsr				check_bomb_finished
		bcs				9f
		bra				main_fn_31__handle_bombing
9:	rts

check_bomb_finished: | $190B
		movea.l		#obj_tbl+_OBJSIZE*0x20,a0					| bomb target
		movea.l		#obj_tbl+_OBJSIZE*0x21,a1					| bomb object
		move.w		(_X,a0),d0
		sub.w			(_X,a1),d0												| same?
		bcs				9f																| no, return
		* (TBD) stop bomb sound
		jsr				handle_bombed_obj_and_award_points
		clr.b			(_STATE,a1)												| bomb object
		clr.b			(_STATE,a0)												| bomb target
9:	rts

check_flying_enemies_shot: | $1928
		rts
		
handle_bombed_obj_and_award_points: | $19EE
		*** THIS IS NEOGEO SPECIFIC
		movem.l		a0/a5,-(a7)
		move.w		(scb3_shadow+2*2*0x20),d3					| bomb target spriteY
		move.w		(scb4_shadow+2*2*0x20),d4					| bomb target spriteX
		movea.l		#obj_tbl,a5
		movea.l		#scb3_shadow,a3
		movea.l		#scb4_shadow,a4
		moveq			#16-1,d7
1:	jsr				check_object_on_target						| on target?
		bcc				loc_1A2C													| no, skip	
		move.b		#3,(_STATE,a5)										| state=hit
		tst.b			(attract_mode_stage)
		bne				loc_1A2C
		moveq			#0,d0
		move.b		(_PTS,a5),d0
		movea.l		#object_value_tbl,a0
		lea				(a0,d0.w),a0											| get entry for points
		*** optimise what gets pushed!
		movem.l		d0-d7/a0-a6,-(a7)	
		jsr				add_to_score
		movem.l		(a7)+,d0-d7/a0-a6
loc_1A2C:
		adda.l		#_OBJSIZE,a5
		adda.l		#2*2,a3
		adda.l		#2*2,a4
		dbf				d7,1b
		movem.l		(a7)+,a0/a5
		rts

loc_1A34:
		and.b			#0xfe,ccr													| clear C flag
		rts
		
check_object_on_target: | $1A3D
		cmp.b			#2,(_STATE,a5)										| active?
		bne				loc_1A34
		move.w		d3,d0															| bomb target spriteY
		sub.w			(a3),d0														| compare object spriteY
		lsr.w			#7,d0															| 7:0
		sub.b			#0x0a,d0
		add.b			#0x14,d0
		bcc				9f
		move.w		d4,d0															| bomb target spriteX
		sub.w			(a4),d0														| compare object spriteX
		lsr.w			#8,d0															| 8:1
		sub.b			#5,d0
		add.b			#0x0a,d0
9:	rts
		
* Barra (pyrmaid) 100 pts
handle_1E_Barra: | $1A60
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)
		move.b		#7,(_COLOUR,a5)
		move.b		#0x17,(_CODE,a5)
		move.b		#15,(_PTS,a5)											| 100 pts
		jsr				save_PC_to_fn_tbl_and_ret
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				handle_bomb_explosion
		jsr				scroll_sprite_X
		bra				add_obj_handler

* Garu Barra (Big) 300 pts
handle_20_Garu_Barra: | $1A89
		move.b		#3,(_STATE,a5)										| can't destroy outer section
		move.b		#3,(_ATTR,a5)											| size=2x2
		move.w		#_OBJSIZE,d5											| next object
		move.b		#2,(_STATE,a5,d5.w)
		clr.b			(_ATTR,a5,d5.w)
		move.b		#0x01,(_X,a5,d5.w)								| MSB
		move.w		(_Y,a5),d0												| 1st object sprite Y
		sub.w			#0x0100,d0												| adjust
		move.w		d0,(_Y,a5,d5.w)										| 2nd object sprite Y
		move.b		#0x17,(_CODE,a5,d5.w)
		move.b		#7,(_COLOUR,a5,d5.w)
		move.b		#27,(_PTS,a5,d5.w)								| 300 pts
		move.b		#0x48,(_CODE,a5)
		movea.l		#garu_barra_handler,a0
		move.l		a0,(4,a6)													| patch handler for next object
		SET_REENTRY_ADDR_HERE
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler

* centre of Garu Barra
garu_barra_handler: | $1ADD
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				explode_and_remove_object					| yes, go
		jsr				scroll_sprite_X
		bra				add_obj_handler
				
* Zolbak (Detector Dome / Skylight) 200 pts
* - when destroyed, reduces enemy AI by 2
handle_1F_Zolbak: | $1AF0
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)
		move.b		#0x1f,(_CODE,a5)
		move.b		#21,(_PTS,a5)											| 200 pts
		jsr				save_PC_to_fn_tbl_and_ret
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				reduce_enemy_ai_by_2
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler

reduce_enemy_ai_by_2: | $1B1F
		move.b		(enemy_AI_level),d0
		sub.b			#2,d0
		bcc				1f
		moveq			#0,d0
1:	move.b		d0,(enemy_AI_level)
		bra				handle_bomb_explosion

* Logram (Sphere Station) 300 pts
* - fire frequency set by $81A3
handle_26_Logram: | $1B2D
		move.b		(fire_freq_mask_logram),(_FFREQ,a5)
		bra				handle_logram_init
		
handle_19_Logram_unused: | $1B45

handle_logram_init: | $1B49
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| size=0
		move.b		#0x2c,(_CODE,a5)
		move.b		#27,(_PTS,a5)											| 300 pts
		jsr				pseudo_random_gen
		and.b			(_FFREQ,a5),d0										| scale with mask
		add.b			#1,d0
		move.b		d0,(_TIMER,a5)										| init timer
		jsr				save_PC_to_fn_tbl_and_ret

handle_logram_main: | $1B64
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				handle_bomb_explosion
		move.b		(gnd_stop_firing_row),d0					| MSB
		cmp.b			(_X,a5),d0												| MSB, too low to fire?
		bcs				handle_logram_exit								| yes, exit
		move.b		(countup_timer_1),d0
		and.b			#7,d0
		bne				set_logram_colour
		sub.b			#1,(_TIMER,a5)										| dec timer
		bne				set_logram_colour
		SET_REENTRY_ADDR_HERE
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				handle_bomb_explosion
		add.b			#1,(_TIMER,a5)										| inc timer
		move.b		(_TIMER,a5),d0
		cmp.b			#0x0c,d0													| time to fire?
		bne				1f																| no, skip
		jsr				init_new_bullet
		move.b		(_TIMER,a5),d0
1:	lsr.b			#2,d0
		and.w			#7,d0
		cmp.b			#7,d0
		beq				start_logram_shot_timer
		movea.l		#logram_sprite_anim_tbl,a0
		move.b		(a0,d0.w),(_CODE,a5)

set_logram_colour: | $1BB9
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler

start_logram_shot_timer: | $1BC9
		jsr				pseudo_random_gen
		and.b			(_FFREQ,a5),d0
		add.b			#1,d0
		move.b		d0,(_TIMER,a5)
		SET_REENTRY_ADDR handle_logram_main
		bra				set_logram_colour
		
handle_logram_exit: | $1BDC
		SET_REENTRY_ADDR_HERE
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				handle_bomb_explosion
		jsr				scroll_sprite_X
		bra				add_obj_handler

| sprite codes for when firing
logram_sprite_anim_tbl: | $1BF9
		.byte 0x2C
    .byte 0x2D
    .byte 0x2E
    .byte 0x2F
    .byte 0x2E
    .byte 0x2D
    .byte 0x2C
    .align 2

* Derota (Rook) 1,000 pts
handle_1B_Derota: | $1C00
		move.b		(fire_freq_mask_derota),(_FFREQ,a5)
		bra				init_derota

* handle_1C_Derota_81B0_unused:
* handle_1A_Derota_unused:
		
init_derota: | $1C1C
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| size=1x1
		move.b		#0x27,(_CODE,a5)
		move.b		#48,(_PTS,a5)											| 1,000 pts
		jsr				pseudo_random_gen
		and.b			(_FFREQ,a5),d0										| scale with mask
		add.b			#1,d0
		move.b		d0,(_TIMER,a5)										| init timer
		jsr				save_PC_to_fn_tbl_and_ret
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				handle_bomb_explosion							| yes, go
		move.b		(_X,a5),d0												| MSB
		move.b		(gnd_stop_firing_row),d1
		cmp.b			d0,d1															| stop firing?
		bcs				1f
		jsr				chk_timer_fire_bullet_reinit_timer		| no
1:	move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler

* Garu Derota (Daiza) 2,000 pts
handle_21_Garu_Derota: | $1C61
		move.b		#3,(_STATE,a5)										| can't be destroyed
		move.b		#3,(_ATTR,a5)											| size=2x2
		move.w		#_OBJSIZE,d5
		move.b		#2,(_STATE,a5,d5.w)								| 2nd object
		clr.b			(_ATTR,a5,d5.w)										| size=1x1
		move.b		#1,(_X,a5,d5.w)										| MSB
		move.w		(_Y,a5),d0												| 1st object spriteY
		sub.w			#0x0100,d0												| adjust
		move.w		d0,(_Y,a5,d5.w)										| 2nd object spriteY
		move.b		#0x27,(_CODE,a5,d5.w)
		move.b		#54,(_PTS,a5,d5.w)								| 2,000 pts
		move.b		#0x44,(_CODE,a5)									| 1st object
		move.b		(fire_freq_mask_derota),(_FFREQ,a5,d5.w)
		jsr				pseudo_random_gen									| random shot timer
		and.b			(_FFREQ,a5,d5.w),d0								| scale with mask
		add.b			#1,d0
		move.b		d0,(_TIMER,a5,d5.w)								| init timer
		movea.l		#garu_derota_handler,a0
		move.l		a0,(4,a6)													| patch handler next object
		SET_REENTRY_ADDR_HERE
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler		

garu_derota_handler: | $1CBE
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				explode_and_remove_object
		jsr				chk_timer_fire_bullet_reinit_timer
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler		
		
* Boza Logram (Dome Array) 2,000 pts
* - this function creates another 4 objects
*   and initialises them all, patching the
*   handlers into the object handler function table
* 2,000 pts if the centre is hit first (all lograms destroyed)
* 300 pts for each logram hit (before centre)
* 600 ptr for cente after any logram hit first
handle_2D_Boza_Logram: | $1CDE
		* patch 5 handler functions into table
		movea.l		#boza_logram_handler_tbl,a0
		movea.l		a6,a1															| copy this fn entry address
		moveq			#5-1,d7
1:	move.l		(a0)+,(a1)+												| patch handler address
		dbf				d7,1b
		* initialise state, attr for all objects
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| size=1x1
		lea				(_OBJSIZE,a5),a1									| 2nd object
		move.l		a1,a2															| make a copy
		moveq			#4-1,d7														| 4 objects to fill
2:	move.w		(_STATE,a5),(_STATE,a1)						| copy state, attr
		adda.l		#_OBJSIZE,a1											| next object
		dbf				d7,2b
		* patch ptr to centre object into outer object tables
		* so the points value of the centre can be updated
		* if an outer logram is hit (first)
		suba.l		#_OBJSIZE,a1											| address object 5 (centre)
		move.l		a5,a0															| 1st object
		moveq			#4-1,d7														| 4 entries to fill
3:	move.l		a1,(_EXTRA,a0)
		adda.l		#_OBJSIZE,a0
		dbf				d7,3b
		* initialise the spriteX values of all objects
		* from a table in ROM
		movea.l		a5,a1															| 1st object
		movea.l		#boza_logram_spriteX_tbl,a0
		moveq			#5-1,d7														| 5 entries to copy
4:	move.w		(a0)+,(_X,a1)
		adda.l		#_OBJSIZE,a1
		dbf				d7,4b
		* initialise the spriteY value of all objects
		* calculated from the spriteY value of the 1st object
		move.w		(_Y,a5),d0												| spriteY
		move.w		d0,d1															| copy
		add.w			#0x0180,d1												| adjust
		move.w		d1,(_Y,a2)												| 2nd object
		adda.l		#_OBJSIZE,a2											| 3rd object
		move.w		d0,d1
		sub.w			#0x180,d1													| adjust
		move.w		d1,(_Y,a2)
		adda.l		#_OBJSIZE,a2											| 4th object
		move.w		d0,(_Y,a2)
		adda.l		#_OBJSIZE,a2											| 5th object
		move.w		d0,(_Y,a2)
		rts

		.align 4
boza_logram_handler_tbl: | $1D47
		.long handle_boza_logram_outer
    .long handle_boza_logram_outer
    .long handle_boza_logram_outer
    .long handle_boza_logram_outer
    .long handle_boza_logram_centre

boza_logram_spriteX_tbl: | $1D51
		.word 0, 0x180, 0x180, 0x300, 0x180
		
handle_boza_logram_centre: | $1D5B
		move.b		#0x3a,(_CODE,a5)
		move.b		#54,(_PTS,a5)											| 2,000 pts
		SET_REENTRY_ADDR_HERE
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				destroy_all_outer_lograms					| yes, go
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler
		
destroy_all_outer_lograms: | $1D8A
		move.l		a5,a1
		move.b		#3,d0															| state=3
		suba.l		#_OBJSIZE,a1
		move.b		d0,(_STATE,a1)										| outer 4
		suba.l		#_OBJSIZE,a1
		move.b		d0,(_STATE,a1)										| outer 3
		suba.l		#_OBJSIZE,a1
		move.b		d0,(_STATE,a1)										| outer 2
		suba.l		#_OBJSIZE,a1
		move.b		d0,(_STATE,a1)										| outer 1
		bra				handle_bomb_explosion		

handle_boza_logram_outer: | $1D9E
		move.b		#0x2c,(_CODE,a5)
		move.b		#27,(_PTS,a5)											| 300 pts
		move.b		(fire_freq_mask_boza_logram),(_FFREQ,a5)
		jsr				pseudo_random_gen
		and.b			(_FFREQ,a5),d0										| scale with mask
		add.b			#1,d0
		move.b		d0,(_TIMER,a5)										| init shot timer
		jsr				save_PC_to_fn_tbl_and_ret

boza_logram_outer_main: | $1DBB
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				update_centre_points_value				| yes, go
		move.b		(gnd_stop_firing_row),d0
		cmp.b			(_X,a5),d0												| too low to fire?
		bcs				boza_logram_outer_idle						| yes, skip
		move.b		(countup_timer_1),d0
		and.b			#7,d0															| time to dec timer?
		bne				pulse_boza_logram_outer						| no, go
		sub.b			#1,(_TIMER,a5)										| time for fire?
		bne				pulse_boza_logram_outer						| no, go
		SET_REENTRY_ADDR_HERE
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				update_centre_points_value				| yes, go
		add.b			#1,(_TIMER,a5)
		move.b		(_TIMER,a5),d0
		cmp.b			#0x0c,d0													| time to shoot?
		bne				1f																| no, skip
		jsr				init_new_bullet
		move.b		(_TIMER,a5),d0
1:	lsr.b			#2,d0
		and.b			#7,d0
		cmp.b			#7,d0															| start next shot timer?
		beq				boza_logram_init_shot_timer				| yes, go
		movea.l		#boza_logram_outer_sprite_tbl,a0
		move.b		(a0,d0.w),(_CODE,a5)

pulse_boza_logram_outer: | $1E0E
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler

update_centre_points_value: | $1E1E
		move.l		(_EXTRA,a5),a0
		move.b		#36,(_PTS,a0)											| 600 pts
		bra				handle_bomb_explosion

boza_logram_init_shot_timer: | $1E2B
		jsr				pseudo_random_gen
		and.b			(_FFREQ,a5),d0										| scale with mask
		add.b			#1,d0
		move.b		d0,(_TIMER,a5)										| init shot timer
		SET_REENTRY_ADDR boza_logram_outer_main
		bra				pulse_boza_logram_outer
		
boza_logram_outer_idle: | $1E3E
		SET_REENTRY_ADDR_HERE
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				update_centre_points_value
		jsr				scroll_sprite_X
		bra				add_obj_handler

boza_logram_outer_sprite_tbl: | $1E5A
		.byte 0x2C, 0x2D, 0x2E, 0x2F, 0x2E, 0x2D, 0x2C
		.align 2
		
* Sol Tower (Citadel) 2,000/2,000 pts
* - hidden, scored when hit (appears)
* - scored again when destroyed
handle_1D_Sol_Tower: | $1E61
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| bank=0,size=1x1
		.ifeq OPT_REVEAL_SOL_TOWER
		clr.b			(_CODE,a5)												| invisible
		.else
		move.b		#0xb6,(_CODE,a5)
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		.endif
		move.b		#54,(_PTS,a5)											| 2,000 pts
		jsr				save_PC_to_fn_tbl_and_ret
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				handle_sol_tower_rising						| yes, go
		jsr				scroll_sprite_X
		bra				add_obj_handler

handle_sol_tower_rising: | $1E85
		move.b		#0xff,(_TIMER,a5)									| init timer
		SET_REENTRY_ADDR_HERE
		add.b			#1,(_TIMER,a5)										| inc timer
		move.b		(_TIMER,a5),d0
		lsr.b			#4,d0
		and.b			#7,d0
		cmp.b			#7,d0
		beq				sol_tower_risen
		cmp.b			#4,d0
		bne				1f
		move.b		#3,(_ATTR,a5)											| size=2x2
1:	movea.l		#sol_tower_animation_tbl,a0
		move.b		(a0,d0.w),(_CODE,a5)
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler

sol_tower_risen: | $1EC8
		move.b		#2,(_STATE,a5)
		SET_REENTRY_ADDR_HERE
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				handle_bomb_explosion							| yes, go
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler
		
* these are sprite codes for the Sol Tower as it rises
sol_tower_animation_tbl: | $1EF1
		.byte 0xA8
    .byte 0xA9
    .byte 0xAA
    .byte 0xAB
    .byte 0xAE
    .byte 0xB2
    .byte 0xB6
    .align 2

handle_09_Brag_Spario: | $1EF8
    **
    jsr       move_object_dX_dY
    bra       add_obj_handler

handle_54_Bonus_Flag: | $1F5C
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| size=1x1
		jsr				gen_rnd_spriteY
		clr.b			(_CODE,a5)												| invisible
		move.b		#48,(_PTS,a5)											| 1,000 pts
		SET_REENTRY_ADDR_HERE
		.ifne OPT_REVEAL_BONUS_FLAG		
		bra				reveal_bonus_flag
		.endif
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				reveal_bonus_flag									| yes, go		
		jsr				scroll_sprite_X
		bra				add_obj_handler

reveal_bonus_flag: | $1F8D
		move.b		#0x80,(_ATTR,a5)									| bank=1
		move.b		#0x0e,(_COLOUR,a5)
		move.b		#0x1f,(_CODE,a5)
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_flag_collected
		bcs				score_bonus_flag
		jsr				scroll_sprite_X
		bra				add_obj_handler

score_bonus_flag: | $1FA8
		btst.b		#1,(dswb_0115)
		bne				inc_num_solvalou
		movea.l		#pts_10000,a0
		jsr				add_to_score
		bra				remove_bonus_flag

inc_num_solvalou: | $1FB7
		add.b			#1,(curr_player_solvalou_left)
		jsr				display_solvalou_left
		** fall thru
		
remove_bonus_flag: | $1FC3
		clr.b			(_STATE,a5)
		clr.b			(_TYPE,a5)
		bra				add_obj_handler
		
check_flag_collected: | $1FD6
		*** THIS IS NEOGEO SPECIFIC
		move.w		(scb3_shadow+2*2*0x23),d3					| solvalou spriteY
		sub.w			(scb3_shadow+2*2*0x00),d3						
		lsr.w			#7,d3															| 7:0
		sub.b			#0x0a,d3
		add.b			#0x14,d3
		bcc				9f
		move.w		(scb4_shadow+2*2*0x23),d4					| solvalou spriteX
		sub.w			(scb4_shadow+2*2*0x00),d4
		lsr.w			#8,d4															| 8:1
		sub.b			#5,d4
		add.b			#0x0a,d4
9:	rts

* Torkan (Scout Ship/Beetle) - 50 pts		
handle_0F_Torkan: | $20E7
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| size=1x1
		jsr       gen_random_Y_store_obj
		movea.l   #angle_dX_dY_tbl,a0
		jsr       calc_dX_dY_for_vector_to_solvalou
		move.b    #9,(_PTS,a5)                      | 50 pts
		move.b    #0x10,(_CODE,a5)
		jsr       pseudo_random_gen                 | rnd shot timer
		and.b     #0x3f,d0
		add.b     #0x40,d0
		move.b    d0,(_TIMER,a5)                    | init timer
		jsr				save_PC_to_fn_tbl_and_ret
    cmp.b     #3,(_STATE,a5)                    | hit?
    beq       flying_enemy_hit                  | yes, go
    sub.b     #1,(_TIMER,a5)                    | time to shoot?
    beq       torkan_shoot                      | yes, go
    move.b    (pulsing_colour_1),(_COLOUR,a5)
    jsr       move_object_dX_dY		
		bra				add_obj_handler
		
torkan_shoot: | $2131
    jsr       init_new_bullet
		SET_REENTRY_ADDR_HERE
    cmp.b     #3,(_STATE,a5)                    | hit?
    beq       flying_enemy_hit                  | yes, go
    add.b     #1,(_TIMER,a5)
    move.b    (_TIMER,a5),d0
    lsr.b     #2,d0
    and.b     #0x0f,d0
    cmp.b     #7,d0
    beq       loc_2169
    add.b     #0x10,d0
    move.b    d0,(_CODE,a5)                     | animate sprite
    move.b    (pulsing_colour_1),(_COLOUR,a5)
    jsr       scroll_sprite_X        
		bra				add_obj_handler

loc_2169: | $2169
    movea.l   #obj_tbl+_OBJSIZE*0x23,a1         | solvalou
    move.b    (_X,a1),d0                        | MSB
    sub.b     (_X,a5),d0                        | MSB
    move.b    (_Y,a1),d1                        | MSB
    sub.b     (_Y,a5),d1                        | MSB
    jsr       get_index_for_angle
	  movea.l   #angle_dX_dY_terrazi_tbl,a0
    add.b     #0x80,d2
    *** we need to do this inline
    lsr.b     #3,d2
    and.w     #0x1f,d2
    lsl.w     #1,d2
    lea       (a0,d2.w),a0
    move.b    (a0)+,d0
    ext.w     d0
    move.w    d0,(_dY,a5)
    move.b    (a0),d0
    ext.w     d0
    move.w    d0,(_dX,a5)
    *** end of inline
		SET_REENTRY_ADDR_HERE
    cmp.b     #3,(_STATE,a5)                    | hit?
    beq       flying_enemy_hit                  | yes, go
    move.b    (pulsing_colour_1),(_COLOUR,a5)
    jsr       move_object_dX_dY
    bra       add_obj_handler

* Kapi (Rhombus) 300 pts
handle_10_Kapi: | $23A8
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| size=1x1
		jsr       gen_random_Y_store_obj
    movea.l   #angle_dX_dY_tbl,a0
    jsr       calc_dX_dY_for_vector_to_solvalou
		move.b		#27,(_PTS,a5)											| 300 pts
		move.b		#0x20,(_CODE,a5)
		jsr       pseudo_random_gen
		add.b     #63,d0
		add.b     #48,d0                            | 48-111
		move.b    d0,(_TIMER,a5)                    | init shot timer
		move.b    (fire_freq_mask_kapi),(_FFREQ,a5)
		jsr				save_PC_to_fn_tbl_and_ret
    cmp.b     #3,(_STATE,a5)                    | hit?
    beq       flying_enemy_hit                  | yes, go
    sub.b     #1,(_TIMER,a5)                    | time to shoot?
    beq       kapi_10_fire                      | yes, g0
    move.b    (pulsing_colour_1),(_COLOUR,a5)		
    jsr       move_object_dX_dY		
		bra				add_obj_handler

kapi_10_fire: | $23F7
    clr.b     (_TIMER1,a5)
    move.w    #1,d1
    movea.l   #obj_tbl+_OBJSIZE*0x23,a0
    move.b    (_Y,a0),d0                        | MSB
    cmp.b     (_Y,a5),d0                        | compare
    bcs       1f
    move.w     #-1,d1
1:  move.w    d1,(_ddY,a5)
    move.b    #1,(_TIMER,a5)
    jsr       chk_timer_fire_bullet_reinit_timer
		SET_REENTRY_ADDR_HERE
    cmp.b     #3,(_STATE,a5)
    beq       flying_enemy_hit
    jsr       chk_timer_fire_bullet_reinit_timer
    add.b     #1,(_TIMER1,a5)
    move.b    (_TIMER1,a5),d0
    lsr.b     #3,d0
    and.b     #7,d0
    cmp.b     #7,d0
    beq       loc_2455
    add.b     #32,d0
    move.b    d0,(_CODE,a5)
    move.b    (pulsing_colour_1),(_COLOUR,a5)
    move.w    (_ddY,a5),d0
    add.w     d0,(_dY,a5)
    sub.w     #2,(_dX,a5)
    jsr       move_object_dX_dY		
		bra				add_obj_handler

loc_2455: | $2455
		SET_REENTRY_ADDR_HERE
    cmp.b     #3,(_STATE,a5)                    | hit?
    beq       flying_enemy_hit
    jsr       chk_timer_fire_bullet_reinit_timer
    move.b    (pulsing_colour_1),(_COLOUR,a5)
    move.w    (_ddY,a5),d0
    add.w     d0,(_dY,a5)
    sub.w     #2,(_dX,a5)
    jsr       move_object_dX_dY		
		bra				add_obj_handler

* Terrazi (Limuroid), 700 pts    
handle_11_Terrazi: | $2487
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| size=1x1
		jsr				gen_rnd_spriteY
		movea.l   #angle_dX_dY_terrazi_tbl,a0
		jsr       calc_dX_dY_for_vector_to_solvalou
		move.b    #39,(_PTS,a5)                     | 700 pts
		move.b    #1,(_CODE,a5)
		move.b    (fire_freq_mask_terrazi),(_FFREQ,a5)
		jsr       pseudo_random_gen                 | random shot timer
		and.b     (_FFREQ,a5),d0                    | scale with mask
		move.b    d0,(_TIMER,a5)                    | init shot timer
		jsr				save_PC_to_fn_tbl_and_ret
    cmp.b     #3,(_STATE,a5)                    | hit?
    beq       flying_enemy_hit                  | yes, go
    movea.l   #obj_tbl+_OBJSIZE*0x23,a0
    move.b    (_Y,a0),d0                        | MSB
    sub.b     (_Y,a5),d0                        | object
    sub.b     #4,d0
    add.b     #8,d0                             | too close to fire?
    bcs       terrazi_main_cont                 | yes, go
    jsr       chk_timer_fire_bullet_reinit_timer
    move.b    (pulsing_colour_1),(_COLOUR,a5)
		jsr				move_object_dX_dY
		bra				add_obj_handler

terrazi_main_cont: | $24E2
    moveq     #2,d1
    sub.b     #4,d0
    bcs       1f
    move.w    #-2,d1
1:  move.w    d1,(_dY,a5)
    move.b    #0xff,(_TIMER,a5)                 | init timer
		SET_REENTRY_ADDR_HERE
    cmp.b     #3,(_STATE,a5)                    | hit?
    beq       flying_enemy_hit                  | yes, go
    jsr       chk_timer_fire_bullet_reinit_timer
    add.w     #1,(_ddX,a5)
    move.w    (_ddX,a5),d0
    lsr.b     #3,d0
    and.b     #7,d0
    cmp.b     #7,d0
    beq       terrazi_main_cont_2
    add.b     #1,d0
    move.b    d0,(_CODE,a5)
    move.b    (pulsing_colour_1),(_COLOUR,a5)
    move.w    (_ddY,a5),d0
    add.w     d0,(_dY,a5)                       | update dY
    sub.w     #2,(_dX,a5)
    jsr       move_object_dX_dY
    bra       add_obj_handler    

terrazi_main_cont_2: | $2535
		SET_REENTRY_ADDR_HERE
    cmp.b     #3,(_STATE,a5)                    | hit?
    beq       flying_enemy_hit                  | yes, go
    jsr       chk_timer_fire_bullet_reinit_timer
    move.b    (pulsing_colour_1),(_COLOUR,a5)
    move.w    (_ddY,a5),d0
    add.w     d0,(_dY,a5)                       | update dY
    sub.w     #2,(_dX,a5)
    jsr       move_object_dX_dY
    bra       add_obj_handler    

* Garu Zakota (Bullseye) 1,000/500 pts
* - big exploding bomb preceding the later Andor Geneses
handle_18_Garu_Zakato: | $284C
		move.b		#2,(_STATE,a5)
		move.b		#0x80,(_ATTR,a5)									| bank=1
		jsr       gen_random_Y_store_obj
		move.b		#0x13,(_CODE,a5)
		move.b		#48,(_PTS,a5)											| 1,000 pts
		move.w		#48,(_dX,a5)
		clr.w			(_dY,a5)
		jsr				pseudo_random_gen
		and.b			#0x1f,d0													| 0-31
		add.b			#32,d0														| 32-63
		move.b		d0,(_TIMER,a5)										| init timer
		jsr				save_PC_to_fn_tbl_and_ret
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				flying_enemy_hit									| yes, go		
		sub.b			#1,(_TIMER,a5)										| time to explode?
		beq				garu_zakato_explode								| yes, go
		move.b		(pulsing_colour_2),(_COLOUR,a5)
		jsr				move_object_dX_dY
		bra				add_obj_handler

garu_zakato_explode: | $2897
		**
		*** TBD sound
		clr.b			(_TYPE,a5)
		clr.b			(_STATE,a5)
		bra				add_obj_handler

handle_06_Bullet: | $2B6D
		movea.l		#angle_dX_dY_tbl,a0
		jsr				calc_dX_dY_for_vector_to_solvalou
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				move_object_dX_dY
		bra				add_obj_handler

handle_07_Garu_Zakato_Bullet: | $2B79
		jsr				move_object_dX_dY
		bra				add_obj_handler
												
handle_2C_Grobda_stationary: | $2B83
		move.w		#8,d0															| dX=8 (stop)
		jsr				activate_and_set_object_dX
		move.b		#21,(_PTS,a5)											| 200 pts
		move.b		#0x4c,(_CODE,a5)
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit
		bra				set_object_colour_and_move_dX

* 
* Grobda (Tank/Stingray) 400 pts
* - moving
handle_35_Grobda_fwd: | $2B96
		move.w		#14,d0														| dX=14 (fwd)
		jsr				activate_and_set_object_dX
		move.b		#30,(_PTS,a5)											| 400 pts
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX

* Grobda (Tank/Stingray) 600 pts
* - moves forward (forever) when in crosshairs
handle_36_Grobda_crosshairs_fwd: | $2BA6
		move.w		#8,d0															| dX=8 (stop)
		jsr				activate_and_set_object_dX
		move.b		#36,(_PTS,a5)											| 600 pts
		move.b		#0x4c,(_CODE,a5)
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit
		jsr				check_grobda_in_crosshairs
		bcs				grobda_start_moving_fwd		
		bra				set_object_colour_and_move_dX

grobda_start_moving_fwd: | $2BBE
		move.w		#14,(_dX,a5)											| dX=14 (fwd)
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX
				
set_object_colour_and_move_dX: | $2BD5
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				move_object_dX
		bra				add_obj_handler

* Grobda (Tank/Stingray) 1,000 pts
* - moving, stops when in crosshairs
handle_38_Grobda_fwd_crosshairs_stop_fwd: | $2C2E
		move.w		#14,d0														| dX=14 (fwd)
		jsr				activate_and_set_object_dX
		move.b		#48,(_PTS,a5)											| 1,000 pts
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit
		jsr				check_grobda_in_crosshairs
		bcs				grobda_stops_in_crosshairs
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX

grobda_stops_in_crosshairs: | $2C44
		move.w		#8,(_dX,a5)												| stop
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit
		sub.b			#1,(_TIMER,a5)										| start moving again?
		beq				1f																| yes, go
		bra				set_object_colour_and_move_dX
1:	move.w		#14,(_dX,a5)											| fwd
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX

* Grobda (Tank/Stingray) 1,500 pts
* - darts backwards when targeted
handle_39_Grobda_targeted_back_stop: | $2C77
		move.w		#8,d0															| dX=8 (stop)
		jsr				activate_and_set_object_dX
		move.b		#51,(_PTS,a5)											| 1,500 pts
		move.b		#0x4c,(_CODE,a5)
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit
		jsr				check_targeted_and_init_timer
		bcs				grobda_dart_back
		bra				set_object_colour_and_move_dX

grobda_dart_back: | $2C90
		move.w		#2,(_dX,a5)												| backwards
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit
		sub.b			#1,(_TIMER,a5)										| dec timer
		beq				grobda_stop
		jsr				animate_grobda_backwards
		bra				set_object_colour_and_move_dX

grobda_stop: | $2CAD
		move.w		#8,(_dX,a5)												| stop
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit
		bra				set_object_colour_and_move_dX

* Grobda (Tank/Stingray) 2,000 pts
* - moving, darts forward when targeted
handle_3A_Grobda_fwd_crosshairs_darts_fwd: | $2CC4
		move.w		#14,d0														| dX=14 (fwd)
		jsr				activate_and_set_object_dX
		move.b		#54,(_PTS,a5)											| 2,000 pts
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit
		jsr				check_grobda_in_crosshairs
		bcs				grobda_darts_fwd_in_crosshairs
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX
		
grobda_darts_fwd_in_crosshairs: | $2CDB
		move.w		#22,(_dX,a5)											| fast fwd
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit
		sub.b			#1,(_TIMER,a5)										| stop darting?
		beq				1f																| yes, go
		jsr				animate_grobda_fast_forward
		bra				set_object_colour_and_move_dX
1:	move.w		#14,(_dX,a5)											| fwd
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX

* Grobda (Tank/Stingray) 2,500 pts
* - moving, darts back then forward when targeted
handle_3B_Grobda_fwd_targeted_back_fwd: | $2D10
		move.w		#14,d0														| dX=14 (fwd)
		jsr				activate_and_set_object_dX
		move.b		#57,(_PTS,a5)											| 2,500 pts
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit
		jsr				check_targeted_and_init_timer
		bcs				grobda_3B_dart_back
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX

grobda_3B_dart_back: | $2D27
		move.w		#2,(_dX,a5)												| backwards
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit
		sub.b			#1,(_TIMER,a5)										| time to change dir?
		beq				grobda_3B_dart_fwd                | yes, go
		jsr				animate_grobda_backwards
		bra				set_object_colour_and_move_dX

grobda_3B_dart_fwd: | $2D44
		move.w		#14,(_dX,a5)											| forward
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX

handle_3C_Grobda_targeted_fast_fwd: | $2D5C
		move.w		#8,d0															| dX=8 (stop)
		jsr				activate_and_set_object_dX
		move.b		#63,(_PTS,a5)											| 10,000 pts
		move.b		#0x4c,(_CODE,a5)
		jsr				save_PC_to_fn_tbl_and_ret
loc_2D68:		
		jsr				check_object_hit
		jsr				check_targeted_and_init_timer
		bcs				1f
		bra				set_object_colour_and_move_dX		
1:	move.w		#22,(_dX,a5)											| fast fwd
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit
		sub.b			#1,(_TIMER,a5)										| dec timer
		beq				2f
		jsr				animate_grobda_fast_forward
		bra				set_object_colour_and_move_dX
2:	move.w		#8,(_dX,a5)												| stop
		SET_REENTRY_ADDR_HERE
		bra				loc_2D68		
				
* Grobda (Tank/Stingray) 200 pts
* - stationary (same behaviour as $2C)
handle_3D_Grobda_stationary_in_water: | $2DA3
		move.w		#8,d0															| dX=8 (stop)
		jsr				activate_and_set_object_dX
		move.b		#21,(_PTS,a5)											| 200 pts
		move.b		#0x4c,(_CODE,a5)
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit_and_remove
		bra				set_object_colour_and_move_dX

* Grobda (Tank/Stingray) 400 pts
* - moving
handle_3E_Grobda_fwd_in_water: | $2DB7
		move.w		#14,d0														| dX=14 (fwd)
		jsr				activate_and_set_object_dX
		move.b		#30,(_PTS,a5)											| 400 pts
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit_and_remove
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX

* Grobda (Tank/Stingray) 600 pts
* - moves forward when in crosshairs
handle_3F_Grobda_crosshairs_fwd_in_water: | $2DC8
		move.w		#8,d0															| dX=8 (stop)
		jsr				activate_and_set_object_dX
		move.b		#36,(_PTS,a5)											| 600 pts
		move.b		#0x4c,(_CODE,a5)
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit_and_remove
		jsr				check_grobda_in_crosshairs
		bcs				1f
		bra				set_object_colour_and_move_dX
1:	move.w		#14,(_dX,a5)											| fwd
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit_and_remove
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX

* Grobda (Tank/Stingray) 2,500 pts
* - moves forward, then back, then fwd when targeted
handle_40_Grobda_fwd_targeted_back_fwd_in_water: | $2DF9
		move.w		#14,d0														| dX=14 (fwd)
		jsr				activate_and_set_object_dX
		move.b		#57,(_PTS,a5)											| 2,500 pts
		jsr				save_PC_to_fn_tbl_and_ret
		jsr				check_object_hit_and_remove
		jsr				check_targeted_and_init_timer
		bcs				1f
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX
1:	move.w		#2,(_dX,a5)												| backwards
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit_and_remove
		sub.b			#1,(_TIMER,a5)										| time to move fwd?
		beq				2f																| yes, go
		jsr				animate_grobda_backwards
		bra				set_object_colour_and_move_dX
2:	move.w		#14,(_dX,a5)											| forwards		
		SET_REENTRY_ADDR_HERE
		jsr				check_object_hit_and_remove
		jsr				animate_grobda_forwards
		bra				set_object_colour_and_move_dX

check_object_hit: | $2E45
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				1f																| yes, go
		rts
1:	adda.l		#4,a7															| return up call stack
		bra				handle_bomb_explosion

check_object_hit_and_remove: | $2E55
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				1f																| yes, go
		rts
1:	adda.l		#4,a7															| return up call stack
		bra				explode_and_remove_object

animate_grobda_forwards: | $2E65
		move.b		(countup_timer_1),d0
		lsr.b			#1,d0
		and.b			#3,d0
		add.b			#0x4c,d0													| animate sprite
		move.b		d0,(_CODE,a5)
		rts
						
animate_grobda_backwards: | $2E71
		move.b		(countup_timer_1),d0
		lsr.b			#1,d0
		and.b			#3,d0
		neg.b			d0
		and.b			#3,d0
		add.b			#0x4c,d0													| animate sprite
		move.b		d0,(_CODE,a5)
		rts
						
animate_grobda_fast_forward: | $2E81
		move.b		(countup_timer_1),d0
		and.b			#3,d0
		add.b			#0x4c,d0													| animate sprite
		move.b		d0,(_CODE,a5)
		rts
						
* d0.w=dX
activate_and_set_object_dX: | $2E8C
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| size=0
		move.w		d0,(_dX,a5)
		clr.w			(_dY,a5)
		rts

check_targeted_and_init_timer: | $2EA0
		movea.l		#obj_tbl+_OBJSIZE*0x20,a0
		move.b		(_X,a0),d0												| MSB X crosshairs
		sub.b			(_X,a5),d0												| MSB X object
		sub.b			#2,d0
		add.b			#4,d0
		bcc				9f
		move.b		(_Y,a0),d0												| MSB Y crosshairs
		sub.b			(_Y,a5),d0												| MSB Y object
		sub.b			#2,d0
		add.b			#4,d0
		bcc				9f
		move.b		#48,(_TIMER,a5)										| init timer
		ori.b			#(1<<0),ccr												| restore C flag
9:	rts
		
check_grobda_in_crosshairs: | $2EBB
		movea.l		#obj_tbl+_OBJSIZE*0x22,a0					| crosshairs
		move.b		(_X,a0),d0												| MSB X
		sub.b			(_X,a5),d0
		sub.b			#2,d0
		add.b			#4,d0
		bcc				9f
		move.b		(_Y,a0),d0												| MSB Y
		sub.b			(_Y,a5),d0
		sub.b			#2,d0
		add.b			#4,d0
		bcc				9f
		move.b		#48,(_TIMER,a5)										| init timer
		ori.b			#(1<<0),ccr												| restore C flag
9:	rts

* Domogram (Defence Site/Slider) 800 pts
* - timer table is shot timer
*   - offset=1 is num vectors remaining
* - timer2 table is path vector length
* - type table (repurposed) is shot animation timer
* - path data addr in object extra table
* - path data length in object timer table+1
handle_2E_Domogram: | $2ED6
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| size=1x1
		move.b		#0x3c,(_CODE,a5)
		move.b		#42,(_PTS,a5)											| 800 pts
		move.b		#1,(_VECLEN,a5)										| flag vector finished
		move.b		(fire_freq_mask_domogram),(_FFREQ,a5)
		jsr				pseudo_random_gen									| random shot timer
		and.b			(_FFREQ,a5),d0										| scale with mask
		add.b			#1,d0
		move.b		d0,(_TIMER,a5)										| init shot timer
		clr.b			(_TYPE,a5)												| repurpose as shot animation timer
		jsr				save_PC_to_fn_tbl_and_ret
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				handle_bomb_explosion							| yes, go
		sub.b			#1,(_VECLEN,a5)										| vector done?
		bne				domogram_main											| no, go
* get next path vector
		move.l		(_EXTRA,a5),a0										| ptr path data
		move.b		(a0)+,(_VECLEN,a5)
		moveq			#0,d0
		move.b		(a0)+,d0													| vector index
		move.l		a0,(_EXTRA,a5)										| store updated ptr path data
		movea.l		#domogram_vector_tbl,a0
		**jsr				cpy_2_bytes_adjacent_tbls
		** need to do this inline
		lsl.w			#1,d0															| x2
		lea				(a0,d0.w),a0
		move.b		(a0)+,d1													| get dY entry
		ext.w			d1
		move.w		d1,(_dY,a5)
		move.b		(a0)+,d1													| get dX entry
		ext.w			d1
		move.w		d1,(_dX,a5)
		** end of inline
		sub.b			#1,(_NVEC,a5)											| dec num vectors
		beq				domogram_done_all_vectors
		bra				domogram_main

domogram_done_all_vectors: | $2F3E
		SET_REENTRY_ADDR_HERE
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				handle_bomb_explosion							| yes, go
		* fall thru
		
domogram_main: | $2F54
		tst.b			(_TYPE,a5)												| animation shot timer
		bne				domogram_shooting
		move.b		(gnd_stop_firing_row),d0
		cmp.b			(_X,a5),d0												| MSB. stop firing?
		bcs				domogram_colour_and_move					| yes, go
		move.b		(countup_timer_1),d0
		and.b			#7,d0															| time to dec shot timer?
		bne				domogram_colour_and_move					| no, go
		sub.b			#1,(_TIMER,a5)										| time to shoot?
		bne				domogram_colour_and_move					| no, go
		move.b		#24,(_TYPE,a5)										| init animation timer
		
domogram_shooting: | $2F76
		sub.b			#1,(_TYPE,a5)											| dec animation timer
		move.b		(_TYPE,a5),d0
		cmp.b			#12, d0														| time to spawn bullet?
		bne				domogram_animate_sprite						| no, go
		jsr				init_new_bullet
		jsr				pseudo_random_gen									| rnd shot timer
		and.b			(_FFREQ,a5),d0										| scale with mask
		add.b			#1,d0
		move.b		d0,(_TIMER,a5)										| init shot timer
		move.b		(_TYPE,a5),d0											| animation timer
		
domogram_animate_sprite: | $2F8C
		lsr.b			#2,d0
		and.w			#7,d0
		movea.l		#domogram_sprite_tbl,a0
		move.b		(a0,d0.w),(_CODE,a5)

domogram_colour_and_move: | $2F99
		move.b		(pulsing_colour_1),(_COLOUR,a5)
		jsr				move_object_dX_dY
		bra				add_obj_handler

domogram_sprite_tbl: | $2FAB
		.byte 0x3C, 0x3D, 0x3E, 0x3F, 0x3E, 0x3D
		
* domogram dY,dX value pairs
domogram_vector_tbl: | $2FB1
		.byte 0, 0x10
    .byte 2, 0x10
    .byte 4, 0x10
    .byte 6, 0x10
    .byte 8, 0x10
    .byte 8, 0xE
    .byte 8, 0xC
    .byte 8, 0xA
    .byte 8, 8
    .byte 8, 6
    .byte 8, 4
    .byte 8, 2
    .byte 8, 0
    .byte 6, 0
    .byte 4, 0
    .byte 2, 0
    .byte 0, 0
    .byte 0xFE, 0
    .byte 0xFC, 0
    .byte 0xFA, 0
    .byte 0xF8, 0
    .byte 0xF8, 2
    .byte 0xF8, 4
    .byte 0xF8, 6
    .byte 0xF8, 8
    .byte 0xF8, 0xA
    .byte 0xF8, 0xC
    .byte 0xF8, 0xE
    .byte 0xF8, 0x10
    .byte 0xFA, 0x10
    .byte 0xFC, 0x10
    .byte 0xFE, 0x10
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0xFF
    .byte 0x66							
    .align 2
                
main_fn_2__handle_objects: | $3000
		lea				obj_tbl,a0
		move.w		#32*64/4,d7												| 64 objects
1:	clr.l			(a0)+
		dbf				d7,1b
		movea.l		#add_obj_handler,a0
		lea				main_2_fn_tbl_1,a1
		moveq			#32-1,d7
2:	move.l		a0,(a1)+
		dbf				d7,2b															| init 1st half fn table
		lea				main_2_fn_tbl_2,a1
		moveq			#26-1,d7
3:	move.l		a0,(a1)+
		dbf				d7,3b															| init 2nd half fn table
		movea.l		#obj_tbl+_OBJSIZE*0x27,a5					| 1st bullet object
		moveq			#19-1,d7													| 19 bullets
4:	move.b		#0x00,(_STATE,a5)
		move.b		#0x80,(_ATTR,a5)									| bank=1
		move.b		#0x1e,(_CODE,a5)
		adda.l		#_OBJSIZE,a5
		dbf				d7,4b															| init bullet fn table
		jsr				save_PC_to_fn_tbl_and_ret
		tst.b			(scroll_disabled)
		bne				9f
		jsr				save_PC_to_fn_tbl_and_ret
		tst.b			(scroll_disabled)
		bne				main_fn_2__handle_objects
		move.l		a6,-(a7)													| save main jump table address

		lea				main_2_fn_tbl_1,a6
		moveq			#0,d6															| object offset
		moveq			#32-1,d7
loc_305E:
		move.l		(a6),a0
		movem.l		d6-d7/a6,-(a7)
		movea.l		#obj_tbl,a5		
		lea				(a5,d6.w),a5											| a5=object ptr
		jsr				(a0)
		movem.l		(a7)+,d6-d7/a6
		adda.l		#4,a6															| next object fn
		add.w			#_OBJSIZE,d6											| next object offset
		dbf				d7,loc_305E
		
		lea				main_2_fn_tbl_2,a6
		add.w			#3*_OBJSIZE,d6										| skip 3 objects
		move.q		#25-1,d7
loc_306D:
		move.l		(a6),a0
		movem.l		d6-d7/a6,-(a7)
		movea.l		#obj_tbl,a5		
		lea				(a5,d6.w),a5											| a5=object ptr
		jsr				(a0)
		movem.l		(a7)+,d6-d7/a6
		adda.l		#4,a6															| next object fn
		add.w			#_OBJSIZE,d6											| next object offset
		dbf				d7,loc_306D
		
		move.l		(a7)+,a6													| restore main jump table address
9:	rts

* d6=obj_tbl offset, a6=handler fn entry
add_obj_handler: | $3079
		jsr				save_PC_to_fn_tbl_and_ret
		movea.l		#obj_tbl,a5
		moveq			#0,d0
		move.b		(_TYPE,a5,d6.w),d0								| valid type?
		beq				9f																| no, return
		lea				obj_handler_tbl,a0
		sub.w			#1,d0															| 1st entry is object #1
		lsl.w			#2,d0															| offset for object
		move.l		(a0,d0.w),(a6)										| patch table with handler function
9:	rts

move_object_dX_dY: | $3091
		move.w		(_dX,a5),d0
		lsl.w			#1,d0															| x2
		add.w			d0,(_X,a5)												| add and update spriteX
		move.w		(_dY,a5),d0
		lsl.w			#1,d0															| x2
		add.w			d0,(_Y,a5)												| add and update spriteY
		* fall thru
		
* a5=object ptr, d0=spriteX
check_scroll_offscreen: | $30B4
		move.b		(_X,a5),d0												| MSB in low byte
		add.b			#1,d0
		cmp.b			#0x29,d0
		bcc				handle_scroll_offscreen
		move.b		(_Y,a5),d0
		cmp.b			#0x1f,d0
		bcs				exit_caller
handle_scroll_offscreen:
		clr.b			(_STATE,a5)
		clr.b			(_EXTRA,a5)
		clr.b			(_TYPE,a5)
		rts

* a5=object ptr
move_object_dX: | $30D4
		move.w		(_dX,a5),d0
		lsl.w			#1,d0															| x2
		add.w			d0,(_X,a5)												| update spriteX
		bra				check_scroll_offscreen
						
* a5=object ptr
scroll_sprite_X: | $30E8
		move.w		(scroll_delta),d0
		neg.w			d0
		lsl.w			#1,d0															| x2
		add.w			d0,(_X,a5)												| update spriteX
		bra				check_scroll_offscreen

flying_enemy_hit: | $311F
		move.b		#7,(_COLOUR,a5)
		move.b		#0xff,(_TIMER,a5)
		SET_REENTRY_ADDR_HERE
		add.b			#1,(_TIMER,a5)										| inc timer
		move.b		(_TIMER,a5),d0
		cmp.b			#8,d0															| time to adjust sprite size?
		bne				1f																| no, skip
		sub.b			#1,(_X,a5)												| dec MSB X
		add.b			#1,(_Y,a5)												| inc MSB Y
1:	move.b		d0,d1															| save timer value
		lsr.b			#2,d0
		cmp.b			#5,d0															| explosion finished?
		beq				remove_object_type_state
* animate flying enemy explosion
		**
		jsr				move_object_dX_dY
		bra				add_obj_handler

remove_object_type_state: | $3179
		clr.b			(_TYPE,a5)
		clr.b			(_STATE,a5)
		bra				add_obj_handler

handle_bomb_explosion: | $3186
		move.b		#0x0c,(_COLOUR,a5)
		move.b		#0xff,(_TIMER,a5)									| init timer
		SET_REENTRY_ADDR_HERE
		add.b			#1,(_TIMER,a5)
		moveq			#0,d0
		move.b		(_TIMER,a5),d0
		move.b		d0,d1
		and.b			#7,d1															| time for next animation frame?
		bne				loc_31CE													| no, skip
		lsr.b			#3,d0
		and.b			#7,d0															| animation frame
		cmp.b			#7,d0															| done animating?
		beq				bomb_explosion_finished
		cmp.b			#2,d0
		bne				1f
		jsr				adj_for_big_explosion_frame2
1:	cmp.b			#5,d0
		bne				2f
		jsr				adj_for_small_explosion_frame2
2:	movea.l		#bomb_explosion_animation_tbl,a0
		lsl.w			#1,d0
		move.b		(a0,d0.w),(_CODE,a5)
		move.b		(1,a0,d0.w),(_ATTR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler

loc_31CE:
		jsr				scroll_sprite_X
		bra				add_obj_handler

bomb_explosion_finished: | $31D7
		move.b		#0xa6,(_CODE,a5)
		move.b		#0x0d,(_COLOUR,a5)
		jsr				save_PC_to_fn_tbl_and_ret
		move.b		(countup_timer_1),d0
		lsr.b			#2,d0
		and.b			#1,d0
		add.b			#0xa6,d0
		move.b		d0,(_CODE,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler
		
* these are sprite codes, sizes for the bomb explosion
bomb_explosion_animation_tbl: | $31F4
		.byte 0x60
    .byte    0
    .byte 0x61
    .byte    0
    .byte 0x64
    .byte    3
    .byte 0x68
    .byte    3
    .byte 0x6C
    .byte    3
    .byte 0x62
    .byte    0
    .byte 0x63
    .byte    0

adj_for_big_explosion_frame2: | $3202
		sub.b			#1,(_X,a5)												| MSB
		add.b			#1,(_Y,a5)												| MSB
		rts
		
adj_for_small_explosion_frame2: | $320C
		add.b			#1,(_X,a5)												| MSB
		sub.b			#1,(_Y,a5)												| MSB
		rts
		
explode_and_remove_object: | $3216
		move.b		#0x0c,(_COLOUR,a5)
		move.b		#0xff,(_TIMER,a5)
		SET_REENTRY_ADDR_HERE
		add.b			#1,(_TIMER,a5)
		move.b		(_TIMER,a5),d0
		move.b		d0,d1															| copy
		and.b			#3,d0
		bne				loc_325D
		lsr.b			#2,d1
		and.w			#7,d1
		cmp.b			#7,d1															| done exploding?
		beq				remove_object
		cmp.b			#2,d1
		bne				1f
		jsr				adj_for_big_explosion_frame2
1:	cmp.b			#5,d1
		bne				2f
		jsr				adj_for_small_explosion_frame2
2:	movea.l		#bomb_explosion_animation_tbl,a0
		lsl.w			#1,d1															| entry offset
		lea				(a0,d1.w),a0											| ptr entry
		move.b		(a0)+,(_CODE,a5)
		move.b		(a0),(_ATTR,a5)
		jsr				scroll_sprite_X
		bra				add_obj_handler

loc_325D: | $325D
		jsr				scroll_sprite_X
		bra				add_obj_handler

remove_object: | $3266
		clr.b			(_TYPE,a5)
		clr.b			(_STATE,a5)
		bra				add_obj_handler

chk_timer_fire_bullet_reinit_timer: | $3271
		move.b		(countup_timer_1),d0
		and.b			#7,d0
		bne				9f
		sub.b			#1,(_TIMER,a5)										| time to fire?
		bne				9f																| no, exit
		jsr				init_new_bullet
		jsr				pseudo_random_gen									| rnd shot timer
		and.b			(_FFREQ,a5),d0										| scale wirh mask
		add.b			#1,d0
		move.b		d0,(_TIMER,a5)										| init timer
9:	rts

init_new_bullet: | $3287
		movea.l		#obj_tbl+_OBJSIZE*0x27,a0					| 1st bullet
		moveq			#19-1,d7													| 19 bullets
1:	cmp.b			#1,(_STATE,a0)										| idle?
		beq				found_idle_bullet_slot						| yes, go
		adda.l		#_OBJSIZE,a0											| next slot
		dbf				d7,1b
		rts

* a0=bullet a5=object firing
set_state_and_copy_obj_coords: | $32A5
		move.b		#2,(_STATE,a0)
		move.w		(_X,a5),(_X,a0)
		move.w		(_Y,a5),(_Y,a0)
		rts

* a0=bullet a5=object firing
found_idle_bullet_slot: | $32BB
		jsr				set_state_and_copy_obj_coords
		move.b		#6,(_TYPE,a0)
		rts

* a0=angle_dX_dY_tbl, a5=object
calc_dX_dY_for_vector_to_solvalou: | $3365
		movea.l		#obj_tbl+_OBJSIZE*0x23,a1					| solvalou
		move.b		(_X,a1),d0												| solvalou MSB
		sub.b			(_X,a5),d0												| sub bullet MSB
		move.b		(_Y,a1),d1												| solvalou MSB
		sub.b			(_Y,a5),d1												| sub bullet MSB
		jsr				get_index_for_angle
		add.b			#4,d2
		lsr.b			#3,d2
		and.w			#0x1f,d2
		** we need to do this inline
		lsl.w			#1,d2															| x2
		lea				(a0,d2.w),a0											| ptr entry
		move.b		(a0)+,d0
		ext.w			d0
		move.w		d0,(_dY,a5)
		move.b		(a0),d0
		ext.w			d0
		move.w		d0,(_dX,a5)
		* end of inline
		rts
				
* a0=table base addr, d0=offset
cpy_2_bytes_adjacent_tbls: | $3383
		*move.b		(a0,d0.w),()
		rts

* a5=object		
gen_random_Y_store_obj: | $338B
    jsr       pseudo_random_gen
    and.w     #31,d0
    cmp.b     #25,d0
    bcc       gen_random_Y_store_obj
    add.w     #3,d0
    lsl.w     #8,d0
    move.w    d0,(_Y,a5)
    rts
				
gen_rnd_spriteY: | $3398
		movea.l		#obj_tbl+0x23*_OBJSIZE,a4					| solvalou object
1:	jsr				pseudo_random_gen
		and.b			#31,d0
		cmp.b			#25,d0														| too big?
		bcc				1b																| yes, try again
		add.b			#3,d0
		move.b		d0,d1
		sub.b			(_Y,a4),d1
		sub.b			#8,d1
		add.b			#0x10,d1													| too close to solvalou?
		bcs				1b																| yes, try again
		move.b		d0,(_Y,a5)												| spriteY (MSB)
		rts

* copyright message 
* - NAMCO ORIGINAL
* - program by EVEZOO
* scores 10 pts because _PTS is zero
handle_53_Easter_Egg: | $3A46
		tst.b			(attract_mode_stage)							| attract mode?
		bne				remove_easter_egg									| yes, go
		move.b		#2,(_STATE,a5)
		clr.b			(_ATTR,a5)												| bank=0, size=1x1
		clr.b			(_CODE,a5)												| invisible sprite
		SET_REENTRY_ADDR_HERE
		cmp.b			#3,(_STATE,a5)										| hit?
		beq				check_copyright_strings						| yes, go
		jsr				scroll_sprite_X				
		bra				add_obj_handler

check_copyright_strings: | $3A75
		move.b		#0x80,(_TIMER,a5)									| init timer
		*** here is where the Z80 code checked the copyright strings
		*** and displayed a message if they had been modified
		*** obviously no point doing that now
		jsr				display_easter_egg
		SET_REENTRY_ADDR_HERE
		sub.b			#1,(_TIMER,a5)										| dec timer
		beq				1f
		rts
1:	jsr				wipe_easter_egg
		
remove_easter_egg: | $3AA5
		clr.b			(_STATE,a5)
		clr.b			(_TYPE,a5)
		bra				add_obj_handler
		
display_easter_egg: | $3AC9
		lea				str_NAMCO_ORIGINAL,a0
		jsr				cpl_and_display_string_16
		move.w		#0x1921,d0												| screen col,row
		moveq			#19,d7
		moveq			#BANK_FG_COLORRAM,d2
		move.w		#0x1a,d1
		jsr				display_char_B_times
		.ifeq OPT_NEOGEO_EASTER_EGG
		lea				str_program_by_EVEZOO,a0
		.else
		lea				str_NEOGEO_by_tcdev,a0
		.endif
		bra				cpl_and_display_string_24

str_NAMCO_ORIGINAL:
		.byte 0xD0, 0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA 								| "NAMCO" (gfx)
    .byte 0xDB, 0xE7, 0xE4, 0xED, 0xEF, 0xED, 0xE8, 0xF5, 0xEA 		| " ORIGINAL"
str_program_by_EVEZOO:
		.byte 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBA, 0xB8, 0xBB, 0xC3, 0xB8, 0xC9, 0xBD, 0xDB, 0xC8, 0xB1, 0xDB
    .byte 0xF1, 0xE0, 0xF1, 0xDC, 0xE7, 0xE7, 0xDB, 0xDB 					| "     program by EVEZOO  "
str_NEOGEO_by_tcdev:
		.byte 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xE8, 0xF1, 0xE7, 0xEF, 0xF1, 0xE7, 0xDB, 0xC8, 0xB1, 0xDB, 0xB6
		.byte 0xC7, 0xC6, 0xC5, 0xB4, 0xDB, 0xDB, 0xDB, 0xDB					| "     NEOGEO by tcdev    "
		
cpl_and_display_string_16: | $3B48
		movea.l		#unk_8480,a1
		moveq			#16-1,d7
1:	move.b		(a0)+,d0
		not.b			d0
		move.b		d0,(a1)+
		dbf				d7,1b
		move.w		#0x1921,d0												| screen col,row
		lea				unk_8480,a0												| string
		moveq			#16,d7														| length
		moveq			#BANK_FG_VIDEORAM,d2
		jsr				display_string
		rts	
		
cpl_and_display_string_24: | $3B62
		movea.l		#unk_8480,a1
		moveq			#24-1,d7
1:	move.b		(a0)+,d0
		not.b			d0
		move.b		d0,(a1)+
		dbf				d7,1b
		move.w		#0x1722,d0												| screen col,row
		lea				unk_8480,a0												| string
		moveq			#24,d7														| length
		moveq			#BANK_FG_VIDEORAM,d2
		jsr				display_string
		rts	

wipe_easter_egg: | $3B7C
		move.w		#0x1921,d0												| screen col,row
		moveq			#16,d7
		moveq			#BANK_FG_VIDEORAM,d2
		move.w		#0x24,d1													| space
		jsr				display_char_B_times
		move.w		#0x1921,d0												| screen col,row
		moveq			#16,d7
		moveq			#BANK_FG_COLORRAM,d2
		move.w		#0x24,d1													| space
		jsr				display_char_B_times
		move.w		#0x1722,d0												| screen col,row
		moveq			#24,d7
		moveq			#BANK_FG_VIDEORAM,d2
		bra				display_char_B_times		
				
obj_handler_tbl: | $3C83
		.long			0
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			handle_06_Bullet
		.long			handle_07_Garu_Zakato_Bullet
		.long			0
		.long			handle_09_Brag_Spario
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0
		.long			handle_0F_Torkan
		.long			handle_10_Kapi
		.long			handle_11_Terrazi
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0
		.long			handle_18_Garu_Zakato
		.long			0
		.long			0
		.long			handle_1B_Derota
		.long			0
		.long			handle_1D_Sol_Tower
		.long			handle_1E_Barra
		.long			handle_1F_Zolbak
		.long			handle_20_Garu_Barra
		.long			handle_21_Garu_Derota
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			handle_26_Logram
		.long			0
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			handle_2C_Grobda_stationary
		.long			handle_2D_Boza_Logram
		.long			handle_2E_Domogram
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			0
		.long			0
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			handle_35_Grobda_fwd
		.long			handle_36_Grobda_crosshairs_fwd
		.long			0																	| NOT USED
		.long			handle_38_Grobda_fwd_crosshairs_stop_fwd
		.long			handle_39_Grobda_targeted_back_stop
		.long			handle_3A_Grobda_fwd_crosshairs_darts_fwd
		.long			handle_3B_Grobda_fwd_targeted_back_fwd
		.long			handle_3C_Grobda_targeted_fast_fwd
		.long			handle_3D_Grobda_stationary_in_water
		.long			handle_3E_Grobda_fwd_in_water
		.long			handle_3F_Grobda_crosshairs_fwd_in_water
		.long			handle_40_Grobda_fwd_targeted_back_fwd_in_water
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			0																	| NOT USED
		.long			0
		.long			0
		.long			0
		.long			0
		.long			handle_53_Easter_Egg
		.long			handle_54_Bonus_Flag
		.long			0
		.long			0
		.long			0																	| NOT USED

* points per object
* - object table holds index to value
object_value_tbl: | $3D31
		.byte 1, 0, 0                               | 10 (offset=0)
    .byte 2, 0, 0                               | 20 (offset=3)
    .byte 3, 0, 0                               | 30 (offset=6)
    .byte 5, 0, 0                               | 50 (offset=9)
    .byte 7, 0, 0                               | 70 (offset=12)
    .byte 0x10, 0, 0                            | 100 (offset=15)
    .byte 0x15, 0, 0                            | 150 (offset=18)
    .byte 0x20, 0, 0                            | 200 (offset=21)
    .byte 0x25, 0, 0                            | 250 (offset=24)
    .byte 0x30, 0, 0                            | 300 (offset=27)
    .byte 0x40, 0, 0                            | 400 (offset=30)
    .byte 0x50, 0, 0                            | 500 (offset=33)
    .byte 0x60, 0, 0                            | 600 (offset=36)
    .byte 0x70, 0, 0                            | 700 (offset=39)
    .byte 0x80, 0, 0                            | 800 (offset=42)
    .byte 0x90, 0, 0                            | 900 (offset=45)
    .byte 0, 1, 0                               | 1,000 (offset=48)
    .byte 0x50, 1, 0                            | 1,500 (offset=51)
    .byte 0, 2, 0                               | 2,000 (offset=54)
    .byte 0x50, 2, 0                            | 2,500 (offset=57)
    .byte 0, 4, 0                               | 4,000 (offset=60)
pts_10000: | $3D70
		.byte 0, 0x10, 0                            | 10,000 (offset=63)

* (dX,dY) pairs for angles
angle_dX_dY_terrazi_tbl: | $3DB3
    .byte 0, 0x30
    .byte 9, 0x2F
    .byte 0x12, 0x2C
    .byte 0x1B, 0x28
    .byte 0x22, 0x22
    .byte 0x28, 0x1B
    .byte 0x2C, 0x12
    .byte 0x2F, 9
    .byte 0x30, 0
    .byte 0x2F, 0xF7
    .byte 0x2C, 0xEE
    .byte 0x28, 0xE5
    .byte 0x22, 0xDE
    .byte 0x1B, 0xD8
    .byte 0x12, 0xD4
    .byte 9, 0xD1
    .byte 0, 0xD0
    .byte 0xF7, 0xD1
    .byte 0xEE, 0xD4
    .byte 0xE5, 0xD8
    .byte 0xDE, 0xDE
    .byte 0xD8, 0xE5
    .byte 0xD4, 0xEE
    .byte 0xD1, 0xF7
    .byte 0xD0, 0
    .byte 0xD1, 9
    .byte 0xD4, 0x12
    .byte 0xD8, 0x1B
    .byte 0xDE, 0x22
    .byte 0xE5, 0x28
    .byte 0xEE, 0x2C
    .byte 0xF7, 0x2F

* (dX,dY) pairs for angles
angle_dX_dY_tbl: | $3DF3
		.byte 0, 0x20
    .byte 6, 0x1F
    .byte 0xC, 0x1E
    .byte 0x11, 0x1B
    .byte 0x17, 0x17
    .byte 0x1B, 0x11
    .byte 0x1E, 0xC
    .byte 0x1F, 6
    .byte 0x20, 0
    .byte 0x1F, 0xFA
    .byte 0x1E, 0xF4
    .byte 0x1B, 0xEF
    .byte 0x17, 0xE9
    .byte 0x11, 0xE5
    .byte 0xC, 0xE2
    .byte 6, 0xE1
    .byte 0, 0xE0
    .byte 0xFA, 0xE1
    .byte 0xF4, 0xE2
    .byte 0xEF, 0xE5
    .byte 0xE9, 0xE9
    .byte 0xE5, 0xEF
    .byte 0xE2, 0xF4
    .byte 0xE1, 0xFA
    .byte 0xE0, 0
    .byte 0xE1, 6
    .byte 0xE2, 0xC
    .byte 0xE5, 0x11
    .byte 0xE9, 0x17
    .byte 0xEF, 0x1B
    .byte 0xF4, 0x1E
    .byte 0xFA, 0x1F
						
area_offset_in_map_tbl: | $3EB3
		.byte 0x24, 0, 0x54, 0xE, 0x40, 0x1A, 0x64, 4, 0x2A, 0x5C, 0xE, 4, 0x38, 0x54, 0x1A, 0
		
strHIGH_SCORE: | $3EC3
		.byte 0x11, 0x12, 0x10, 0x11, 0x24, 0x1C, 0xC, 0x18, 0x1B, 0xE

strCOPYRIGHT:	| $3ECD
		.byte 0x2D, 0x2E, 0x28, 0x24, 1, 9, 8, 2, 0x24, 0x17, 0xA, 0x16, 0xC, 0x18, 0x24, 0x15
		.byte	0x1D, 0xD, 0x50

strNAMCO: | $3E0E
		.byte	0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35
		
_end_of_xevious_main_rom:

		.bss
		
* RAM and variables

		.align 4                  					
main_fn_tbl_RAM:												ds.l	32
main_2_fn_tbl_1:												ds.l	32
main_30_fn_tbl:													ds.l	3
main_2_fn_tbl_2:												ds.l	26
                              					
		.align 2                  					
attract_mode_stage:											ds.w	1
vb_semaphore_main:											ds.b	1						| 
countup_timer_1:												ds.b	1						| 
                              					
vb_semaphore_sub:												ds.b	1
                              					
P1_inputs:															ds.b	1
P2_inputs:															ds.b	1						| must follow P1_inputs
start_pressed:													ds.b	1
pulsing_colour_1:												ds.b	1
curr_player:														ds.b	1
two_player_game:												ds.b	1
is_real_game:														ds.b	1
pulsing_colour_2:												ds.b	1
shot_flag:															ds.b	1
shot_timer_init_value:									ds.b	1
shot_timer:															ds.b	1
andor_genesis_colour:										ds.b	1
countdown_timer_1:											ds.b	1
solvalou_exploding:											ds.b	1
RAM_high_score:													ds.b	1
																				ds.b	1
high_score_msb:													ds.b	1
num_credits:														ds.b	1
scroll_disabled:												ds.b	1
num_flying_enemies:											ds.b	1
flying_enemy_type_tbl_offset:						ds.b	1
max_bacura:															ds.b	1
area_offset_in_map:											ds.b	1

* current player state information

curr_player_score_lsb:									ds.b	1
																				ds.b	1
curr_player_score_msb:									ds.b	1
curr_player_solvalou_left:							ds.b	1
		.align 2                  					
area_obj_ptr:														ds.l	1
area:																		ds.w	1
enemy_AI_level:													ds.w	1
next_domogram:													ds.w	1

* this value is set from the object table
* in the SUB CPU as the map is generated
* used for both Derota & Garu Derota
* area01=$0F, area03=$03, area05=$07,$0F, area06=$07
fire_freq_mask_derota:									ds.b	1

* this value is set from the object table
* in the SUB CPU as the map is generated
* area01=$07, area12=$03
fire_freq_mask_kapi:										ds.b	1

* this value is set from the object table
* in SUB CPU as map is generated
* area01=$07 area12=$03
fire_freq_mask_terrazi:									ds.b	1

* this value is set from the object table
* in SUB CPU as map is generated
* area01=$FF,$1F area05=$0F
fire_freq_mask_logram:									ds.b	1

* this value is set from the object table
* in SUB CPU as map is generated
* area01=$1F area12=$0F
fire_freq_mask_81A4:										ds.b	1

* this value is set from the object table
* in SUB CPU as map is generated
* area01=$1F area05=$0F area07=$07
fire_freq_mask_boza_logram:							ds.b	1

* this value is set from the object table
* in SUB CPU as map is generated
* area01=$1F area05=$0F area06=$FF,$0F area07=$3F
* area08=$FF, area10=$3F, area12=$0F, area16=$1F
fire_freq_mask_domogram:								ds.b	1

byte_81A7:															ds.b	1
                              					
gnd_stop_firing_row:										ds.b	1

* other player state information

other_player_score_lsb:									ds.b	1
																				ds.b	1
other_player_score_msb:									ds.b	1
other_player_solvalou_left:							ds.b	1
                              					
high_score_1st_lsb:											ds.b	2
high_score_1st_msb:											ds.b	1
high_score_1st_name:										ds.b	10
																				ds.b	3
high_score_2nd_lsb:											ds.b	2
high_score_2nd_msb:											ds.b	1
high_score_2nd_name:										ds.b	10
																				ds.b	3
high_score_3rd_lsb:											ds.b	2
high_score_3rd_msb:											ds.b	1
high_score_3rd_name:										ds.b	10
																				ds.b	3
high_score_4th_lsb:											ds.b	2
high_score_4th_msb:											ds.b	1
high_score_4th_name:										ds.b	10
																				ds.b	3
high_score_5th_lsb:											ds.b	2
high_score_5th_msb:											ds.b	1
high_score_5th_name:										ds.b	10
																				ds.b	3
                              					
maincpu_inited:													ds.b	1

* buffer for decrypting easter egg messsages
unk_8480:																ds.b	32
															
*** different size/align or not from transcode

		.align 2
pseudo_random_seed:											ds.w	1
bg_scroll_x_shadow:											ds.w	1
scroll_cntr:														ds.w	1
scroll_delta:														ds.w	1
dswa_0115:															ds.b	1
dswb_0115:															ds.b	1

		.align 0x1000
* 64 objects, 32 bytes per object
obj_tbl:																ds.b	_OBJSIZE*64

* 12 entries, 64 bytes per entry
domogram_tbl:														ds.b	64*12

		.align 0x800
fg_colorram:														ds.b	0x800
bg_colorram:														ds.b	0x800
fg_videoram:														ds.b	0x800
bg_videoram:														ds.b	0x800

