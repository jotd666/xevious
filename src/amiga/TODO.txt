* to see with Mark:

- sprite shadow management: complete?
  probably not for double width/height objects
- find a way to make up for those shaking ground enemies
- big boss (section 14): some bullets seem to stick around
- level 14: tile layout looks wrong (bird drawing)

* can be worked on my own:

- sprites for big mothership (allows to use alternate brown/gold colors): set section 14
  (rebuild the "killed" mothership image, and let only the 4+1 tiles with glowing red as
  BOBs. The rest should not blit anything
- rip sounds
- dump statistics on sprite colors: color used in how many sprites, ...
- remove colors only used in "bragza" as there are a lot of them and
  we can't really afford it: all grays are killed
  (use 2 sprites for it it should work for great effect)
  "184": [
    21,
    25
  ],
  "185": [
    22,
    26
  ],
  "186": [
    23,
    27
  ],
  "187": [
    24,
    28
  ],
- finish to name enemies & objects (useful for color stats)
- title tiles missing (level 14) title tiles also with brown color config???
  related to hole in map???
  probably related to warning (improve the warning): 22:64: <PIL.Image.Image image mode=RGB size=8x8 at 0x187C30614F0>: (x=0,y=0) rounded color (81, 81, 81) (#515151) not found, orig color (81, 81, 81) (#515151), maybe try adjusting precision mask 0 close colors: []
  
- glitter sprite (title screen) should be a HW sprite
- fg tiles flashing, check that there isn't a big "clear" blit because of
  a tile with height 0 or something like that
- increase sprite struct to mark it as sprite if no need to clear the area
  (plus if just went inactive, remove the sprite, so got to have stored the
   sprite position somewhere)
   
further optims:

- a lot of blank sprites should just be NOT drawn (ex: clut 0)
- cookie cut with fixed 0 source if plane_pic_0 (saves bandwidth)
- generate NOT tables for FG tiles to optimize tile refresh
- don't generate mirror X-sprites if log doesn't tell game is using it
- if no tile can be double width / double height AND simple at the same time
  generate 16x32,32x16,32x32 bob data directly for a fewer number of blits
  
Build process:

- python and sox must be installed to be able to perform the wav2raw conversions
- get "bitplanelib.py" (asset conversion tool needs it) at https://github.com/jotd666/amiga68ktools.git
- run "makefile" to generate missing .68k files using python scripts, then build


When changing asset-related data (since dependencies aren't good):

- To update the "graphics.68k" & "palette*.68k" files from "assets/amiga" subdir, 
  just run the "convert_sprites.py" python script, 
- To update sounds, use "convert_sounds.py"
  python script (audio) to create sound*.68k files.
  
